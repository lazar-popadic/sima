
Simeon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c64  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002df0  08002df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e30  08002e30  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002e30  08002e30  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e30  08002e30  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e30  08002e30  00012e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000010  08002e48  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08002e48  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005548  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001601  00000000  00000000  000255cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b8  00000000  00000000  00026bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004e1  00000000  00000000  00027288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ec4d  00000000  00000000  00027769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009433  00000000  00000000  000463b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6133  00000000  00000000  0004f7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000017a0  00000000  00000000  0010591c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001070bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002dd8 	.word	0x08002dd8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08002dd8 	.word	0x08002dd8

080001cc <ax_angle_move>:
update_crc (unsigned short crc_accum, unsigned char *data_blk_ptr,
	    unsigned short data_blk_size);

void
ax_angle_move (uint8_t id, uint16_t angle, uint16_t speed)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	460b      	mov	r3, r1
 80001d8:	80bb      	strh	r3, [r7, #4]
 80001da:	4613      	mov	r3, r2
 80001dc:	807b      	strh	r3, [r7, #2]
	uint8_t angle_low, angle_high, speed_low, speed_high;
	  angle_low = angle & 0xff;
 80001de:	88bb      	ldrh	r3, [r7, #4]
 80001e0:	77bb      	strb	r3, [r7, #30]
	  angle_high = angle >> 8;
 80001e2:	88bb      	ldrh	r3, [r7, #4]
 80001e4:	0a1b      	lsrs	r3, r3, #8
 80001e6:	b29b      	uxth	r3, r3
 80001e8:	777b      	strb	r3, [r7, #29]
	  speed_low = speed & 0xff;
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	773b      	strb	r3, [r7, #28]
	  speed_high = speed >> 8;
 80001ee:	887b      	ldrh	r3, [r7, #2]
 80001f0:	0a1b      	lsrs	r3, r3, #8
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	76fb      	strb	r3, [r7, #27]

	  uint16_t checksum_local = id + 7 + 3 + 0x1e + angle_low + angle_high
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	b29a      	uxth	r2, r3
 80001fa:	7fbb      	ldrb	r3, [r7, #30]
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	4413      	add	r3, r2
 8000200:	b29a      	uxth	r2, r3
 8000202:	7f7b      	ldrb	r3, [r7, #29]
 8000204:	b29b      	uxth	r3, r3
 8000206:	4413      	add	r3, r2
 8000208:	b29a      	uxth	r2, r3
	      + speed_low + speed_high;
 800020a:	7f3b      	ldrb	r3, [r7, #28]
 800020c:	b29b      	uxth	r3, r3
 800020e:	4413      	add	r3, r2
 8000210:	b29a      	uxth	r2, r3
 8000212:	7efb      	ldrb	r3, [r7, #27]
 8000214:	b29b      	uxth	r3, r3
 8000216:	4413      	add	r3, r2
 8000218:	b29b      	uxth	r3, r3
	  uint16_t checksum_local = id + 7 + 3 + 0x1e + angle_low + angle_high
 800021a:	3328      	adds	r3, #40	; 0x28
 800021c:	833b      	strh	r3, [r7, #24]
	  uint8_t checksum = (uint8_t) (~checksum_local);
 800021e:	8b3b      	ldrh	r3, [r7, #24]
 8000220:	b2db      	uxtb	r3, r3
 8000222:	43db      	mvns	r3, r3
 8000224:	75fb      	strb	r3, [r7, #23]
	  uint8_t ax_move[] =
 8000226:	23ff      	movs	r3, #255	; 0xff
 8000228:	733b      	strb	r3, [r7, #12]
 800022a:	23ff      	movs	r3, #255	; 0xff
 800022c:	737b      	strb	r3, [r7, #13]
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	73bb      	strb	r3, [r7, #14]
 8000232:	2307      	movs	r3, #7
 8000234:	73fb      	strb	r3, [r7, #15]
 8000236:	2303      	movs	r3, #3
 8000238:	743b      	strb	r3, [r7, #16]
 800023a:	231e      	movs	r3, #30
 800023c:	747b      	strb	r3, [r7, #17]
 800023e:	7fbb      	ldrb	r3, [r7, #30]
 8000240:	74bb      	strb	r3, [r7, #18]
 8000242:	7f7b      	ldrb	r3, [r7, #29]
 8000244:	74fb      	strb	r3, [r7, #19]
 8000246:	7f3b      	ldrb	r3, [r7, #28]
 8000248:	753b      	strb	r3, [r7, #20]
 800024a:	7efb      	ldrb	r3, [r7, #27]
 800024c:	757b      	strb	r3, [r7, #21]
 800024e:	7dfb      	ldrb	r3, [r7, #23]
 8000250:	75bb      	strb	r3, [r7, #22]
	    { 0xff, 0xff, id, 0x07, 0x03, 0x1E, angle_low, angle_high, speed_low,
		speed_high, checksum };

  for (uint8_t i = 0; i < 11; i++)
 8000252:	2300      	movs	r3, #0
 8000254:	77fb      	strb	r3, [r7, #31]
 8000256:	e00a      	b.n	800026e <ax_angle_move+0xa2>
    {
      UART_send_byte(ax_move[i]);
 8000258:	7ffb      	ldrb	r3, [r7, #31]
 800025a:	3320      	adds	r3, #32
 800025c:	443b      	add	r3, r7
 800025e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fc50 	bl	8001b08 <UART_send_byte>
  for (uint8_t i = 0; i < 11; i++)
 8000268:	7ffb      	ldrb	r3, [r7, #31]
 800026a:	3301      	adds	r3, #1
 800026c:	77fb      	strb	r3, [r7, #31]
 800026e:	7ffb      	ldrb	r3, [r7, #31]
 8000270:	2b0a      	cmp	r3, #10
 8000272:	d9f1      	bls.n	8000258 <ax_angle_move+0x8c>
    }
}
 8000274:	bf00      	nop
 8000276:	bf00      	nop
 8000278:	3720      	adds	r7, #32
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <ax_wheel_mode>:

void
ax_wheel_mode(uint8_t id)
{
 800027e:	b580      	push	{r7, lr}
 8000280:	b086      	sub	sp, #24
 8000282:	af00      	add	r7, sp, #0
 8000284:	4603      	mov	r3, r0
 8000286:	71fb      	strb	r3, [r7, #7]
	// 0-1023 CCW
	// 1024-2047 CW

	uint16_t checksum_local = id + 5 + 3 + 8;
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	b29b      	uxth	r3, r3
 800028c:	3310      	adds	r3, #16
 800028e:	82bb      	strh	r3, [r7, #20]
	uint8_t checksum = (uint8_t) (~checksum_local);
 8000290:	8abb      	ldrh	r3, [r7, #20]
 8000292:	b2db      	uxtb	r3, r3
 8000294:	43db      	mvns	r3, r3
 8000296:	74fb      	strb	r3, [r7, #19]
	uint8_t ax_move[] =
 8000298:	23ff      	movs	r3, #255	; 0xff
 800029a:	723b      	strb	r3, [r7, #8]
 800029c:	23ff      	movs	r3, #255	; 0xff
 800029e:	727b      	strb	r3, [r7, #9]
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	72bb      	strb	r3, [r7, #10]
 80002a4:	2305      	movs	r3, #5
 80002a6:	72fb      	strb	r3, [r7, #11]
 80002a8:	2303      	movs	r3, #3
 80002aa:	733b      	strb	r3, [r7, #12]
 80002ac:	2308      	movs	r3, #8
 80002ae:	737b      	strb	r3, [r7, #13]
 80002b0:	2300      	movs	r3, #0
 80002b2:	73bb      	strb	r3, [r7, #14]
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]
 80002b8:	7cfb      	ldrb	r3, [r7, #19]
 80002ba:	743b      	strb	r3, [r7, #16]
			{ 0xff, 0xff, id, 0x05, 0x03, 0x08, 0x00, 0x00, checksum };

	for (uint8_t i = 0; i < 9; i++)
 80002bc:	2300      	movs	r3, #0
 80002be:	75fb      	strb	r3, [r7, #23]
 80002c0:	e00a      	b.n	80002d8 <ax_wheel_mode+0x5a>
			    {
			      UART_send_byte(ax_move[i]);
 80002c2:	7dfb      	ldrb	r3, [r7, #23]
 80002c4:	3318      	adds	r3, #24
 80002c6:	443b      	add	r3, r7
 80002c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f001 fc1b 	bl	8001b08 <UART_send_byte>
	for (uint8_t i = 0; i < 9; i++)
 80002d2:	7dfb      	ldrb	r3, [r7, #23]
 80002d4:	3301      	adds	r3, #1
 80002d6:	75fb      	strb	r3, [r7, #23]
 80002d8:	7dfb      	ldrb	r3, [r7, #23]
 80002da:	2b08      	cmp	r3, #8
 80002dc:	d9f1      	bls.n	80002c2 <ax_wheel_mode+0x44>
			    }
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	3718      	adds	r7, #24
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <sensor_Init>:
//portC
uint8_t infra_1 = 1;

void
sensor_Init()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
sensor_IO_init();
 80002ec:	f000 f802 	bl	80002f4 <sensor_IO_init>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <sensor_IO_init>:

void
sensor_IO_init()
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (0b1 << 1); //takt za gpioB
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <sensor_IO_init+0x34>)
 80002fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fc:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <sensor_IO_init+0x34>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB-> MODER &= ~(0b11 << 2* infra_1);  //PB1
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <sensor_IO_init+0x38>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a09      	ldr	r2, [pc, #36]	; (8000330 <sensor_IO_init+0x3c>)
 800030a:	7812      	ldrb	r2, [r2, #0]
 800030c:	0052      	lsls	r2, r2, #1
 800030e:	2103      	movs	r1, #3
 8000310:	fa01 f202 	lsl.w	r2, r1, r2
 8000314:	43d2      	mvns	r2, r2
 8000316:	4611      	mov	r1, r2
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <sensor_IO_init+0x38>)
 800031a:	400b      	ands	r3, r1
 800031c:	6013      	str	r3, [r2, #0]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40021000 	.word	0x40021000
 800032c:	48000400 	.word	0x48000400
 8000330:	20000000 	.word	0x20000000

08000334 <sensor_JedanJedini>:

bool
sensor_JedanJedini()
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
	if(GPIOB->IDR & (0b1<<infra_1))
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <sensor_JedanJedini+0x28>)
 800033a:	691b      	ldr	r3, [r3, #16]
 800033c:	4a08      	ldr	r2, [pc, #32]	; (8000360 <sensor_JedanJedini+0x2c>)
 800033e:	7812      	ldrb	r2, [r2, #0]
 8000340:	4611      	mov	r1, r2
 8000342:	2201      	movs	r2, #1
 8000344:	408a      	lsls	r2, r1
 8000346:	4013      	ands	r3, r2
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <sensor_JedanJedini+0x1c>
		return true;
 800034c:	2301      	movs	r3, #1
 800034e:	e000      	b.n	8000352 <sensor_JedanJedini+0x1e>
	return false;
 8000350:	2300      	movs	r3, #0
}
 8000352:	4618      	mov	r0, r3
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	48000400 	.word	0x48000400
 8000360:	20000000 	.word	0x20000000

08000364 <tactic_yellow_3>:
	default:
		break;
	}
}

void tactic_yellow_3(uint8_t AX_Pogonski, uint8_t AX_Zakretni) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	460a      	mov	r2, r1
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	4613      	mov	r3, r2
 8000372:	71bb      	strb	r3, [r7, #6]
	switch (tactic_state) {
 8000374:	4bb8      	ldr	r3, [pc, #736]	; (8000658 <tactic_yellow_3+0x2f4>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b0d      	cmp	r3, #13
 800037c:	f200 828d 	bhi.w	800089a <tactic_yellow_3+0x536>
 8000380:	a201      	add	r2, pc, #4	; (adr r2, 8000388 <tactic_yellow_3+0x24>)
 8000382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000386:	bf00      	nop
 8000388:	080003c1 	.word	0x080003c1
 800038c:	080003e1 	.word	0x080003e1
 8000390:	0800043b 	.word	0x0800043b
 8000394:	0800048b 	.word	0x0800048b
 8000398:	080004db 	.word	0x080004db
 800039c:	0800052b 	.word	0x0800052b
 80003a0:	08000633 	.word	0x08000633
 80003a4:	08000695 	.word	0x08000695
 80003a8:	080006e9 	.word	0x080006e9
 80003ac:	0800073d 	.word	0x0800073d
 80003b0:	08000791 	.word	0x08000791
 80003b4:	080007e5 	.word	0x080007e5
 80003b8:	08000839 	.word	0x08000839
 80003bc:	0800088d 	.word	0x0800088d
	case 0:
		if (IO_cinc()) {
 80003c0:	f001 f958 	bl	8001674 <IO_cinc>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	f000 8269 	beq.w	800089e <tactic_yellow_3+0x53a>
			timer_start_sys_time();
 80003cc:	f001 f9ee 	bl	80017ac <timer_start_sys_time>
			tactic_state++;
 80003d0:	4ba1      	ldr	r3, [pc, #644]	; (8000658 <tactic_yellow_3+0x2f4>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	3301      	adds	r3, #1
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4b9f      	ldr	r3, [pc, #636]	; (8000658 <tactic_yellow_3+0x2f4>)
 80003dc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80003de:	e25e      	b.n	800089e <tactic_yellow_3+0x53a>

	case 1:
		TajmerDelay(200); //90000
 80003e0:	20c8      	movs	r0, #200	; 0xc8
 80003e2:	f001 f9f3 	bl	80017cc <TajmerDelay>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80003e6:	79bb      	ldrb	r3, [r7, #6]
 80003e8:	22c8      	movs	r2, #200	; 0xc8
 80003ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff feec 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80003f4:	79bb      	ldrb	r3, [r7, #6]
 80003f6:	22c8      	movs	r2, #200	; 0xc8
 80003f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff fee5 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 8000402:	20c8      	movs	r0, #200	; 0xc8
 8000404:	f001 f9e2 	bl	80017cc <TajmerDelay>
		ax_wheel_mode(AX_Pogonski);
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff37 	bl	800027e <ax_wheel_mode>
		TajmerDelay(200);
 8000410:	20c8      	movs	r0, #200	; 0xc8
 8000412:	f001 f9db 	bl	80017cc <TajmerDelay>
		ax_angle_move(AX_Pogonski, 0, 1023);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff fed4 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 8000424:	20c8      	movs	r0, #200	; 0xc8
 8000426:	f001 f9d1 	bl	80017cc <TajmerDelay>

		tactic_state++;
 800042a:	4b8b      	ldr	r3, [pc, #556]	; (8000658 <tactic_yellow_3+0x2f4>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	3301      	adds	r3, #1
 8000432:	b2da      	uxtb	r2, r3
 8000434:	4b88      	ldr	r3, [pc, #544]	; (8000658 <tactic_yellow_3+0x2f4>)
 8000436:	701a      	strb	r2, [r3, #0]
		break;
 8000438:	e232      	b.n	80008a0 <tactic_yellow_3+0x53c>

	case 2:
		sensors_case_timer = SENSOR_JJ;
 800043a:	4b88      	ldr	r3, [pc, #544]	; (800065c <tactic_yellow_3+0x2f8>)
 800043c:	2201      	movs	r2, #1
 800043e:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000440:	4b87      	ldr	r3, [pc, #540]	; (8000660 <tactic_yellow_3+0x2fc>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	b2db      	uxtb	r3, r3
 8000446:	2b00      	cmp	r3, #0
 8000448:	d007      	beq.n	800045a <tactic_yellow_3+0xf6>

			interrupted_func_stop(AX_Pogonski);
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	4618      	mov	r0, r3
 800044e:	f000 fcf5 	bl	8000e3c <interrupted_func_stop>
			tactic_state = 2;
 8000452:	4b81      	ldr	r3, [pc, #516]	; (8000658 <tactic_yellow_3+0x2f4>)
 8000454:	2202      	movs	r2, #2
 8000456:	701a      	strb	r2, [r3, #0]
 8000458:	e017      	b.n	800048a <tactic_yellow_3+0x126>
		} else {
			ax_wheel_mode(AX_Pogonski);
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff0e 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000462:	2064      	movs	r0, #100	; 0x64
 8000464:	f001 f9b2 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800046e:	2100      	movs	r1, #0
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff feab 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000476:	2096      	movs	r0, #150	; 0x96
 8000478:	f001 f9a8 	bl	80017cc <TajmerDelay>
			tactic_state++;
 800047c:	4b76      	ldr	r3, [pc, #472]	; (8000658 <tactic_yellow_3+0x2f4>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	3301      	adds	r3, #1
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4b74      	ldr	r3, [pc, #464]	; (8000658 <tactic_yellow_3+0x2f4>)
 8000488:	701a      	strb	r2, [r3, #0]
		}
	case 3:
		sensors_case_timer = SENSOR_JJ;
 800048a:	4b74      	ldr	r3, [pc, #464]	; (800065c <tactic_yellow_3+0x2f8>)
 800048c:	2201      	movs	r2, #1
 800048e:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000490:	4b73      	ldr	r3, [pc, #460]	; (8000660 <tactic_yellow_3+0x2fc>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	b2db      	uxtb	r3, r3
 8000496:	2b00      	cmp	r3, #0
 8000498:	d007      	beq.n	80004aa <tactic_yellow_3+0x146>

			interrupted_func_stop(AX_Pogonski);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	4618      	mov	r0, r3
 800049e:	f000 fccd 	bl	8000e3c <interrupted_func_stop>
			tactic_state = 3;
 80004a2:	4b6d      	ldr	r3, [pc, #436]	; (8000658 <tactic_yellow_3+0x2f4>)
 80004a4:	2203      	movs	r2, #3
 80004a6:	701a      	strb	r2, [r3, #0]
 80004a8:	e017      	b.n	80004da <tactic_yellow_3+0x176>
		} else {
			ax_wheel_mode(AX_Pogonski);
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff fee6 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80004b2:	2064      	movs	r0, #100	; 0x64
 80004b4:	f001 f98a 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80004be:	2100      	movs	r1, #0
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff fe83 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 80004c6:	2096      	movs	r0, #150	; 0x96
 80004c8:	f001 f980 	bl	80017cc <TajmerDelay>
			tactic_state++;
 80004cc:	4b62      	ldr	r3, [pc, #392]	; (8000658 <tactic_yellow_3+0x2f4>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	3301      	adds	r3, #1
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b60      	ldr	r3, [pc, #384]	; (8000658 <tactic_yellow_3+0x2f4>)
 80004d8:	701a      	strb	r2, [r3, #0]
		}
	case 4:
		sensors_case_timer = SENSOR_JJ;
 80004da:	4b60      	ldr	r3, [pc, #384]	; (800065c <tactic_yellow_3+0x2f8>)
 80004dc:	2201      	movs	r2, #1
 80004de:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 80004e0:	4b5f      	ldr	r3, [pc, #380]	; (8000660 <tactic_yellow_3+0x2fc>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d007      	beq.n	80004fa <tactic_yellow_3+0x196>

			interrupted_func_stop(AX_Pogonski);
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fca5 	bl	8000e3c <interrupted_func_stop>
			tactic_state = 4;
 80004f2:	4b59      	ldr	r3, [pc, #356]	; (8000658 <tactic_yellow_3+0x2f4>)
 80004f4:	2204      	movs	r2, #4
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	e017      	b.n	800052a <tactic_yellow_3+0x1c6>
		} else {
			ax_wheel_mode(AX_Pogonski);
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff febe 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000502:	2064      	movs	r0, #100	; 0x64
 8000504:	f001 f962 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe5b 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000516:	2096      	movs	r0, #150	; 0x96
 8000518:	f001 f958 	bl	80017cc <TajmerDelay>
			tactic_state++;
 800051c:	4b4e      	ldr	r3, [pc, #312]	; (8000658 <tactic_yellow_3+0x2f4>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	3301      	adds	r3, #1
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b4c      	ldr	r3, [pc, #304]	; (8000658 <tactic_yellow_3+0x2f4>)
 8000528:	701a      	strb	r2, [r3, #0]
		}
	case 5:
		sensors_case_timer = SENSOR_JJ;
 800052a:	4b4c      	ldr	r3, [pc, #304]	; (800065c <tactic_yellow_3+0x2f8>)
 800052c:	2201      	movs	r2, #1
 800052e:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000530:	4b4b      	ldr	r3, [pc, #300]	; (8000660 <tactic_yellow_3+0x2fc>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2b00      	cmp	r3, #0
 8000538:	d007      	beq.n	800054a <tactic_yellow_3+0x1e6>

			interrupted_func_stop(AX_Pogonski);
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fc7d 	bl	8000e3c <interrupted_func_stop>
			tactic_state = 5;
 8000542:	4b45      	ldr	r3, [pc, #276]	; (8000658 <tactic_yellow_3+0x2f4>)
 8000544:	2205      	movs	r2, #5
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	e073      	b.n	8000632 <tactic_yellow_3+0x2ce>
		} else {
			ax_wheel_mode(AX_Pogonski);
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff fe96 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000552:	2064      	movs	r0, #100	; 0x64
 8000554:	f001 f93a 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	f240 22ff 	movw	r2, #767	; 0x2ff
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fe33 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	f240 22ff 	movw	r2, #767	; 0x2ff
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff fe2c 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	f240 22ff 	movw	r2, #767	; 0x2ff
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff fe25 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff fe1e 	bl	80001cc <ax_angle_move>
			TajmerDelay(200);
 8000590:	20c8      	movs	r0, #200	; 0xc8
 8000592:	f001 f91b 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Zakretni, DESNO, 1000);
 8000596:	79bb      	ldrb	r3, [r7, #6]
 8000598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800059c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fe13 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, DESNO, 1000);
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ac:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe0b 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, DESNO, 1000);
 80005b6:	79bb      	ldrb	r3, [r7, #6]
 80005b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005bc:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fe03 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, DESNO, 1000);
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005cc:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fdfb 	bl	80001cc <ax_angle_move>
			TajmerDelay(300);
 80005d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005da:	f001 f8f7 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff fdef 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fde7 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80005fe:	79bb      	ldrb	r3, [r7, #6]
 8000600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000604:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fddf 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000614:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fdd7 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 800061e:	2096      	movs	r0, #150	; 0x96
 8000620:	f001 f8d4 	bl	80017cc <TajmerDelay>
			tactic_state++;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <tactic_yellow_3+0x2f4>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	3301      	adds	r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <tactic_yellow_3+0x2f4>)
 8000630:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		sensors_case_timer = SENSOR_JJ;
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <tactic_yellow_3+0x2f8>)
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <tactic_yellow_3+0x2fc>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d010      	beq.n	8000664 <tactic_yellow_3+0x300>

			interrupted_func_left_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000642:	79ba      	ldrb	r2, [r7, #6]
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fdab 	bl	80011a4 <interrupted_func_left_forward_sideway>
			tactic_state = 6;
 800064e:	4b02      	ldr	r3, [pc, #8]	; (8000658 <tactic_yellow_3+0x2f4>)
 8000650:	2206      	movs	r2, #6
 8000652:	701a      	strb	r2, [r3, #0]
 8000654:	e01e      	b.n	8000694 <tactic_yellow_3+0x330>
 8000656:	bf00      	nop
 8000658:	2000002c 	.word	0x2000002c
 800065c:	20000034 	.word	0x20000034
 8000660:	20000035 	.word	0x20000035
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fe09 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 800066c:	2064      	movs	r0, #100	; 0x64
 800066e:	f001 f8ad 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fda6 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000680:	2096      	movs	r0, #150	; 0x96
 8000682:	f001 f8a3 	bl	80017cc <TajmerDelay>
			tactic_state++;
 8000686:	4b88      	ldr	r3, [pc, #544]	; (80008a8 <tactic_yellow_3+0x544>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	3301      	adds	r3, #1
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b85      	ldr	r3, [pc, #532]	; (80008a8 <tactic_yellow_3+0x544>)
 8000692:	701a      	strb	r2, [r3, #0]
		}
	case 7:
		sensors_case_timer = SENSOR_JJ;
 8000694:	4b85      	ldr	r3, [pc, #532]	; (80008ac <tactic_yellow_3+0x548>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 800069a:	4b85      	ldr	r3, [pc, #532]	; (80008b0 <tactic_yellow_3+0x54c>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d009      	beq.n	80006b8 <tactic_yellow_3+0x354>

			interrupted_func_left_forward_sideway(AX_Pogonski, AX_Zakretni);
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fd7a 	bl	80011a4 <interrupted_func_left_forward_sideway>
			tactic_state = 7;
 80006b0:	4b7d      	ldr	r3, [pc, #500]	; (80008a8 <tactic_yellow_3+0x544>)
 80006b2:	2207      	movs	r2, #7
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e017      	b.n	80006e8 <tactic_yellow_3+0x384>
		} else {
			ax_wheel_mode(AX_Pogonski);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fddf 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80006c0:	2064      	movs	r0, #100	; 0x64
 80006c2:	f001 f883 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fd7c 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 80006d4:	2096      	movs	r0, #150	; 0x96
 80006d6:	f001 f879 	bl	80017cc <TajmerDelay>
			tactic_state++;
 80006da:	4b73      	ldr	r3, [pc, #460]	; (80008a8 <tactic_yellow_3+0x544>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	3301      	adds	r3, #1
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4b70      	ldr	r3, [pc, #448]	; (80008a8 <tactic_yellow_3+0x544>)
 80006e6:	701a      	strb	r2, [r3, #0]
		}
	case 8:
		sensors_case_timer = SENSOR_JJ;
 80006e8:	4b70      	ldr	r3, [pc, #448]	; (80008ac <tactic_yellow_3+0x548>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 80006ee:	4b70      	ldr	r3, [pc, #448]	; (80008b0 <tactic_yellow_3+0x54c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d009      	beq.n	800070c <tactic_yellow_3+0x3a8>

			interrupted_func_left_forward_sideway(AX_Pogonski, AX_Zakretni);
 80006f8:	79ba      	ldrb	r2, [r7, #6]
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fd50 	bl	80011a4 <interrupted_func_left_forward_sideway>
			tactic_state = 8;
 8000704:	4b68      	ldr	r3, [pc, #416]	; (80008a8 <tactic_yellow_3+0x544>)
 8000706:	2208      	movs	r2, #8
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	e017      	b.n	800073c <tactic_yellow_3+0x3d8>
		} else {
			ax_wheel_mode(AX_Pogonski);
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fdb5 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000714:	2064      	movs	r0, #100	; 0x64
 8000716:	f001 f859 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fd52 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000728:	2096      	movs	r0, #150	; 0x96
 800072a:	f001 f84f 	bl	80017cc <TajmerDelay>
			tactic_state++;
 800072e:	4b5e      	ldr	r3, [pc, #376]	; (80008a8 <tactic_yellow_3+0x544>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	3301      	adds	r3, #1
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b5b      	ldr	r3, [pc, #364]	; (80008a8 <tactic_yellow_3+0x544>)
 800073a:	701a      	strb	r2, [r3, #0]
		}
	case 9:
		sensors_case_timer = SENSOR_JJ;
 800073c:	4b5b      	ldr	r3, [pc, #364]	; (80008ac <tactic_yellow_3+0x548>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000742:	4b5b      	ldr	r3, [pc, #364]	; (80008b0 <tactic_yellow_3+0x54c>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d009      	beq.n	8000760 <tactic_yellow_3+0x3fc>

			interrupted_func_left_forward_sideway(AX_Pogonski, AX_Zakretni);
 800074c:	79ba      	ldrb	r2, [r7, #6]
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fd26 	bl	80011a4 <interrupted_func_left_forward_sideway>
			tactic_state = 9;
 8000758:	4b53      	ldr	r3, [pc, #332]	; (80008a8 <tactic_yellow_3+0x544>)
 800075a:	2209      	movs	r2, #9
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	e017      	b.n	8000790 <tactic_yellow_3+0x42c>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fd8b 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000768:	2064      	movs	r0, #100	; 0x64
 800076a:	f001 f82f 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fd28 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 800077c:	2096      	movs	r0, #150	; 0x96
 800077e:	f001 f825 	bl	80017cc <TajmerDelay>
			tactic_state++;
 8000782:	4b49      	ldr	r3, [pc, #292]	; (80008a8 <tactic_yellow_3+0x544>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	3301      	adds	r3, #1
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b46      	ldr	r3, [pc, #280]	; (80008a8 <tactic_yellow_3+0x544>)
 800078e:	701a      	strb	r2, [r3, #0]
		}
	case 10:
		sensors_case_timer = SENSOR_JJ;
 8000790:	4b46      	ldr	r3, [pc, #280]	; (80008ac <tactic_yellow_3+0x548>)
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000796:	4b46      	ldr	r3, [pc, #280]	; (80008b0 <tactic_yellow_3+0x54c>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d009      	beq.n	80007b4 <tactic_yellow_3+0x450>

			interrupted_func_left_forward_sideway(AX_Pogonski, AX_Zakretni);
 80007a0:	79ba      	ldrb	r2, [r7, #6]
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4611      	mov	r1, r2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fcfc 	bl	80011a4 <interrupted_func_left_forward_sideway>
			tactic_state = 10;
 80007ac:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <tactic_yellow_3+0x544>)
 80007ae:	220a      	movs	r2, #10
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e017      	b.n	80007e4 <tactic_yellow_3+0x480>
		} else {
			ax_wheel_mode(AX_Pogonski);
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fd61 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80007bc:	2064      	movs	r0, #100	; 0x64
 80007be:	f001 f805 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fcfe 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 80007d0:	2096      	movs	r0, #150	; 0x96
 80007d2:	f000 fffb 	bl	80017cc <TajmerDelay>
			tactic_state++;
 80007d6:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <tactic_yellow_3+0x544>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	3301      	adds	r3, #1
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <tactic_yellow_3+0x544>)
 80007e2:	701a      	strb	r2, [r3, #0]
		}
	case 11:
		sensors_case_timer = SENSOR_JJ;
 80007e4:	4b31      	ldr	r3, [pc, #196]	; (80008ac <tactic_yellow_3+0x548>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 80007ea:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <tactic_yellow_3+0x54c>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d009      	beq.n	8000808 <tactic_yellow_3+0x4a4>

			interrupted_func_left_forward_sideway(AX_Pogonski, AX_Zakretni);
 80007f4:	79ba      	ldrb	r2, [r7, #6]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 fcd2 	bl	80011a4 <interrupted_func_left_forward_sideway>
			tactic_state = 11;
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <tactic_yellow_3+0x544>)
 8000802:	220b      	movs	r2, #11
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	e017      	b.n	8000838 <tactic_yellow_3+0x4d4>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fd37 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000810:	2064      	movs	r0, #100	; 0x64
 8000812:	f000 ffdb 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fcd4 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000824:	2096      	movs	r0, #150	; 0x96
 8000826:	f000 ffd1 	bl	80017cc <TajmerDelay>
			tactic_state++;
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <tactic_yellow_3+0x544>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	3301      	adds	r3, #1
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <tactic_yellow_3+0x544>)
 8000836:	701a      	strb	r2, [r3, #0]
		}
	case 12:
		sensors_case_timer = SENSOR_JJ;
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <tactic_yellow_3+0x548>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <tactic_yellow_3+0x54c>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d009      	beq.n	800085c <tactic_yellow_3+0x4f8>

			interrupted_func_left_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000848:	79ba      	ldrb	r2, [r7, #6]
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	4611      	mov	r1, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fca8 	bl	80011a4 <interrupted_func_left_forward_sideway>
			tactic_state = 12;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <tactic_yellow_3+0x544>)
 8000856:	220c      	movs	r2, #12
 8000858:	701a      	strb	r2, [r3, #0]
 800085a:	e017      	b.n	800088c <tactic_yellow_3+0x528>
		} else {
			ax_wheel_mode(AX_Pogonski);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fd0d 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000864:	2064      	movs	r0, #100	; 0x64
 8000866:	f000 ffb1 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fcaa 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000878:	2096      	movs	r0, #150	; 0x96
 800087a:	f000 ffa7 	bl	80017cc <TajmerDelay>
			tactic_state++;
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <tactic_yellow_3+0x544>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	3301      	adds	r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <tactic_yellow_3+0x544>)
 800088a:	701a      	strb	r2, [r3, #0]
		}
	case 13:
		ax_angle_move(AX_Pogonski, 0, 0);
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fc9a 	bl	80001cc <ax_angle_move>
		break;
 8000898:	e002      	b.n	80008a0 <tactic_yellow_3+0x53c>
	default:
		break;
 800089a:	bf00      	nop
 800089c:	e000      	b.n	80008a0 <tactic_yellow_3+0x53c>
		break;
 800089e:	bf00      	nop
	}
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000002c 	.word	0x2000002c
 80008ac:	20000034 	.word	0x20000034
 80008b0:	20000035 	.word	0x20000035

080008b4 <tactic_blue_3>:
	default:
		break;
	}
}

void tactic_blue_3(uint8_t AX_Pogonski, uint8_t AX_Zakretni) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	460a      	mov	r2, r1
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	4613      	mov	r3, r2
 80008c2:	71bb      	strb	r3, [r7, #6]
	switch (tactic_state) {
 80008c4:	4bba      	ldr	r3, [pc, #744]	; (8000bb0 <tactic_blue_3+0x2fc>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b0d      	cmp	r3, #13
 80008cc:	f200 82a9 	bhi.w	8000e22 <tactic_blue_3+0x56e>
 80008d0:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <tactic_blue_3+0x24>)
 80008d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d6:	bf00      	nop
 80008d8:	08000911 	.word	0x08000911
 80008dc:	08000931 	.word	0x08000931
 80008e0:	0800098b 	.word	0x0800098b
 80008e4:	080009db 	.word	0x080009db
 80008e8:	08000a2b 	.word	0x08000a2b
 80008ec:	08000a7b 	.word	0x08000a7b
 80008f0:	08000b83 	.word	0x08000b83
 80008f4:	08000bed 	.word	0x08000bed
 80008f8:	08000c49 	.word	0x08000c49
 80008fc:	08000ca5 	.word	0x08000ca5
 8000900:	08000d01 	.word	0x08000d01
 8000904:	08000d5d 	.word	0x08000d5d
 8000908:	08000db9 	.word	0x08000db9
 800090c:	08000e15 	.word	0x08000e15
	case 0:
		if (IO_cinc()) {
 8000910:	f000 feb0 	bl	8001674 <IO_cinc>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	f000 8285 	beq.w	8000e26 <tactic_blue_3+0x572>
			timer_start_sys_time();
 800091c:	f000 ff46 	bl	80017ac <timer_start_sys_time>
			tactic_state++;
 8000920:	4ba3      	ldr	r3, [pc, #652]	; (8000bb0 <tactic_blue_3+0x2fc>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	3301      	adds	r3, #1
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4ba1      	ldr	r3, [pc, #644]	; (8000bb0 <tactic_blue_3+0x2fc>)
 800092c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800092e:	e27a      	b.n	8000e26 <tactic_blue_3+0x572>

	case 1:
		TajmerDelay(200); //90000
 8000930:	20c8      	movs	r0, #200	; 0xc8
 8000932:	f000 ff4b 	bl	80017cc <TajmerDelay>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 8000936:	79bb      	ldrb	r3, [r7, #6]
 8000938:	22c8      	movs	r2, #200	; 0xc8
 800093a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fc44 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	22c8      	movs	r2, #200	; 0xc8
 8000948:	f240 11ff 	movw	r1, #511	; 0x1ff
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fc3d 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 8000952:	20c8      	movs	r0, #200	; 0xc8
 8000954:	f000 ff3a 	bl	80017cc <TajmerDelay>
		ax_wheel_mode(AX_Pogonski);
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fc8f 	bl	800027e <ax_wheel_mode>
		TajmerDelay(200);
 8000960:	20c8      	movs	r0, #200	; 0xc8
 8000962:	f000 ff33 	bl	80017cc <TajmerDelay>
		ax_angle_move(AX_Pogonski, 0, 1023);
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fc2c 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 8000974:	20c8      	movs	r0, #200	; 0xc8
 8000976:	f000 ff29 	bl	80017cc <TajmerDelay>

		tactic_state++;
 800097a:	4b8d      	ldr	r3, [pc, #564]	; (8000bb0 <tactic_blue_3+0x2fc>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	3301      	adds	r3, #1
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b8a      	ldr	r3, [pc, #552]	; (8000bb0 <tactic_blue_3+0x2fc>)
 8000986:	701a      	strb	r2, [r3, #0]
		break;
 8000988:	e24e      	b.n	8000e28 <tactic_blue_3+0x574>

	case 2:
		sensors_case_timer = SENSOR_JJ;
 800098a:	4b8a      	ldr	r3, [pc, #552]	; (8000bb4 <tactic_blue_3+0x300>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000990:	4b89      	ldr	r3, [pc, #548]	; (8000bb8 <tactic_blue_3+0x304>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d007      	beq.n	80009aa <tactic_blue_3+0xf6>

			interrupted_func_stop(AX_Pogonski);
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fa4d 	bl	8000e3c <interrupted_func_stop>
			tactic_state = 2;
 80009a2:	4b83      	ldr	r3, [pc, #524]	; (8000bb0 <tactic_blue_3+0x2fc>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	701a      	strb	r2, [r3, #0]
 80009a8:	e017      	b.n	80009da <tactic_blue_3+0x126>
		} else {
			ax_wheel_mode(AX_Pogonski);
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fc66 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80009b2:	2064      	movs	r0, #100	; 0x64
 80009b4:	f000 ff0a 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fc03 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 80009c6:	2096      	movs	r0, #150	; 0x96
 80009c8:	f000 ff00 	bl	80017cc <TajmerDelay>
			tactic_state++;
 80009cc:	4b78      	ldr	r3, [pc, #480]	; (8000bb0 <tactic_blue_3+0x2fc>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	3301      	adds	r3, #1
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b76      	ldr	r3, [pc, #472]	; (8000bb0 <tactic_blue_3+0x2fc>)
 80009d8:	701a      	strb	r2, [r3, #0]
		}
	case 3:
		sensors_case_timer = SENSOR_JJ;
 80009da:	4b76      	ldr	r3, [pc, #472]	; (8000bb4 <tactic_blue_3+0x300>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 80009e0:	4b75      	ldr	r3, [pc, #468]	; (8000bb8 <tactic_blue_3+0x304>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d007      	beq.n	80009fa <tactic_blue_3+0x146>

			interrupted_func_stop(AX_Pogonski);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fa25 	bl	8000e3c <interrupted_func_stop>
			tactic_state = 3;
 80009f2:	4b6f      	ldr	r3, [pc, #444]	; (8000bb0 <tactic_blue_3+0x2fc>)
 80009f4:	2203      	movs	r2, #3
 80009f6:	701a      	strb	r2, [r3, #0]
 80009f8:	e017      	b.n	8000a2a <tactic_blue_3+0x176>
		} else {
			ax_wheel_mode(AX_Pogonski);
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fc3e 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000a02:	2064      	movs	r0, #100	; 0x64
 8000a04:	f000 fee2 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fbdb 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000a16:	2096      	movs	r0, #150	; 0x96
 8000a18:	f000 fed8 	bl	80017cc <TajmerDelay>
			tactic_state++;
 8000a1c:	4b64      	ldr	r3, [pc, #400]	; (8000bb0 <tactic_blue_3+0x2fc>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	3301      	adds	r3, #1
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b62      	ldr	r3, [pc, #392]	; (8000bb0 <tactic_blue_3+0x2fc>)
 8000a28:	701a      	strb	r2, [r3, #0]
		}
	case 4:
		sensors_case_timer = SENSOR_JJ;
 8000a2a:	4b62      	ldr	r3, [pc, #392]	; (8000bb4 <tactic_blue_3+0x300>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000a30:	4b61      	ldr	r3, [pc, #388]	; (8000bb8 <tactic_blue_3+0x304>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d007      	beq.n	8000a4a <tactic_blue_3+0x196>

			interrupted_func_stop(AX_Pogonski);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 f9fd 	bl	8000e3c <interrupted_func_stop>
			tactic_state = 4;
 8000a42:	4b5b      	ldr	r3, [pc, #364]	; (8000bb0 <tactic_blue_3+0x2fc>)
 8000a44:	2204      	movs	r2, #4
 8000a46:	701a      	strb	r2, [r3, #0]
 8000a48:	e017      	b.n	8000a7a <tactic_blue_3+0x1c6>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fc16 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000a52:	2064      	movs	r0, #100	; 0x64
 8000a54:	f000 feba 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fbb3 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000a66:	2096      	movs	r0, #150	; 0x96
 8000a68:	f000 feb0 	bl	80017cc <TajmerDelay>
			tactic_state++;
 8000a6c:	4b50      	ldr	r3, [pc, #320]	; (8000bb0 <tactic_blue_3+0x2fc>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	3301      	adds	r3, #1
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <tactic_blue_3+0x2fc>)
 8000a78:	701a      	strb	r2, [r3, #0]
		}
	case 5:
		sensors_case_timer = SENSOR_JJ;
 8000a7a:	4b4e      	ldr	r3, [pc, #312]	; (8000bb4 <tactic_blue_3+0x300>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000a80:	4b4d      	ldr	r3, [pc, #308]	; (8000bb8 <tactic_blue_3+0x304>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d007      	beq.n	8000a9a <tactic_blue_3+0x1e6>

			interrupted_func_stop(AX_Pogonski);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f9d5 	bl	8000e3c <interrupted_func_stop>
			tactic_state = 5;
 8000a92:	4b47      	ldr	r3, [pc, #284]	; (8000bb0 <tactic_blue_3+0x2fc>)
 8000a94:	2205      	movs	r2, #5
 8000a96:	701a      	strb	r2, [r3, #0]
 8000a98:	e073      	b.n	8000b82 <tactic_blue_3+0x2ce>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fbee 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000aa2:	2064      	movs	r0, #100	; 0x64
 8000aa4:	f000 fe92 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fb8b 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fb84 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fb7d 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fb76 	bl	80001cc <ax_angle_move>
			TajmerDelay(200);
 8000ae0:	20c8      	movs	r0, #200	; 0xc8
 8000ae2:	f000 fe73 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Zakretni, LEVO, 1000);
 8000ae6:	79bb      	ldrb	r3, [r7, #6]
 8000ae8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aec:	f240 218b 	movw	r1, #651	; 0x28b
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fb6b 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, LEVO, 1000);
 8000af6:	79bb      	ldrb	r3, [r7, #6]
 8000af8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000afc:	f240 218b 	movw	r1, #651	; 0x28b
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fb63 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, LEVO, 1000);
 8000b06:	79bb      	ldrb	r3, [r7, #6]
 8000b08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b0c:	f240 218b 	movw	r1, #651	; 0x28b
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fb5b 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, LEVO, 1000);
 8000b16:	79bb      	ldrb	r3, [r7, #6]
 8000b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b1c:	f240 218b 	movw	r1, #651	; 0x28b
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fb53 	bl	80001cc <ax_angle_move>
			TajmerDelay(400);
 8000b26:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b2a:	f000 fe4f 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000b2e:	79bb      	ldrb	r3, [r7, #6]
 8000b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fb47 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000b3e:	79bb      	ldrb	r3, [r7, #6]
 8000b40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fb3f 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000b4e:	79bb      	ldrb	r3, [r7, #6]
 8000b50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fb37 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000b5e:	79bb      	ldrb	r3, [r7, #6]
 8000b60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fb2f 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000b6e:	2096      	movs	r0, #150	; 0x96
 8000b70:	f000 fe2c 	bl	80017cc <TajmerDelay>
			tactic_state++;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <tactic_blue_3+0x2fc>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <tactic_blue_3+0x2fc>)
 8000b80:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		sensors_case_timer = SENSOR_JJ;
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <tactic_blue_3+0x300>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <tactic_blue_3+0x304>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d014      	beq.n	8000bbc <tactic_blue_3+0x308>

			interrupted_func_right_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000b92:	79ba      	ldrb	r2, [r7, #6]
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f9d0 	bl	8000f3e <interrupted_func_right_forward_sideway>
			tactic_state += 5;
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <tactic_blue_3+0x2fc>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	3305      	adds	r3, #5
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	4b01      	ldr	r3, [pc, #4]	; (8000bb0 <tactic_blue_3+0x2fc>)
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e01e      	b.n	8000bec <tactic_blue_3+0x338>
 8000bae:	bf00      	nop
 8000bb0:	2000002c 	.word	0x2000002c
 8000bb4:	20000034 	.word	0x20000034
 8000bb8:	20000035 	.word	0x20000035
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fb5d 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000bc4:	2064      	movs	r0, #100	; 0x64
 8000bc6:	f000 fe01 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fafa 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000bd8:	2096      	movs	r0, #150	; 0x96
 8000bda:	f000 fdf7 	bl	80017cc <TajmerDelay>
			tactic_state++;
 8000bde:	4b94      	ldr	r3, [pc, #592]	; (8000e30 <tactic_blue_3+0x57c>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	3301      	adds	r3, #1
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	4b91      	ldr	r3, [pc, #580]	; (8000e30 <tactic_blue_3+0x57c>)
 8000bea:	701a      	strb	r2, [r3, #0]
		}
	case 7:
		sensors_case_timer = SENSOR_JJ;
 8000bec:	4b91      	ldr	r3, [pc, #580]	; (8000e34 <tactic_blue_3+0x580>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000bf2:	4b91      	ldr	r3, [pc, #580]	; (8000e38 <tactic_blue_3+0x584>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d00d      	beq.n	8000c18 <tactic_blue_3+0x364>

			interrupted_func_right_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000bfc:	79ba      	ldrb	r2, [r7, #6]
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f99b 	bl	8000f3e <interrupted_func_right_forward_sideway>
			tactic_state += 4;
 8000c08:	4b89      	ldr	r3, [pc, #548]	; (8000e30 <tactic_blue_3+0x57c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	3304      	adds	r3, #4
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b87      	ldr	r3, [pc, #540]	; (8000e30 <tactic_blue_3+0x57c>)
 8000c14:	701a      	strb	r2, [r3, #0]
 8000c16:	e017      	b.n	8000c48 <tactic_blue_3+0x394>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fb2f 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000c20:	2064      	movs	r0, #100	; 0x64
 8000c22:	f000 fdd3 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff facc 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000c34:	2096      	movs	r0, #150	; 0x96
 8000c36:	f000 fdc9 	bl	80017cc <TajmerDelay>
			tactic_state++;
 8000c3a:	4b7d      	ldr	r3, [pc, #500]	; (8000e30 <tactic_blue_3+0x57c>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	3301      	adds	r3, #1
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b7a      	ldr	r3, [pc, #488]	; (8000e30 <tactic_blue_3+0x57c>)
 8000c46:	701a      	strb	r2, [r3, #0]
		}
	case 8:
		sensors_case_timer = SENSOR_JJ;
 8000c48:	4b7a      	ldr	r3, [pc, #488]	; (8000e34 <tactic_blue_3+0x580>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000c4e:	4b7a      	ldr	r3, [pc, #488]	; (8000e38 <tactic_blue_3+0x584>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00d      	beq.n	8000c74 <tactic_blue_3+0x3c0>

			interrupted_func_right_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000c58:	79ba      	ldrb	r2, [r7, #6]
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f96d 	bl	8000f3e <interrupted_func_right_forward_sideway>
			tactic_state += 3;
 8000c64:	4b72      	ldr	r3, [pc, #456]	; (8000e30 <tactic_blue_3+0x57c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	3303      	adds	r3, #3
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b70      	ldr	r3, [pc, #448]	; (8000e30 <tactic_blue_3+0x57c>)
 8000c70:	701a      	strb	r2, [r3, #0]
 8000c72:	e017      	b.n	8000ca4 <tactic_blue_3+0x3f0>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fb01 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000c7c:	2064      	movs	r0, #100	; 0x64
 8000c7e:	f000 fda5 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fa9e 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000c90:	2096      	movs	r0, #150	; 0x96
 8000c92:	f000 fd9b 	bl	80017cc <TajmerDelay>
			tactic_state++;
 8000c96:	4b66      	ldr	r3, [pc, #408]	; (8000e30 <tactic_blue_3+0x57c>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	4b63      	ldr	r3, [pc, #396]	; (8000e30 <tactic_blue_3+0x57c>)
 8000ca2:	701a      	strb	r2, [r3, #0]
		}
	case 9:
		sensors_case_timer = SENSOR_JJ;
 8000ca4:	4b63      	ldr	r3, [pc, #396]	; (8000e34 <tactic_blue_3+0x580>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000caa:	4b63      	ldr	r3, [pc, #396]	; (8000e38 <tactic_blue_3+0x584>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d00d      	beq.n	8000cd0 <tactic_blue_3+0x41c>

			interrupted_func_right_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000cb4:	79ba      	ldrb	r2, [r7, #6]
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f93f 	bl	8000f3e <interrupted_func_right_forward_sideway>
			tactic_state += 2;
 8000cc0:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <tactic_blue_3+0x57c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b59      	ldr	r3, [pc, #356]	; (8000e30 <tactic_blue_3+0x57c>)
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e017      	b.n	8000d00 <tactic_blue_3+0x44c>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fad3 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000cd8:	2064      	movs	r0, #100	; 0x64
 8000cda:	f000 fd77 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fa70 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000cec:	2096      	movs	r0, #150	; 0x96
 8000cee:	f000 fd6d 	bl	80017cc <TajmerDelay>
			tactic_state++;
 8000cf2:	4b4f      	ldr	r3, [pc, #316]	; (8000e30 <tactic_blue_3+0x57c>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b4c      	ldr	r3, [pc, #304]	; (8000e30 <tactic_blue_3+0x57c>)
 8000cfe:	701a      	strb	r2, [r3, #0]
		}
	case 10:
		sensors_case_timer = SENSOR_JJ;
 8000d00:	4b4c      	ldr	r3, [pc, #304]	; (8000e34 <tactic_blue_3+0x580>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000d06:	4b4c      	ldr	r3, [pc, #304]	; (8000e38 <tactic_blue_3+0x584>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d00d      	beq.n	8000d2c <tactic_blue_3+0x478>

			interrupted_func_right_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000d10:	79ba      	ldrb	r2, [r7, #6]
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f911 	bl	8000f3e <interrupted_func_right_forward_sideway>
			tactic_state++;
 8000d1c:	4b44      	ldr	r3, [pc, #272]	; (8000e30 <tactic_blue_3+0x57c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	3301      	adds	r3, #1
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b42      	ldr	r3, [pc, #264]	; (8000e30 <tactic_blue_3+0x57c>)
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e017      	b.n	8000d5c <tactic_blue_3+0x4a8>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff faa5 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000d34:	2064      	movs	r0, #100	; 0x64
 8000d36:	f000 fd49 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fa42 	bl	80001cc <ax_angle_move>

			TajmerDelay(250);
 8000d48:	20fa      	movs	r0, #250	; 0xfa
 8000d4a:	f000 fd3f 	bl	80017cc <TajmerDelay>
			tactic_state++;
 8000d4e:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <tactic_blue_3+0x57c>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	3301      	adds	r3, #1
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <tactic_blue_3+0x57c>)
 8000d5a:	701a      	strb	r2, [r3, #0]
		}
	case 11:
		sensors_case_timer = SENSOR_JJ;
 8000d5c:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <tactic_blue_3+0x580>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000d62:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <tactic_blue_3+0x584>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00d      	beq.n	8000d88 <tactic_blue_3+0x4d4>

			interrupted_func_right_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000d6c:	79ba      	ldrb	r2, [r7, #6]
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f8e3 	bl	8000f3e <interrupted_func_right_forward_sideway>
			tactic_state++;
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <tactic_blue_3+0x57c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	3301      	adds	r3, #1
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <tactic_blue_3+0x57c>)
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	e017      	b.n	8000db8 <tactic_blue_3+0x504>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fa77 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000d90:	2064      	movs	r0, #100	; 0x64
 8000d92:	f000 fd1b 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fa14 	bl	80001cc <ax_angle_move>

			TajmerDelay(250);
 8000da4:	20fa      	movs	r0, #250	; 0xfa
 8000da6:	f000 fd11 	bl	80017cc <TajmerDelay>
			tactic_state++;
 8000daa:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <tactic_blue_3+0x57c>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	3301      	adds	r3, #1
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <tactic_blue_3+0x57c>)
 8000db6:	701a      	strb	r2, [r3, #0]
		}
	case 12:
		sensors_case_timer = SENSOR_JJ;
 8000db8:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <tactic_blue_3+0x580>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <tactic_blue_3+0x584>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d00d      	beq.n	8000de4 <tactic_blue_3+0x530>

			interrupted_func_right_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000dc8:	79ba      	ldrb	r2, [r7, #6]
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f8b5 	bl	8000f3e <interrupted_func_right_forward_sideway>
			tactic_state++;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <tactic_blue_3+0x57c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <tactic_blue_3+0x57c>)
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e017      	b.n	8000e14 <tactic_blue_3+0x560>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fa49 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000dec:	2064      	movs	r0, #100	; 0x64
 8000dee:	f000 fced 	bl	80017cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff f9e6 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000e00:	2096      	movs	r0, #150	; 0x96
 8000e02:	f000 fce3 	bl	80017cc <TajmerDelay>
			tactic_state++;
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <tactic_blue_3+0x57c>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <tactic_blue_3+0x57c>)
 8000e12:	701a      	strb	r2, [r3, #0]
		}
	case 13:
		ax_angle_move(AX_Pogonski, 0, 0);
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff f9d6 	bl	80001cc <ax_angle_move>
		break;
 8000e20:	e002      	b.n	8000e28 <tactic_blue_3+0x574>
	default:
		break;
 8000e22:	bf00      	nop
 8000e24:	e000      	b.n	8000e28 <tactic_blue_3+0x574>
		break;
 8000e26:	bf00      	nop
	}
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	2000002c 	.word	0x2000002c
 8000e34:	20000034 	.word	0x20000034
 8000e38:	20000035 	.word	0x20000035

08000e3c <interrupted_func_stop>:

static void interrupted_func_stop(uint8_t AX_Pogonski) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
	TajmerDelay(100);
 8000e46:	2064      	movs	r0, #100	; 0x64
 8000e48:	f000 fcc0 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Pogonski, 0, 767);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff f9b9 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 767);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff f9b2 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 767);
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff f9ab 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 767);
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff f9a4 	bl	80001cc <ax_angle_move>
	TajmerDelay(100);
 8000e84:	2064      	movs	r0, #100	; 0x64
 8000e86:	f000 fca1 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Pogonski, 0, 511);
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff f99a 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 511);
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff f993 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 511);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff f98c 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 511);
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff f985 	bl	80001cc <ax_angle_move>
	TajmerDelay(100);
 8000ec2:	2064      	movs	r0, #100	; 0x64
 8000ec4:	f000 fc82 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Pogonski, 0, 255);
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	22ff      	movs	r2, #255	; 0xff
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff f97c 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 255);
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	22ff      	movs	r2, #255	; 0xff
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff f976 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 255);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	22ff      	movs	r2, #255	; 0xff
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff f970 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 255);
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	22ff      	movs	r2, #255	; 0xff
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff f96a 	bl	80001cc <ax_angle_move>
	TajmerDelay(100);
 8000ef8:	2064      	movs	r0, #100	; 0x64
 8000efa:	f000 fc67 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Pogonski, 0, 0);
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff f961 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 0);
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff f95b 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 0);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff f955 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 0);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff f94f 	bl	80001cc <ax_angle_move>
	TajmerDelay(300);
 8000f2e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f32:	f000 fc4b 	bl	80017cc <TajmerDelay>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <interrupted_func_right_forward_sideway>:

static void interrupted_func_right_forward_sideway(uint8_t AX_Pogonski,
		uint8_t AX_Zakretni) {
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	460a      	mov	r2, r1
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	71bb      	strb	r3, [r7, #6]

	ax_angle_move(AX_Pogonski, 0, 767);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff f938 	bl	80001cc <ax_angle_move>
	TajmerDelay(200);
 8000f5c:	20c8      	movs	r0, #200	; 0xc8
 8000f5e:	f000 fc35 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f68:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff f92d 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f78:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff f925 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f88:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f91d 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f98:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f915 	bl	80001cc <ax_angle_move>
	TajmerDelay(300);
 8000fa2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fa6:	f000 fc11 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff f909 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000fba:	79bb      	ldrb	r3, [r7, #6]
 8000fbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff f901 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f8f9 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fe0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff f8f1 	bl	80001cc <ax_angle_move>
	TajmerDelay(200);
 8000fea:	20c8      	movs	r0, #200	; 0xc8
 8000fec:	f000 fbee 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ff6:	f240 218b 	movw	r1, #651	; 0x28b
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff f8e6 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001006:	f240 218b 	movw	r1, #651	; 0x28b
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff f8de 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001016:	f240 218b 	movw	r1, #651	; 0x28b
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff f8d6 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001026:	f240 218b 	movw	r1, #651	; 0x28b
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff f8ce 	bl	80001cc <ax_angle_move>
	TajmerDelay(300);
 8001030:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001034:	f000 fbca 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800103e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f8c2 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800104e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff f8ba 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800105e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f8b2 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800106e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff f8aa 	bl	80001cc <ax_angle_move>
	TajmerDelay(750);
 8001078:	f240 20ee 	movw	r0, #750	; 0x2ee
 800107c:	f000 fba6 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001086:	f240 218b 	movw	r1, #651	; 0x28b
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f89e 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001096:	f240 218b 	movw	r1, #651	; 0x28b
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f896 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a6:	f240 218b 	movw	r1, #651	; 0x28b
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff f88e 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010b6:	f240 218b 	movw	r1, #651	; 0x28b
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f886 	bl	80001cc <ax_angle_move>
	TajmerDelay(300);
 80010c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010c4:	f000 fb82 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f87a 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f872 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f86a 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f862 	bl	80001cc <ax_angle_move>
	TajmerDelay(200);
 8001108:	20c8      	movs	r0, #200	; 0xc8
 800110a:	f000 fb5f 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 800110e:	79bb      	ldrb	r3, [r7, #6]
 8001110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001114:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f857 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001124:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f84f 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 800112e:	79bb      	ldrb	r3, [r7, #6]
 8001130:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001134:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f847 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001144:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f83f 	bl	80001cc <ax_angle_move>
	TajmerDelay(300);
 800114e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001152:	f000 fb3b 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800115c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f833 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800116c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f82b 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800117c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f823 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800118c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f81b 	bl	80001cc <ax_angle_move>
	TajmerDelay(200);
 8001196:	20c8      	movs	r0, #200	; 0xc8
 8001198:	f000 fb18 	bl	80017cc <TajmerDelay>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <interrupted_func_left_forward_sideway>:
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
	TajmerDelay(500);
}

static void interrupted_func_left_forward_sideway(uint8_t AX_Pogonski,
		uint8_t AX_Zakretni) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	460a      	mov	r2, r1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	4613      	mov	r3, r2
 80011b2:	71bb      	strb	r3, [r7, #6]
	ax_angle_move(AX_Pogonski, 0, 767);
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f240 22ff 	movw	r2, #767	; 0x2ff
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f805 	bl	80001cc <ax_angle_move>
	TajmerDelay(200);
 80011c2:	20c8      	movs	r0, #200	; 0xc8
 80011c4:	f000 fb02 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ce:	f240 218b 	movw	r1, #651	; 0x28b
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7fe fffa 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011de:	f240 218b 	movw	r1, #651	; 0x28b
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7fe fff2 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ee:	f240 218b 	movw	r1, #651	; 0x28b
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7fe ffea 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011fe:	f240 218b 	movw	r1, #651	; 0x28b
 8001202:	4618      	mov	r0, r3
 8001204:	f7fe ffe2 	bl	80001cc <ax_angle_move>
	TajmerDelay(250);
 8001208:	20fa      	movs	r0, #250	; 0xfa
 800120a:	f000 fadf 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 800120e:	79bb      	ldrb	r3, [r7, #6]
 8001210:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001214:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ffd7 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 800121e:	79bb      	ldrb	r3, [r7, #6]
 8001220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001224:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001228:	4618      	mov	r0, r3
 800122a:	f7fe ffcf 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 800122e:	79bb      	ldrb	r3, [r7, #6]
 8001230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001234:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001238:	4618      	mov	r0, r3
 800123a:	f7fe ffc7 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001244:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ffbf 	bl	80001cc <ax_angle_move>
	TajmerDelay(400);
 800124e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001252:	f000 fabb 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001256:	79bb      	ldrb	r3, [r7, #6]
 8001258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800125c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001260:	4618      	mov	r0, r3
 8001262:	f7fe ffb3 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800126c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001270:	4618      	mov	r0, r3
 8001272:	f7fe ffab 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800127c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001280:	4618      	mov	r0, r3
 8001282:	f7fe ffa3 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800128c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe ff9b 	bl	80001cc <ax_angle_move>
	TajmerDelay(250);
 8001296:	20fa      	movs	r0, #250	; 0xfa
 8001298:	f000 fa98 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7fe ff90 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7fe ff88 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7fe ff80 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80012cc:	79bb      	ldrb	r3, [r7, #6]
 80012ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7fe ff78 	bl	80001cc <ax_angle_move>
	TajmerDelay(1000);
 80012dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e0:	f000 fa74 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 80012e4:	79bb      	ldrb	r3, [r7, #6]
 80012e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ea:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7fe ff6c 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012fa:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80012fe:	4618      	mov	r0, r3
 8001300:	f7fe ff64 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001304:	79bb      	ldrb	r3, [r7, #6]
 8001306:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800130a:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ff5c 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800131a:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800131e:	4618      	mov	r0, r3
 8001320:	f7fe ff54 	bl	80001cc <ax_angle_move>
	TajmerDelay(250);
 8001324:	20fa      	movs	r0, #250	; 0xfa
 8001326:	f000 fa51 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001330:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001334:	4618      	mov	r0, r3
 8001336:	f7fe ff49 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 800133a:	79bb      	ldrb	r3, [r7, #6]
 800133c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001340:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001344:	4618      	mov	r0, r3
 8001346:	f7fe ff41 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001350:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001354:	4618      	mov	r0, r3
 8001356:	f7fe ff39 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001360:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001364:	4618      	mov	r0, r3
 8001366:	f7fe ff31 	bl	80001cc <ax_angle_move>
	TajmerDelay(1200);
 800136a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800136e:	f000 fa2d 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001378:	f240 218b 	movw	r1, #651	; 0x28b
 800137c:	4618      	mov	r0, r3
 800137e:	f7fe ff25 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001388:	f240 218b 	movw	r1, #651	; 0x28b
 800138c:	4618      	mov	r0, r3
 800138e:	f7fe ff1d 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 8001392:	79bb      	ldrb	r3, [r7, #6]
 8001394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001398:	f240 218b 	movw	r1, #651	; 0x28b
 800139c:	4618      	mov	r0, r3
 800139e:	f7fe ff15 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 80013a2:	79bb      	ldrb	r3, [r7, #6]
 80013a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013a8:	f240 218b 	movw	r1, #651	; 0x28b
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7fe ff0d 	bl	80001cc <ax_angle_move>
	TajmerDelay(250);
 80013b2:	20fa      	movs	r0, #250	; 0xfa
 80013b4:	f000 fa0a 	bl	80017cc <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80013b8:	79bb      	ldrb	r3, [r7, #6]
 80013ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7fe ff02 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7fe fefa 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80013d8:	79bb      	ldrb	r3, [r7, #6]
 80013da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7fe fef2 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe feea 	bl	80001cc <ax_angle_move>
	TajmerDelay(200);
 80013f8:	20c8      	movs	r0, #200	; 0xc8
 80013fa:	f000 f9e7 	bl	80017cc <TajmerDelay>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <io>:
static void
portA_init();

void
io ()
 {
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0
	portC_init();
 800140a:	f000 f807 	bl	800141c <portC_init>
	portB_init();
 800140e:	f000 f815 	bl	800143c <portB_init>
	portA_init();
 8001412:	f000 f843 	bl	800149c <portA_init>
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <portC_init>:

static void
portC_init()
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (0b1 << 2);
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <portC_init+0x1c>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <portC_init+0x1c>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000

0800143c <portB_init>:

static void
portB_init()
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (0b1 << 1);
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <portB_init+0x58>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <portB_init+0x58>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB->MODER &= ~(0b11 << 2 * 3);
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <portB_init+0x5c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a11      	ldr	r2, [pc, #68]	; (8001498 <portB_init+0x5c>)
 8001452:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001456:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << 2 * 3);
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <portB_init+0x5c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <portB_init+0x5c>)
 800145e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001462:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(0b1 << 3);
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <portB_init+0x5c>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <portB_init+0x5c>)
 800146a:	f023 0308 	bic.w	r3, r3, #8
 800146e:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (0b11 << 2 * 3);
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <portB_init+0x5c>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a08      	ldr	r2, [pc, #32]	; (8001498 <portB_init+0x5c>)
 8001476:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800147a:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~(0b11 << 2 * 3);
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <portB_init+0x5c>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	4a05      	ldr	r2, [pc, #20]	; (8001498 <portB_init+0x5c>)
 8001482:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	48000400 	.word	0x48000400

0800149c <portA_init>:

static void
portA_init()
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (0b1 << 0);
 80014a0:	4b73      	ldr	r3, [pc, #460]	; (8001670 <portA_init+0x1d4>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a4:	4a72      	ldr	r2, [pc, #456]	; (8001670 <portA_init+0x1d4>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOA->MODER &= ~(0b11 << 2 * CINC);
 80014ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2207      	movs	r2, #7
 80014b4:	0052      	lsls	r2, r2, #1
 80014b6:	2103      	movs	r1, #3
 80014b8:	fa01 f202 	lsl.w	r2, r1, r2
 80014bc:	43d2      	mvns	r2, r2
 80014be:	4611      	mov	r1, r2
 80014c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014c4:	400b      	ands	r3, r1
 80014c6:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * CINC); //low speed
 80014c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2207      	movs	r2, #7
 80014d0:	0052      	lsls	r2, r2, #1
 80014d2:	2103      	movs	r1, #3
 80014d4:	fa01 f202 	lsl.w	r2, r1, r2
 80014d8:	43d2      	mvns	r2, r2
 80014da:	4611      	mov	r1, r2
 80014dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014e0:	400b      	ands	r3, r1
 80014e2:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 *CINC);
 80014e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2207      	movs	r2, #7
 80014ec:	0052      	lsls	r2, r2, #1
 80014ee:	2103      	movs	r1, #3
 80014f0:	fa01 f202 	lsl.w	r2, r1, r2
 80014f4:	43d2      	mvns	r2, r2
 80014f6:	4611      	mov	r1, r2
 80014f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014fc:	400b      	ands	r3, r1
 80014fe:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2*CINC);
 8001500:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2207      	movs	r2, #7
 8001508:	0052      	lsls	r2, r2, #1
 800150a:	2102      	movs	r1, #2
 800150c:	fa01 f202 	lsl.w	r2, r1, r2
 8001510:	4611      	mov	r1, r2
 8001512:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001516:	430b      	orrs	r3, r1
 8001518:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_2);
 800151a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2209      	movs	r2, #9
 8001522:	0052      	lsls	r2, r2, #1
 8001524:	2103      	movs	r1, #3
 8001526:	fa01 f202 	lsl.w	r2, r1, r2
 800152a:	43d2      	mvns	r2, r2
 800152c:	4611      	mov	r1, r2
 800152e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001532:	400b      	ands	r3, r1
 8001534:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_2); //low speed
 8001536:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2209      	movs	r2, #9
 800153e:	0052      	lsls	r2, r2, #1
 8001540:	2103      	movs	r1, #3
 8001542:	fa01 f202 	lsl.w	r2, r1, r2
 8001546:	43d2      	mvns	r2, r2
 8001548:	4611      	mov	r1, r2
 800154a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800154e:	400b      	ands	r3, r1
 8001550:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_2);
 8001552:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2209      	movs	r2, #9
 800155a:	0052      	lsls	r2, r2, #1
 800155c:	2103      	movs	r1, #3
 800155e:	fa01 f202 	lsl.w	r2, r1, r2
 8001562:	43d2      	mvns	r2, r2
 8001564:	4611      	mov	r1, r2
 8001566:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800156a:	400b      	ands	r3, r1
 800156c:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2 * PREKIDAC_TAKTIKE_2);
 800156e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2209      	movs	r2, #9
 8001576:	0052      	lsls	r2, r2, #1
 8001578:	2102      	movs	r1, #2
 800157a:	fa01 f202 	lsl.w	r2, r1, r2
 800157e:	4611      	mov	r1, r2
 8001580:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001584:	430b      	orrs	r3, r1
 8001586:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_3);
 8001588:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	220a      	movs	r2, #10
 8001590:	0052      	lsls	r2, r2, #1
 8001592:	2103      	movs	r1, #3
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	43d2      	mvns	r2, r2
 800159a:	4611      	mov	r1, r2
 800159c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015a0:	400b      	ands	r3, r1
 80015a2:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_3); //low speed
 80015a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	220a      	movs	r2, #10
 80015ac:	0052      	lsls	r2, r2, #1
 80015ae:	2103      	movs	r1, #3
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	43d2      	mvns	r2, r2
 80015b6:	4611      	mov	r1, r2
 80015b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015bc:	400b      	ands	r3, r1
 80015be:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_3);
 80015c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	220a      	movs	r2, #10
 80015c8:	0052      	lsls	r2, r2, #1
 80015ca:	2103      	movs	r1, #3
 80015cc:	fa01 f202 	lsl.w	r2, r1, r2
 80015d0:	43d2      	mvns	r2, r2
 80015d2:	4611      	mov	r1, r2
 80015d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015d8:	400b      	ands	r3, r1
 80015da:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2 * PREKIDAC_TAKTIKE_3);
 80015dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	220a      	movs	r2, #10
 80015e4:	0052      	lsls	r2, r2, #1
 80015e6:	2102      	movs	r1, #2
 80015e8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ec:	4611      	mov	r1, r2
 80015ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015f2:	430b      	orrs	r3, r1
 80015f4:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_4);
 80015f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	220b      	movs	r2, #11
 80015fe:	0052      	lsls	r2, r2, #1
 8001600:	2103      	movs	r1, #3
 8001602:	fa01 f202 	lsl.w	r2, r1, r2
 8001606:	43d2      	mvns	r2, r2
 8001608:	4611      	mov	r1, r2
 800160a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800160e:	400b      	ands	r3, r1
 8001610:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_4); //low speed
 8001612:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	220b      	movs	r2, #11
 800161a:	0052      	lsls	r2, r2, #1
 800161c:	2103      	movs	r1, #3
 800161e:	fa01 f202 	lsl.w	r2, r1, r2
 8001622:	43d2      	mvns	r2, r2
 8001624:	4611      	mov	r1, r2
 8001626:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800162a:	400b      	ands	r3, r1
 800162c:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_4);
 800162e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	220b      	movs	r2, #11
 8001636:	0052      	lsls	r2, r2, #1
 8001638:	2103      	movs	r1, #3
 800163a:	fa01 f202 	lsl.w	r2, r1, r2
 800163e:	43d2      	mvns	r2, r2
 8001640:	4611      	mov	r1, r2
 8001642:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001646:	400b      	ands	r3, r1
 8001648:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2*PREKIDAC_TAKTIKE_4);
 800164a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	220b      	movs	r2, #11
 8001652:	0052      	lsls	r2, r2, #1
 8001654:	2102      	movs	r1, #2
 8001656:	fa01 f202 	lsl.w	r2, r1, r2
 800165a:	4611      	mov	r1, r2
 800165c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001660:	430b      	orrs	r3, r1
 8001662:	60d3      	str	r3, [r2, #12]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000

08001674 <IO_cinc>:

}

bool
IO_cinc()
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
	if(!(GPIOA->IDR & (0b1 << CINC)))
 8001678:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	2207      	movs	r2, #7
 8001680:	4611      	mov	r1, r2
 8001682:	2201      	movs	r2, #1
 8001684:	408a      	lsls	r2, r1
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d107      	bne.n	800169c <IO_cinc+0x28>
		counter++;
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <IO_cinc+0x48>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	3301      	adds	r3, #1
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <IO_cinc+0x48>)
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e002      	b.n	80016a2 <IO_cinc+0x2e>
	else
		counter=0;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <IO_cinc+0x48>)
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
	if(counter)
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <IO_cinc+0x48>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <IO_cinc+0x3c>
		return true;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <IO_cinc+0x3e>
	return false;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	2000002d 	.word	0x2000002d

080016c0 <Taktika_SIMA_TRECI_3>:
			tactic_yellow_2(ID_SIMA2_POGONSKI, ID_SIMA2_ZAKRETNI);
}

void
Taktika_SIMA_TRECI_3()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	if(!(GPIOA->IDR & (0b1 << PREKIDAC_TAKTIKE_3)))
 80016c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	220a      	movs	r2, #10
 80016cc:	4611      	mov	r1, r2
 80016ce:	2201      	movs	r2, #1
 80016d0:	408a      	lsls	r2, r1
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d104      	bne.n	80016e2 <Taktika_SIMA_TRECI_3+0x22>
          tactic_blue_3(ID_SIMA3_POGONSKI, ID_SIMA3_ZAKRETNI);
 80016d8:	2108      	movs	r1, #8
 80016da:	200b      	movs	r0, #11
 80016dc:	f7ff f8ea 	bl	80008b4 <tactic_blue_3>
		else
           tactic_yellow_3(ID_SIMA3_POGONSKI, ID_SIMA3_ZAKRETNI);
}
 80016e0:	e003      	b.n	80016ea <Taktika_SIMA_TRECI_3+0x2a>
           tactic_yellow_3(ID_SIMA3_POGONSKI, ID_SIMA3_ZAKRETNI);
 80016e2:	2108      	movs	r1, #8
 80016e4:	200b      	movs	r0, #11
 80016e6:	f7fe fe3d 	bl	8000364 <tactic_yellow_3>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}

080016ee <tajmer_init>:
volatile bool interrupted = false;


void
tajmer_init()
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
 tim2_init();
 80016f2:	f000 f803 	bl	80016fc <tim2_init>
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <tim2_init>:

static void
tim2_init()
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= (0b1 << 0);
 8001702:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <tim2_init+0xa8>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001706:	4a27      	ldr	r2, [pc, #156]	; (80017a4 <tim2_init+0xa8>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6593      	str	r3, [r2, #88]	; 0x58

	TIM2-> PSC = 80-1; //80MHz -> 1MHz
 800170e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001712:	224f      	movs	r2, #79	; 0x4f
 8001714:	629a      	str	r2, [r3, #40]	; 0x28

	TIM2-> ARR = 1000-1; //1MHz -> 1kHz
 8001716:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800171a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 &= ~((0b1 << 1) || (0b1 << 2));
 8001720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= (0b1 << 0);
 8001730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6153      	str	r3, [r2, #20]

	TIM2->DIER |= (0b1 << 0);
 8001740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	60d3      	str	r3, [r2, #12]

	while (!(TIM2->SR & (0b1 << 0)));
 8001750:	bf00      	nop
 8001752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f8      	beq.n	8001752 <tim2_init+0x56>

	TIM2->SR &= ~(0b1 << 0);
 8001760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= (0b1 << 2);
 8001770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	6013      	str	r3, [r2, #0]

	uint8_t const TIM2_PREKID = 28;
 8001780:	231c      	movs	r3, #28
 8001782:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[0] |= (0b1 << TIM2_PREKID);
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <tim2_init+0xac>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	79fa      	ldrb	r2, [r7, #7]
 800178a:	2101      	movs	r1, #1
 800178c:	fa01 f202 	lsl.w	r2, r1, r2
 8001790:	4611      	mov	r1, r2
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <tim2_init+0xac>)
 8001794:	430b      	orrs	r3, r1
 8001796:	6013      	str	r3, [r2, #0]

	//TIM2->CR1 |= (0b1 << 0);
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40021000 	.word	0x40021000
 80017a8:	e000e100 	.word	0xe000e100

080017ac <timer_start_sys_time>:

void
timer_start_sys_time ()
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  TIM2->CR1 |= (0b1 << 0);	//tek ga ovo ukljucuje
 80017b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <TajmerDelay>:
    return false;
  flag_delay = true;
  return true;
}

void TajmerDelay(uint32_t ms) {
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	uint32_t PocVreme = sys_time_ms;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <TajmerDelay+0x30>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
	while (sys_time_ms <= PocVreme + ms) {
 80017da:	e000      	b.n	80017de <TajmerDelay+0x12>
		__NOP();
 80017dc:	bf00      	nop
	while (sys_time_ms <= PocVreme + ms) {
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	441a      	add	r2, r3
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <TajmerDelay+0x30>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d2f7      	bcs.n	80017dc <TajmerDelay+0x10>
	}

}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000030 	.word	0x20000030

08001800 <TIM2_IRQHandler>:

void
TIM2_IRQHandler ()
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  // poziva se svake milisekunde
  // proveri da li je stvarno TIM2 pozvao rutinu
  if ((TIM2->SR & (0b1 << 0)) == (0b1 << 0))
 8001804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b01      	cmp	r3, #1
 8001810:	d118      	bne.n	8001844 <TIM2_IRQHandler+0x44>
    {
      TIM2->SR &= ~(0b1 << 0);	// da bi sledeci put mogli da detektujemo prekid
 8001812:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	6113      	str	r3, [r2, #16]

      sys_time_ms++;
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <TIM2_IRQHandler+0x74>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	3301      	adds	r3, #1
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <TIM2_IRQHandler+0x74>)
 800182a:	6013      	str	r3, [r2, #0]

      if(sys_time_ms >= 9500) //99500
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <TIM2_IRQHandler+0x74>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f242 521b 	movw	r2, #9499	; 0x251b
 8001834:	4293      	cmp	r3, r2
 8001836:	d905      	bls.n	8001844 <TIM2_IRQHandler+0x44>
      {
//    	  ax_angle_move(ID_SIMA2_POGONSKI, 0, 0);
    	  ax_angle_move(ID_SIMA3_POGONSKI, 0, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	200b      	movs	r0, #11
 800183e:	f7fe fcc5 	bl	80001cc <ax_angle_move>
//    	  ax_angle_move(ID_SIMA4_POGONSKI, 0, 0);
    	  while(1);
 8001842:	e7fe      	b.n	8001842 <TIM2_IRQHandler+0x42>
      }
    }

  switch (sensors_case_timer) {
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <TIM2_IRQHandler+0x78>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <TIM2_IRQHandler+0x60>
 800184e:	2b01      	cmp	r3, #1
 8001850:	d10a      	bne.n	8001868 <TIM2_IRQHandler+0x68>
	case SENSOR_JJ:
		interrupted = sensor_JedanJedini();
 8001852:	f7fe fd6f 	bl	8000334 <sensor_JedanJedini>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <TIM2_IRQHandler+0x7c>)
 800185c:	701a      	strb	r2, [r3, #0]
		break;
 800185e:	e007      	b.n	8001870 <TIM2_IRQHandler+0x70>
	case SENSORS_OFF:
		  interrupted = false;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <TIM2_IRQHandler+0x7c>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
		  break;
 8001866:	e003      	b.n	8001870 <TIM2_IRQHandler+0x70>
	default:
		  interrupted = false;
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <TIM2_IRQHandler+0x7c>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
		break;
 800186e:	bf00      	nop
    }
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000030 	.word	0x20000030
 8001878:	20000034 	.word	0x20000034
 800187c:	20000035 	.word	0x20000035

08001880 <UART_init>:
static void
UART1_init();

void
UART_init()
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	UART1_init();
 8001884:	f000 f802 	bl	800188c <UART1_init>
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <UART1_init>:

static void
UART1_init()
{
 800188c:	b490      	push	{r4, r7}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
	//PB6 i PB7 AF7
	RCC->APB2ENR |= (0b1 << 14); //takt na USART1
 8001892:	4b99      	ldr	r3, [pc, #612]	; (8001af8 <UART1_init+0x26c>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001896:	4a98      	ldr	r2, [pc, #608]	; (8001af8 <UART1_init+0x26c>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189c:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->AHB2ENR |= (0b1 << 1); //takt za gpioB
 800189e:	4b96      	ldr	r3, [pc, #600]	; (8001af8 <UART1_init+0x26c>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	4a95      	ldr	r2, [pc, #596]	; (8001af8 <UART1_init+0x26c>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	64d3      	str	r3, [r2, #76]	; 0x4c

	uint8_t const TX_PIN = 6;
 80018aa:	2306      	movs	r3, #6
 80018ac:	71fb      	strb	r3, [r7, #7]
	uint8_t const RX_PIN = 7;
 80018ae:	2307      	movs	r3, #7
 80018b0:	71bb      	strb	r3, [r7, #6]

	GPIOB->MODER &= ~(0b11 << TX_PIN * 2);
 80018b2:	4b92      	ldr	r3, [pc, #584]	; (8001afc <UART1_init+0x270>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	79fa      	ldrb	r2, [r7, #7]
 80018b8:	0052      	lsls	r2, r2, #1
 80018ba:	2103      	movs	r1, #3
 80018bc:	fa01 f202 	lsl.w	r2, r1, r2
 80018c0:	43d2      	mvns	r2, r2
 80018c2:	4611      	mov	r1, r2
 80018c4:	4a8d      	ldr	r2, [pc, #564]	; (8001afc <UART1_init+0x270>)
 80018c6:	400b      	ands	r3, r1
 80018c8:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0b11 << RX_PIN * 2);
 80018ca:	4b8c      	ldr	r3, [pc, #560]	; (8001afc <UART1_init+0x270>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	79ba      	ldrb	r2, [r7, #6]
 80018d0:	0052      	lsls	r2, r2, #1
 80018d2:	2103      	movs	r1, #3
 80018d4:	fa01 f202 	lsl.w	r2, r1, r2
 80018d8:	43d2      	mvns	r2, r2
 80018da:	4611      	mov	r1, r2
 80018dc:	4a87      	ldr	r2, [pc, #540]	; (8001afc <UART1_init+0x270>)
 80018de:	400b      	ands	r3, r1
 80018e0:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << TX_PIN * 2);
 80018e2:	4b86      	ldr	r3, [pc, #536]	; (8001afc <UART1_init+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	79fa      	ldrb	r2, [r7, #7]
 80018e8:	0052      	lsls	r2, r2, #1
 80018ea:	2102      	movs	r1, #2
 80018ec:	fa01 f202 	lsl.w	r2, r1, r2
 80018f0:	4611      	mov	r1, r2
 80018f2:	4a82      	ldr	r2, [pc, #520]	; (8001afc <UART1_init+0x270>)
 80018f4:	430b      	orrs	r3, r1
 80018f6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << RX_PIN * 2);
 80018f8:	4b80      	ldr	r3, [pc, #512]	; (8001afc <UART1_init+0x270>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	79ba      	ldrb	r2, [r7, #6]
 80018fe:	0052      	lsls	r2, r2, #1
 8001900:	2102      	movs	r1, #2
 8001902:	fa01 f202 	lsl.w	r2, r1, r2
 8001906:	4611      	mov	r1, r2
 8001908:	4a7c      	ldr	r2, [pc, #496]	; (8001afc <UART1_init+0x270>)
 800190a:	430b      	orrs	r3, r1
 800190c:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER |= (0b1 << TX_PIN);
 800190e:	4b7b      	ldr	r3, [pc, #492]	; (8001afc <UART1_init+0x270>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	79fa      	ldrb	r2, [r7, #7]
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f202 	lsl.w	r2, r1, r2
 800191a:	4611      	mov	r1, r2
 800191c:	4a77      	ldr	r2, [pc, #476]	; (8001afc <UART1_init+0x270>)
 800191e:	430b      	orrs	r3, r1
 8001920:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(0b11 << TX_PIN*2);
 8001922:	4b76      	ldr	r3, [pc, #472]	; (8001afc <UART1_init+0x270>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	79fa      	ldrb	r2, [r7, #7]
 8001928:	0052      	lsls	r2, r2, #1
 800192a:	2103      	movs	r1, #3
 800192c:	fa01 f202 	lsl.w	r2, r1, r2
 8001930:	43d2      	mvns	r2, r2
 8001932:	4611      	mov	r1, r2
 8001934:	4a71      	ldr	r2, [pc, #452]	; (8001afc <UART1_init+0x270>)
 8001936:	400b      	ands	r3, r1
 8001938:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0b01 << TX_PIN*2);
 800193a:	4b70      	ldr	r3, [pc, #448]	; (8001afc <UART1_init+0x270>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	79fa      	ldrb	r2, [r7, #7]
 8001940:	0052      	lsls	r2, r2, #1
 8001942:	2101      	movs	r1, #1
 8001944:	fa01 f202 	lsl.w	r2, r1, r2
 8001948:	4611      	mov	r1, r2
 800194a:	4a6c      	ldr	r2, [pc, #432]	; (8001afc <UART1_init+0x270>)
 800194c:	430b      	orrs	r3, r1
 800194e:	60d3      	str	r3, [r2, #12]

	uint8_t const Alt_function = 7;
 8001950:	2307      	movs	r3, #7
 8001952:	717b      	strb	r3, [r7, #5]

	GPIOB->AFR[TX_PIN / 8] &= ~(0b1111 << (TX_PIN % 8) * 4);
 8001954:	4a69      	ldr	r2, [pc, #420]	; (8001afc <UART1_init+0x270>)
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	08db      	lsrs	r3, r3, #3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	3308      	adds	r3, #8
 800195e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001962:	79fa      	ldrb	r2, [r7, #7]
 8001964:	f002 0207 	and.w	r2, r2, #7
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	210f      	movs	r1, #15
 800196c:	fa01 f202 	lsl.w	r2, r1, r2
 8001970:	43d2      	mvns	r2, r2
 8001972:	4614      	mov	r4, r2
 8001974:	4961      	ldr	r1, [pc, #388]	; (8001afc <UART1_init+0x270>)
 8001976:	79fa      	ldrb	r2, [r7, #7]
 8001978:	08d2      	lsrs	r2, r2, #3
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	4610      	mov	r0, r2
 800197e:	ea03 0204 	and.w	r2, r3, r4
 8001982:	f100 0308 	add.w	r3, r0, #8
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[TX_PIN / 8] |= (Alt_function << (TX_PIN % 8) * 4);
 800198a:	4a5c      	ldr	r2, [pc, #368]	; (8001afc <UART1_init+0x270>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	08db      	lsrs	r3, r3, #3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	3308      	adds	r3, #8
 8001994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001998:	7979      	ldrb	r1, [r7, #5]
 800199a:	79fa      	ldrb	r2, [r7, #7]
 800199c:	f002 0207 	and.w	r2, r2, #7
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	fa01 f202 	lsl.w	r2, r1, r2
 80019a6:	4614      	mov	r4, r2
 80019a8:	4954      	ldr	r1, [pc, #336]	; (8001afc <UART1_init+0x270>)
 80019aa:	79fa      	ldrb	r2, [r7, #7]
 80019ac:	08d2      	lsrs	r2, r2, #3
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	4610      	mov	r0, r2
 80019b2:	ea43 0204 	orr.w	r2, r3, r4
 80019b6:	f100 0308 	add.w	r3, r0, #8
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] &= ~(0b1111 << (RX_PIN % 8) * 4);
 80019be:	4a4f      	ldr	r2, [pc, #316]	; (8001afc <UART1_init+0x270>)
 80019c0:	79bb      	ldrb	r3, [r7, #6]
 80019c2:	08db      	lsrs	r3, r3, #3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	3308      	adds	r3, #8
 80019c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019cc:	79ba      	ldrb	r2, [r7, #6]
 80019ce:	f002 0207 	and.w	r2, r2, #7
 80019d2:	0092      	lsls	r2, r2, #2
 80019d4:	210f      	movs	r1, #15
 80019d6:	fa01 f202 	lsl.w	r2, r1, r2
 80019da:	43d2      	mvns	r2, r2
 80019dc:	4614      	mov	r4, r2
 80019de:	4947      	ldr	r1, [pc, #284]	; (8001afc <UART1_init+0x270>)
 80019e0:	79ba      	ldrb	r2, [r7, #6]
 80019e2:	08d2      	lsrs	r2, r2, #3
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	4610      	mov	r0, r2
 80019e8:	ea03 0204 	and.w	r2, r3, r4
 80019ec:	f100 0308 	add.w	r3, r0, #8
 80019f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] |= (Alt_function << (RX_PIN % 8) * 4);
 80019f4:	4a41      	ldr	r2, [pc, #260]	; (8001afc <UART1_init+0x270>)
 80019f6:	79bb      	ldrb	r3, [r7, #6]
 80019f8:	08db      	lsrs	r3, r3, #3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	3308      	adds	r3, #8
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	7979      	ldrb	r1, [r7, #5]
 8001a04:	79ba      	ldrb	r2, [r7, #6]
 8001a06:	f002 0207 	and.w	r2, r2, #7
 8001a0a:	0092      	lsls	r2, r2, #2
 8001a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a10:	4614      	mov	r4, r2
 8001a12:	493a      	ldr	r1, [pc, #232]	; (8001afc <UART1_init+0x270>)
 8001a14:	79ba      	ldrb	r2, [r7, #6]
 8001a16:	08d2      	lsrs	r2, r2, #3
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	ea43 0204 	orr.w	r2, r3, r4
 8001a20:	f100 0308 	add.w	r3, r0, #8
 8001a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

     USART1->CR1 &= ~(0b1 << 12);
 8001a28:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <UART1_init+0x274>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a34      	ldr	r2, [pc, #208]	; (8001b00 <UART1_init+0x274>)
 8001a2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a32:	6013      	str	r3, [r2, #0]
     USART1->CR1 &= ~(0b1 << 28); //8 bita
 8001a34:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <UART1_init+0x274>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a31      	ldr	r2, [pc, #196]	; (8001b00 <UART1_init+0x274>)
 8001a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	6013      	str	r3, [r2, #0]
     USART1->CR2 &= ~(0b11 << 12); //1 stop bit
 8001a40:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <UART1_init+0x274>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4a2e      	ldr	r2, [pc, #184]	; (8001b00 <UART1_init+0x274>)
 8001a46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a4a:	6053      	str	r3, [r2, #4]

     USART1->BRR = 0; //baud 9600->546.14
 8001a4c:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <UART1_init+0x274>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
     USART1->BRR |= ((546 << 4) | (14 << 0)); //115200->45.57
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <UART1_init+0x274>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	4a2a      	ldr	r2, [pc, #168]	; (8001b00 <UART1_init+0x274>)
 8001a58:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8001a5c:	f043 032e 	orr.w	r3, r3, #46	; 0x2e
 8001a60:	60d3      	str	r3, [r2, #12]

     USART1->CR1 |= (0b11 << 2); //tx & rx pin enable
 8001a62:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <UART1_init+0x274>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <UART1_init+0x274>)
 8001a68:	f043 030c 	orr.w	r3, r3, #12
 8001a6c:	6013      	str	r3, [r2, #0]

     USART1->CR1 |= (0b1 << 5); //interrupt enable
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <UART1_init+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a23      	ldr	r2, [pc, #140]	; (8001b00 <UART1_init+0x274>)
 8001a74:	f043 0320 	orr.w	r3, r3, #32
 8001a78:	6013      	str	r3, [r2, #0]

     USART1->CR2 &= ~(0b1 << 11);
 8001a7a:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <UART1_init+0x274>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4a20      	ldr	r2, [pc, #128]	; (8001b00 <UART1_init+0x274>)
 8001a80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a84:	6053      	str	r3, [r2, #4]
     USART1->CR2 &= ~(0b1 << 14);
 8001a86:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <UART1_init+0x274>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a1d      	ldr	r2, [pc, #116]	; (8001b00 <UART1_init+0x274>)
 8001a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a90:	6053      	str	r3, [r2, #4]
     USART1->CR3 &= ~(0b1 << 1);
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <UART1_init+0x274>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	4a1a      	ldr	r2, [pc, #104]	; (8001b00 <UART1_init+0x274>)
 8001a98:	f023 0302 	bic.w	r3, r3, #2
 8001a9c:	6093      	str	r3, [r2, #8]
     USART1->CR3 &= ~(0b1 << 5);
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <UART1_init+0x274>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <UART1_init+0x274>)
 8001aa4:	f023 0320 	bic.w	r3, r3, #32
 8001aa8:	6093      	str	r3, [r2, #8]
     USART1->CR3 |= (0b1 << 3);
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <UART1_init+0x274>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <UART1_init+0x274>)
 8001ab0:	f043 0308 	orr.w	r3, r3, #8
 8001ab4:	6093      	str	r3, [r2, #8]

    uint8_t  USART1_INTERRUPT = 37;
 8001ab6:	2325      	movs	r3, #37	; 0x25
 8001ab8:	713b      	strb	r3, [r7, #4]
    NVIC->ISER[USART1_INTERRUPT / 32] |= (0b1 <<  USART1_INTERRUPT % 32);
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <UART1_init+0x278>)
 8001abc:	793b      	ldrb	r3, [r7, #4]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	b2d8      	uxtb	r0, r3
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac8:	793a      	ldrb	r2, [r7, #4]
 8001aca:	f002 021f 	and.w	r2, r2, #31
 8001ace:	2101      	movs	r1, #1
 8001ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <UART1_init+0x278>)
 8001ad8:	4601      	mov	r1, r0
 8001ada:	4323      	orrs	r3, r4
 8001adc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

     USART1-> CR1 |= (0b1 << 0); //usart enable
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <UART1_init+0x274>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <UART1_init+0x274>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc90      	pop	{r4, r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	48000400 	.word	0x48000400
 8001b00:	40013800 	.word	0x40013800
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <UART_send_byte>:

void
UART_send_byte (uint8_t data)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
   USART1->TDR = data; //ovako se salje, kada je  USART1->dr sa desne strane, onda se ponasa kao recieve registar
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <UART_send_byte+0x38>)
 8001b14:	79fa      	ldrb	r2, [r7, #7]
 8001b16:	b292      	uxth	r2, r2
 8001b18:	851a      	strh	r2, [r3, #40]	; 0x28

  while (!( USART1->ISR & (0b1 << 6)))
 8001b1a:	bf00      	nop
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <UART_send_byte+0x38>)
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f9      	beq.n	8001b1c <UART_send_byte+0x14>
	  ;

   USART1->ISR &= ~(0b1 << 6);
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <UART_send_byte+0x38>)
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <UART_send_byte+0x38>)
 8001b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b32:	61d3      	str	r3, [r2, #28]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40013800 	.word	0x40013800

08001b44 <UART_write>:

void
UART_write (uint8_t data)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  if (buffer_size != MAX_BUFFER_SIZE)
 8001b4e:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <UART_write+0xa0>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	d01c      	beq.n	8001b92 <UART_write+0x4e>
    {
      buffer[index_write] = data;
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <UART_write+0xa4>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4a22      	ldr	r2, [pc, #136]	; (8001bec <UART_write+0xa8>)
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 8001b66:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <UART_write+0xa4>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	425a      	negs	r2, r3
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	f002 021f 	and.w	r2, r2, #31
 8001b78:	bf58      	it	pl
 8001b7a:	4253      	negpl	r3, r2
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <UART_write+0xa4>)
 8001b80:	701a      	strb	r2, [r3, #0]
      buffer_size++;
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <UART_write+0xa0>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <UART_write+0xa0>)
 8001b8e:	701a      	strb	r2, [r3, #0]
    {
      buffer[index_write] = data;
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
    }
}
 8001b90:	e022      	b.n	8001bd8 <UART_write+0x94>
      buffer[index_write] = data;
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <UART_write+0xa4>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4a14      	ldr	r2, [pc, #80]	; (8001bec <UART_write+0xa8>)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <UART_write+0xa4>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	425a      	negs	r2, r3
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	f002 021f 	and.w	r2, r2, #31
 8001bb2:	bf58      	it	pl
 8001bb4:	4253      	negpl	r3, r2
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <UART_write+0xa4>)
 8001bba:	701a      	strb	r2, [r3, #0]
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <UART_write+0xac>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	425a      	negs	r2, r3
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	f002 021f 	and.w	r2, r2, #31
 8001bce:	bf58      	it	pl
 8001bd0:	4253      	negpl	r3, r2
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <UART_write+0xac>)
 8001bd6:	701a      	strb	r2, [r3, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	20000058 	.word	0x20000058
 8001be8:	20000059 	.word	0x20000059
 8001bec:	20000038 	.word	0x20000038
 8001bf0:	2000005a 	.word	0x2000005a

08001bf4 <USART1_IRQHandler>:
    return false;
}

void
USART1_IRQHandler ()
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  if ( USART1->ISR & (0b1 << 5))
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <USART1_IRQHandler+0x24>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <USART1_IRQHandler+0x1e>
    {
      UART_write(USART1->RDR);
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <USART1_IRQHandler+0x24>)
 8001c06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff99 	bl	8001b44 <UART_write>
    }
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40013800 	.word	0x40013800

08001c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c20:	f000 f8ef 	bl	8001e02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c24:	f000 f80d 	bl	8001c42 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  io();
 8001c28:	f7ff fbed 	bl	8001406 <io>
  tajmer_init();
 8001c2c:	f7ff fd5f 	bl	80016ee <tajmer_init>
  UART_init();
 8001c30:	f7ff fe26 	bl	8001880 <UART_init>
  sensor_Init();
 8001c34:	f7fe fb58 	bl	80002e8 <sensor_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001c38:	b662      	cpsie	i
}
 8001c3a:	bf00      	nop
  while (1)
  {
    /* USER CODE END WHILE */

//	  Taktika_SIMA_DRUGI_2();
	  Taktika_SIMA_TRECI_3();
 8001c3c:	f7ff fd40 	bl	80016c0 <Taktika_SIMA_TRECI_3>
 8001c40:	e7fc      	b.n	8001c3c <main+0x20>

08001c42 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b096      	sub	sp, #88	; 0x58
 8001c46:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2244      	movs	r2, #68	; 0x44
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 f895 	bl	8002d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c56:	463b      	mov	r3, r7
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c68:	f000 fa34 	bl	80020d4 <HAL_PWREx_ControlVoltageScaling>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c72:	f000 f838 	bl	8001ce6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001c76:	2310      	movs	r3, #16
 8001c78:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c82:	2360      	movs	r3, #96	; 0x60
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c86:	2302      	movs	r3, #2
 8001c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001c92:	2328      	movs	r3, #40	; 0x28
 8001c94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c96:	2307      	movs	r3, #7
 8001c98:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fa6a 	bl	8002180 <HAL_RCC_OscConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001cb2:	f000 f818 	bl	8001ce6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb6:	230f      	movs	r3, #15
 8001cb8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cca:	463b      	mov	r3, r7
 8001ccc:	2104      	movs	r1, #4
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 fe6a 	bl	80029a8 <HAL_RCC_ClockConfig>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001cda:	f000 f804 	bl	8001ce6 <Error_Handler>
  }
}
 8001cde:	bf00      	nop
 8001ce0:	3758      	adds	r7, #88	; 0x58
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cea:	b672      	cpsid	i
}
 8001cec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cee:	e7fe      	b.n	8001cee <Error_Handler+0x8>

08001cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_MspInit+0x44>)
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfa:	4a0e      	ldr	r2, [pc, #56]	; (8001d34 <HAL_MspInit+0x44>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6613      	str	r3, [r2, #96]	; 0x60
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <HAL_MspInit+0x44>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_MspInit+0x44>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_MspInit+0x44>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_MspInit+0x44>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <NMI_Handler+0x4>

08001d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <HardFault_Handler+0x4>

08001d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <MemManage_Handler+0x4>

08001d4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <BusFault_Handler+0x4>

08001d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <UsageFault_Handler+0x4>

08001d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d84:	f000 f892 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <SystemInit+0x20>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <SystemInit+0x20>)
 8001d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001db4:	f7ff ffea 	bl	8001d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db8:	480c      	ldr	r0, [pc, #48]	; (8001dec <LoopForever+0x6>)
  ldr r1, =_edata
 8001dba:	490d      	ldr	r1, [pc, #52]	; (8001df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <LoopForever+0xe>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dd0:	4c0a      	ldr	r4, [pc, #40]	; (8001dfc <LoopForever+0x16>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dde:	f000 ffd7 	bl	8002d90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001de2:	f7ff ff1b 	bl	8001c1c <main>

08001de6 <LoopForever>:

LoopForever:
    b LoopForever
 8001de6:	e7fe      	b.n	8001de6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001de8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001df4:	08002e38 	.word	0x08002e38
  ldr r2, =_sbss
 8001df8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001dfc:	20000060 	.word	0x20000060

08001e00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC1_IRQHandler>

08001e02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f000 f91f 	bl	8002050 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e12:	200f      	movs	r0, #15
 8001e14:	f000 f80e 	bl	8001e34 <HAL_InitTick>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	71fb      	strb	r3, [r7, #7]
 8001e22:	e001      	b.n	8001e28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e24:	f7ff ff64 	bl	8001cf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e28:	79fb      	ldrb	r3, [r7, #7]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e40:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <HAL_InitTick+0x6c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d023      	beq.n	8001e90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e48:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <HAL_InitTick+0x70>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <HAL_InitTick+0x6c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f91d 	bl	800209e <HAL_SYSTICK_Config>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10f      	bne.n	8001e8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d809      	bhi.n	8001e84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e70:	2200      	movs	r2, #0
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f000 f8f5 	bl	8002066 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <HAL_InitTick+0x74>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e007      	b.n	8001e94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	e004      	b.n	8001e94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	e001      	b.n	8001e94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000000c 	.word	0x2000000c
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	20000008 	.word	0x20000008

08001eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2000000c 	.word	0x2000000c
 8001ed0:	2000005c 	.word	0x2000005c

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	2000005c 	.word	0x2000005c

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	; (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800201c:	d301      	bcc.n	8002022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201e:	2301      	movs	r3, #1
 8002020:	e00f      	b.n	8002042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002022:	4a0a      	ldr	r2, [pc, #40]	; (800204c <SysTick_Config+0x40>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202a:	210f      	movs	r1, #15
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	f7ff ff8e 	bl	8001f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <SysTick_Config+0x40>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <SysTick_Config+0x40>)
 800203c:	2207      	movs	r2, #7
 800203e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	e000e010 	.word	0xe000e010

08002050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff47 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002078:	f7ff ff5c 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 800207c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	6978      	ldr	r0, [r7, #20]
 8002084:	f7ff ff8e 	bl	8001fa4 <NVIC_EncodePriority>
 8002088:	4602      	mov	r2, r0
 800208a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff5d 	bl	8001f50 <__NVIC_SetPriority>
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffb0 	bl	800200c <SysTick_Config>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40007000 	.word	0x40007000

080020d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e2:	d130      	bne.n	8002146 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f0:	d038      	beq.n	8002164 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f2:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020fa:	4a1e      	ldr	r2, [pc, #120]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002100:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002102:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2232      	movs	r2, #50	; 0x32
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	4a1b      	ldr	r2, [pc, #108]	; (800217c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	0c9b      	lsrs	r3, r3, #18
 8002114:	3301      	adds	r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002118:	e002      	b.n	8002120 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3b01      	subs	r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212c:	d102      	bne.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x60>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f2      	bne.n	800211a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002140:	d110      	bne.n	8002164 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e00f      	b.n	8002166 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800214e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002152:	d007      	beq.n	8002164 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800215c:	4a05      	ldr	r2, [pc, #20]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800215e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002162:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40007000 	.word	0x40007000
 8002178:	20000004 	.word	0x20000004
 800217c:	431bde83 	.word	0x431bde83

08002180 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d102      	bne.n	8002194 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	f000 bc02 	b.w	8002998 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002194:	4b96      	ldr	r3, [pc, #600]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800219e:	4b94      	ldr	r3, [pc, #592]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80e4 	beq.w	800237e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <HAL_RCC_OscConfig+0x4c>
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	f040 808b 	bne.w	80022da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	f040 8087 	bne.w	80022da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021cc:	4b88      	ldr	r3, [pc, #544]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_OscConfig+0x64>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e3d9      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1a      	ldr	r2, [r3, #32]
 80021e8:	4b81      	ldr	r3, [pc, #516]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d004      	beq.n	80021fe <HAL_RCC_OscConfig+0x7e>
 80021f4:	4b7e      	ldr	r3, [pc, #504]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fc:	e005      	b.n	800220a <HAL_RCC_OscConfig+0x8a>
 80021fe:	4b7c      	ldr	r3, [pc, #496]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800220a:	4293      	cmp	r3, r2
 800220c:	d223      	bcs.n	8002256 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fd54 	bl	8002cc0 <RCC_SetFlashLatencyFromMSIRange>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e3ba      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002222:	4b73      	ldr	r3, [pc, #460]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a72      	ldr	r2, [pc, #456]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002228:	f043 0308 	orr.w	r3, r3, #8
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b70      	ldr	r3, [pc, #448]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	496d      	ldr	r1, [pc, #436]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 800223c:	4313      	orrs	r3, r2
 800223e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002240:	4b6b      	ldr	r3, [pc, #428]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	4968      	ldr	r1, [pc, #416]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
 8002254:	e025      	b.n	80022a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002256:	4b66      	ldr	r3, [pc, #408]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a65      	ldr	r2, [pc, #404]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 800225c:	f043 0308 	orr.w	r3, r3, #8
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b63      	ldr	r3, [pc, #396]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4960      	ldr	r1, [pc, #384]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002274:	4b5e      	ldr	r3, [pc, #376]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	495b      	ldr	r1, [pc, #364]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4618      	mov	r0, r3
 8002294:	f000 fd14 	bl	8002cc0 <RCC_SetFlashLatencyFromMSIRange>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e37a      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022a2:	f000 fc81 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 80022a6:	4602      	mov	r2, r0
 80022a8:	4b51      	ldr	r3, [pc, #324]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	4950      	ldr	r1, [pc, #320]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022b4:	5ccb      	ldrb	r3, [r1, r3]
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	fa22 f303 	lsr.w	r3, r2, r3
 80022be:	4a4e      	ldr	r2, [pc, #312]	; (80023f8 <HAL_RCC_OscConfig+0x278>)
 80022c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022c2:	4b4e      	ldr	r3, [pc, #312]	; (80023fc <HAL_RCC_OscConfig+0x27c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fdb4 	bl	8001e34 <HAL_InitTick>
 80022cc:	4603      	mov	r3, r0
 80022ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d052      	beq.n	800237c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	e35e      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d032      	beq.n	8002348 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022e2:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a42      	ldr	r2, [pc, #264]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ee:	f7ff fdf1 	bl	8001ed4 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022f6:	f7ff fded 	bl	8001ed4 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e347      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002308:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a35      	ldr	r2, [pc, #212]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 800231a:	f043 0308 	orr.w	r3, r3, #8
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4930      	ldr	r1, [pc, #192]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002332:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	492b      	ldr	r1, [pc, #172]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
 8002346:	e01a      	b.n	800237e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002348:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a28      	ldr	r2, [pc, #160]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002354:	f7ff fdbe 	bl	8001ed4 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800235c:	f7ff fdba 	bl	8001ed4 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e314      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800236e:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x1dc>
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800237c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d073      	beq.n	8002472 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d005      	beq.n	800239c <HAL_RCC_OscConfig+0x21c>
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d10e      	bne.n	80023b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b03      	cmp	r3, #3
 800239a:	d10b      	bne.n	80023b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d063      	beq.n	8002470 <HAL_RCC_OscConfig+0x2f0>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d15f      	bne.n	8002470 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e2f1      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023bc:	d106      	bne.n	80023cc <HAL_RCC_OscConfig+0x24c>
 80023be:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e025      	b.n	8002418 <HAL_RCC_OscConfig+0x298>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d4:	d114      	bne.n	8002400 <HAL_RCC_OscConfig+0x280>
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 80023dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a02      	ldr	r2, [pc, #8]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e013      	b.n	8002418 <HAL_RCC_OscConfig+0x298>
 80023f0:	40021000 	.word	0x40021000
 80023f4:	08002df0 	.word	0x08002df0
 80023f8:	20000004 	.word	0x20000004
 80023fc:	20000008 	.word	0x20000008
 8002400:	4ba0      	ldr	r3, [pc, #640]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a9f      	ldr	r2, [pc, #636]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b9d      	ldr	r3, [pc, #628]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a9c      	ldr	r2, [pc, #624]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff fd58 	bl	8001ed4 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff fd54 	bl	8001ed4 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e2ae      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243a:	4b92      	ldr	r3, [pc, #584]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x2a8>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7ff fd44 	bl	8001ed4 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7ff fd40 	bl	8001ed4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	; 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e29a      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002462:	4b88      	ldr	r3, [pc, #544]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x2d0>
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d060      	beq.n	8002540 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b04      	cmp	r3, #4
 8002482:	d005      	beq.n	8002490 <HAL_RCC_OscConfig+0x310>
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d119      	bne.n	80024be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d116      	bne.n	80024be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002490:	4b7c      	ldr	r3, [pc, #496]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_OscConfig+0x328>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e277      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a8:	4b76      	ldr	r3, [pc, #472]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	061b      	lsls	r3, r3, #24
 80024b6:	4973      	ldr	r1, [pc, #460]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024bc:	e040      	b.n	8002540 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d023      	beq.n	800250e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c6:	4b6f      	ldr	r3, [pc, #444]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a6e      	ldr	r2, [pc, #440]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 80024cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7ff fcff 	bl	8001ed4 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024da:	f7ff fcfb 	bl	8001ed4 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e255      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ec:	4b65      	ldr	r3, [pc, #404]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f8:	4b62      	ldr	r3, [pc, #392]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	495f      	ldr	r1, [pc, #380]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
 800250c:	e018      	b.n	8002540 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250e:	4b5d      	ldr	r3, [pc, #372]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a5c      	ldr	r2, [pc, #368]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7ff fcdb 	bl	8001ed4 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002522:	f7ff fcd7 	bl	8001ed4 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e231      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002534:	4b53      	ldr	r3, [pc, #332]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f0      	bne.n	8002522 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d03c      	beq.n	80025c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01c      	beq.n	800258e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002554:	4b4b      	ldr	r3, [pc, #300]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800255a:	4a4a      	ldr	r2, [pc, #296]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002564:	f7ff fcb6 	bl	8001ed4 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256c:	f7ff fcb2 	bl	8001ed4 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e20c      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800257e:	4b41      	ldr	r3, [pc, #260]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ef      	beq.n	800256c <HAL_RCC_OscConfig+0x3ec>
 800258c:	e01b      	b.n	80025c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258e:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002594:	4a3b      	ldr	r2, [pc, #236]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259e:	f7ff fc99 	bl	8001ed4 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a6:	f7ff fc95 	bl	8001ed4 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e1ef      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025b8:	4b32      	ldr	r3, [pc, #200]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 80025ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1ef      	bne.n	80025a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 80a6 	beq.w	8002720 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d4:	2300      	movs	r3, #0
 80025d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025d8:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10d      	bne.n	8002600 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	4a26      	ldr	r2, [pc, #152]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 80025ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ee:	6593      	str	r3, [r2, #88]	; 0x58
 80025f0:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fc:	2301      	movs	r3, #1
 80025fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002600:	4b21      	ldr	r3, [pc, #132]	; (8002688 <HAL_RCC_OscConfig+0x508>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d118      	bne.n	800263e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800260c:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <HAL_RCC_OscConfig+0x508>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_RCC_OscConfig+0x508>)
 8002612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002616:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002618:	f7ff fc5c 	bl	8001ed4 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002620:	f7ff fc58 	bl	8001ed4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e1b2      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_RCC_OscConfig+0x508>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d108      	bne.n	8002658 <HAL_RCC_OscConfig+0x4d8>
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264c:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002656:	e029      	b.n	80026ac <HAL_RCC_OscConfig+0x52c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b05      	cmp	r3, #5
 800265e:	d115      	bne.n	800268c <HAL_RCC_OscConfig+0x50c>
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002666:	4a07      	ldr	r2, [pc, #28]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002676:	4a03      	ldr	r2, [pc, #12]	; (8002684 <HAL_RCC_OscConfig+0x504>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002680:	e014      	b.n	80026ac <HAL_RCC_OscConfig+0x52c>
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	40007000 	.word	0x40007000
 800268c:	4b9a      	ldr	r3, [pc, #616]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	4a99      	ldr	r2, [pc, #612]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800269c:	4b96      	ldr	r3, [pc, #600]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	4a95      	ldr	r2, [pc, #596]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d016      	beq.n	80026e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7ff fc0e 	bl	8001ed4 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7ff fc0a 	bl	8001ed4 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e162      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d2:	4b89      	ldr	r3, [pc, #548]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ed      	beq.n	80026bc <HAL_RCC_OscConfig+0x53c>
 80026e0:	e015      	b.n	800270e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7ff fbf7 	bl	8001ed4 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ea:	f7ff fbf3 	bl	8001ed4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e14b      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002700:	4b7d      	ldr	r3, [pc, #500]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ed      	bne.n	80026ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800270e:	7ffb      	ldrb	r3, [r7, #31]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d105      	bne.n	8002720 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002714:	4b78      	ldr	r3, [pc, #480]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	4a77      	ldr	r2, [pc, #476]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 800271a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b00      	cmp	r3, #0
 800272a:	d03c      	beq.n	80027a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	2b00      	cmp	r3, #0
 8002732:	d01c      	beq.n	800276e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002734:	4b70      	ldr	r3, [pc, #448]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 8002736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800273a:	4a6f      	ldr	r2, [pc, #444]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7ff fbc6 	bl	8001ed4 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800274c:	f7ff fbc2 	bl	8001ed4 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e11c      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800275e:	4b66      	ldr	r3, [pc, #408]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 8002760:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ef      	beq.n	800274c <HAL_RCC_OscConfig+0x5cc>
 800276c:	e01b      	b.n	80027a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800276e:	4b62      	ldr	r3, [pc, #392]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 8002770:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002774:	4a60      	ldr	r2, [pc, #384]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7ff fba9 	bl	8001ed4 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002786:	f7ff fba5 	bl	8001ed4 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e0ff      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002798:	4b57      	ldr	r3, [pc, #348]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 800279a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1ef      	bne.n	8002786 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 80f3 	beq.w	8002996 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	f040 80c9 	bne.w	800294c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027ba:	4b4f      	ldr	r3, [pc, #316]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 0203 	and.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d12c      	bne.n	8002828 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	3b01      	subs	r3, #1
 80027da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d123      	bne.n	8002828 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d11b      	bne.n	8002828 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d113      	bne.n	8002828 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	3b01      	subs	r3, #1
 800280e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d109      	bne.n	8002828 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	085b      	lsrs	r3, r3, #1
 8002820:	3b01      	subs	r3, #1
 8002822:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d06b      	beq.n	8002900 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d062      	beq.n	80028f4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800282e:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0ac      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800283e:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a2d      	ldr	r2, [pc, #180]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 8002844:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002848:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800284a:	f7ff fb43 	bl	8001ed4 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002852:	f7ff fb3f 	bl	8001ed4 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e099      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f0      	bne.n	8002852 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002870:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	4b21      	ldr	r3, [pc, #132]	; (80028fc <HAL_RCC_OscConfig+0x77c>)
 8002876:	4013      	ands	r3, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002880:	3a01      	subs	r2, #1
 8002882:	0112      	lsls	r2, r2, #4
 8002884:	4311      	orrs	r1, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800288a:	0212      	lsls	r2, r2, #8
 800288c:	4311      	orrs	r1, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002892:	0852      	lsrs	r2, r2, #1
 8002894:	3a01      	subs	r2, #1
 8002896:	0552      	lsls	r2, r2, #21
 8002898:	4311      	orrs	r1, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800289e:	0852      	lsrs	r2, r2, #1
 80028a0:	3a01      	subs	r2, #1
 80028a2:	0652      	lsls	r2, r2, #25
 80028a4:	4311      	orrs	r1, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028aa:	06d2      	lsls	r2, r2, #27
 80028ac:	430a      	orrs	r2, r1
 80028ae:	4912      	ldr	r1, [pc, #72]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028b4:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 80028ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028c0:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 80028c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028cc:	f7ff fb02 	bl	8001ed4 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d4:	f7ff fafe 	bl	8001ed4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e058      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <HAL_RCC_OscConfig+0x778>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028f2:	e050      	b.n	8002996 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e04f      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
 80028f8:	40021000 	.word	0x40021000
 80028fc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002900:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <HAL_RCC_OscConfig+0x820>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d144      	bne.n	8002996 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800290c:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <HAL_RCC_OscConfig+0x820>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a23      	ldr	r2, [pc, #140]	; (80029a0 <HAL_RCC_OscConfig+0x820>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002918:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <HAL_RCC_OscConfig+0x820>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <HAL_RCC_OscConfig+0x820>)
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002922:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002924:	f7ff fad6 	bl	8001ed4 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7ff fad2 	bl	8001ed4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e02c      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <HAL_RCC_OscConfig+0x820>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x7ac>
 800294a:	e024      	b.n	8002996 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2b0c      	cmp	r3, #12
 8002950:	d01f      	beq.n	8002992 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <HAL_RCC_OscConfig+0x820>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <HAL_RCC_OscConfig+0x820>)
 8002958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800295c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295e:	f7ff fab9 	bl	8001ed4 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002966:	f7ff fab5 	bl	8001ed4 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e00f      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_RCC_OscConfig+0x820>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f0      	bne.n	8002966 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_RCC_OscConfig+0x820>)
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	4905      	ldr	r1, [pc, #20]	; (80029a0 <HAL_RCC_OscConfig+0x820>)
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_RCC_OscConfig+0x824>)
 800298c:	4013      	ands	r3, r2
 800298e:	60cb      	str	r3, [r1, #12]
 8002990:	e001      	b.n	8002996 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3720      	adds	r7, #32
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	feeefffc 	.word	0xfeeefffc

080029a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0e7      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b75      	ldr	r3, [pc, #468]	; (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d910      	bls.n	80029ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b72      	ldr	r3, [pc, #456]	; (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 0207 	bic.w	r2, r3, #7
 80029d2:	4970      	ldr	r1, [pc, #448]	; (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b6e      	ldr	r3, [pc, #440]	; (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0cf      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d010      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	4b66      	ldr	r3, [pc, #408]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d908      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a08:	4b63      	ldr	r3, [pc, #396]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4960      	ldr	r1, [pc, #384]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d04c      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2e:	4b5a      	ldr	r3, [pc, #360]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d121      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0a6      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a46:	4b54      	ldr	r3, [pc, #336]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d115      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e09a      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a5e:	4b4e      	ldr	r3, [pc, #312]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e08e      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a6e:	4b4a      	ldr	r3, [pc, #296]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e086      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a7e:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f023 0203 	bic.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4943      	ldr	r1, [pc, #268]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a90:	f7ff fa20 	bl	8001ed4 <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a98:	f7ff fa1c 	bl	8001ed4 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e06e      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	4b3a      	ldr	r3, [pc, #232]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 020c 	and.w	r2, r3, #12
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d1eb      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d010      	beq.n	8002aee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	4b31      	ldr	r3, [pc, #196]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d208      	bcs.n	8002aee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002adc:	4b2e      	ldr	r3, [pc, #184]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	492b      	ldr	r1, [pc, #172]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aee:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d210      	bcs.n	8002b1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afc:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 0207 	bic.w	r2, r3, #7
 8002b04:	4923      	ldr	r1, [pc, #140]	; (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e036      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4918      	ldr	r1, [pc, #96]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d009      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4910      	ldr	r1, [pc, #64]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b5c:	f000 f824 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	490b      	ldr	r1, [pc, #44]	; (8002b9c <HAL_RCC_ClockConfig+0x1f4>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
 8002b78:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_RCC_ClockConfig+0x1fc>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff f957 	bl	8001e34 <HAL_InitTick>
 8002b86:	4603      	mov	r3, r0
 8002b88:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b8a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40022000 	.word	0x40022000
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08002df0 	.word	0x08002df0
 8002ba0:	20000004 	.word	0x20000004
 8002ba4:	20000008 	.word	0x20000008

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc0:	4b3b      	ldr	r3, [pc, #236]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x34>
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d121      	bne.n	8002c1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d11e      	bne.n	8002c1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bdc:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d107      	bne.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002be8:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	e005      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c04:	4a2b      	ldr	r2, [pc, #172]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10d      	bne.n	8002c30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c18:	e00a      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d102      	bne.n	8002c26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c20:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	e004      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c2c:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x114>)
 8002c2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b0c      	cmp	r3, #12
 8002c34:	d134      	bne.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c36:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0xa6>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d003      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0xac>
 8002c4c:	e005      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c50:	617b      	str	r3, [r7, #20]
      break;
 8002c52:	e005      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x114>)
 8002c56:	617b      	str	r3, [r7, #20]
      break;
 8002c58:	e002      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	617b      	str	r3, [r7, #20]
      break;
 8002c5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	fb03 f202 	mul.w	r2, r3, r2
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	0e5b      	lsrs	r3, r3, #25
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	3301      	adds	r3, #1
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3724      	adds	r7, #36	; 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	08002e00 	.word	0x08002e00
 8002cb8:	00f42400 	.word	0x00f42400
 8002cbc:	007a1200 	.word	0x007a1200

08002cc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ccc:	4b2a      	ldr	r3, [pc, #168]	; (8002d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cd8:	f7ff f9ee 	bl	80020b8 <HAL_PWREx_GetVoltageRange>
 8002cdc:	6178      	str	r0, [r7, #20]
 8002cde:	e014      	b.n	8002d0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce4:	4a24      	ldr	r2, [pc, #144]	; (8002d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cea:	6593      	str	r3, [r2, #88]	; 0x58
 8002cec:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cf8:	f7ff f9de 	bl	80020b8 <HAL_PWREx_GetVoltageRange>
 8002cfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d10:	d10b      	bne.n	8002d2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b80      	cmp	r3, #128	; 0x80
 8002d16:	d919      	bls.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2ba0      	cmp	r3, #160	; 0xa0
 8002d1c:	d902      	bls.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d1e:	2302      	movs	r3, #2
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	e013      	b.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d24:	2301      	movs	r3, #1
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	e010      	b.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b80      	cmp	r3, #128	; 0x80
 8002d2e:	d902      	bls.n	8002d36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d30:	2303      	movs	r3, #3
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	e00a      	b.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b80      	cmp	r3, #128	; 0x80
 8002d3a:	d102      	bne.n	8002d42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	e004      	b.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b70      	cmp	r3, #112	; 0x70
 8002d46:	d101      	bne.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d48:	2301      	movs	r3, #1
 8002d4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 0207 	bic.w	r2, r3, #7
 8002d54:	4909      	ldr	r1, [pc, #36]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d5c:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d001      	beq.n	8002d6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40022000 	.word	0x40022000

08002d80 <memset>:
 8002d80:	4402      	add	r2, r0
 8002d82:	4603      	mov	r3, r0
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d100      	bne.n	8002d8a <memset+0xa>
 8002d88:	4770      	bx	lr
 8002d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d8e:	e7f9      	b.n	8002d84 <memset+0x4>

08002d90 <__libc_init_array>:
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	4d0d      	ldr	r5, [pc, #52]	; (8002dc8 <__libc_init_array+0x38>)
 8002d94:	4c0d      	ldr	r4, [pc, #52]	; (8002dcc <__libc_init_array+0x3c>)
 8002d96:	1b64      	subs	r4, r4, r5
 8002d98:	10a4      	asrs	r4, r4, #2
 8002d9a:	2600      	movs	r6, #0
 8002d9c:	42a6      	cmp	r6, r4
 8002d9e:	d109      	bne.n	8002db4 <__libc_init_array+0x24>
 8002da0:	4d0b      	ldr	r5, [pc, #44]	; (8002dd0 <__libc_init_array+0x40>)
 8002da2:	4c0c      	ldr	r4, [pc, #48]	; (8002dd4 <__libc_init_array+0x44>)
 8002da4:	f000 f818 	bl	8002dd8 <_init>
 8002da8:	1b64      	subs	r4, r4, r5
 8002daa:	10a4      	asrs	r4, r4, #2
 8002dac:	2600      	movs	r6, #0
 8002dae:	42a6      	cmp	r6, r4
 8002db0:	d105      	bne.n	8002dbe <__libc_init_array+0x2e>
 8002db2:	bd70      	pop	{r4, r5, r6, pc}
 8002db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db8:	4798      	blx	r3
 8002dba:	3601      	adds	r6, #1
 8002dbc:	e7ee      	b.n	8002d9c <__libc_init_array+0xc>
 8002dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc2:	4798      	blx	r3
 8002dc4:	3601      	adds	r6, #1
 8002dc6:	e7f2      	b.n	8002dae <__libc_init_array+0x1e>
 8002dc8:	08002e30 	.word	0x08002e30
 8002dcc:	08002e30 	.word	0x08002e30
 8002dd0:	08002e30 	.word	0x08002e30
 8002dd4:	08002e34 	.word	0x08002e34

08002dd8 <_init>:
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dda:	bf00      	nop
 8002ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dde:	bc08      	pop	{r3}
 8002de0:	469e      	mov	lr, r3
 8002de2:	4770      	bx	lr

08002de4 <_fini>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	bf00      	nop
 8002de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dea:	bc08      	pop	{r3}
 8002dec:	469e      	mov	lr, r3
 8002dee:	4770      	bx	lr
