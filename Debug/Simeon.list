
Simeon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000294c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b18  08002b18  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002b18  08002b18  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b18  08002b18  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000010  08002b30  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08002b30  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000541e  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015b7  00000000  00000000  000254a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  00026a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004c0  00000000  00000000  000270e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ec1d  00000000  00000000  000275a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009288  00000000  00000000  000461c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6036  00000000  00000000  0004f44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001700  00000000  00000000  00105484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00106b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002ac0 	.word	0x08002ac0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08002ac0 	.word	0x08002ac0

080001cc <ax_angle_move>:
update_crc (unsigned short crc_accum, unsigned char *data_blk_ptr,
	    unsigned short data_blk_size);

void
ax_angle_move (uint8_t id, uint16_t angle, uint16_t speed)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	460b      	mov	r3, r1
 80001d8:	80bb      	strh	r3, [r7, #4]
 80001da:	4613      	mov	r3, r2
 80001dc:	807b      	strh	r3, [r7, #2]
	uint8_t angle_low, angle_high, speed_low, speed_high;
	  angle_low = angle & 0xff;
 80001de:	88bb      	ldrh	r3, [r7, #4]
 80001e0:	77bb      	strb	r3, [r7, #30]
	  angle_high = angle >> 8;
 80001e2:	88bb      	ldrh	r3, [r7, #4]
 80001e4:	0a1b      	lsrs	r3, r3, #8
 80001e6:	b29b      	uxth	r3, r3
 80001e8:	777b      	strb	r3, [r7, #29]
	  speed_low = speed & 0xff;
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	773b      	strb	r3, [r7, #28]
	  speed_high = speed >> 8;
 80001ee:	887b      	ldrh	r3, [r7, #2]
 80001f0:	0a1b      	lsrs	r3, r3, #8
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	76fb      	strb	r3, [r7, #27]

	  uint16_t checksum_local = id + 7 + 3 + 0x1e + angle_low + angle_high
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	b29a      	uxth	r2, r3
 80001fa:	7fbb      	ldrb	r3, [r7, #30]
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	4413      	add	r3, r2
 8000200:	b29a      	uxth	r2, r3
 8000202:	7f7b      	ldrb	r3, [r7, #29]
 8000204:	b29b      	uxth	r3, r3
 8000206:	4413      	add	r3, r2
 8000208:	b29a      	uxth	r2, r3
	      + speed_low + speed_high;
 800020a:	7f3b      	ldrb	r3, [r7, #28]
 800020c:	b29b      	uxth	r3, r3
 800020e:	4413      	add	r3, r2
 8000210:	b29a      	uxth	r2, r3
 8000212:	7efb      	ldrb	r3, [r7, #27]
 8000214:	b29b      	uxth	r3, r3
 8000216:	4413      	add	r3, r2
 8000218:	b29b      	uxth	r3, r3
	  uint16_t checksum_local = id + 7 + 3 + 0x1e + angle_low + angle_high
 800021a:	3328      	adds	r3, #40	; 0x28
 800021c:	833b      	strh	r3, [r7, #24]
	  uint8_t checksum = (uint8_t) (~checksum_local);
 800021e:	8b3b      	ldrh	r3, [r7, #24]
 8000220:	b2db      	uxtb	r3, r3
 8000222:	43db      	mvns	r3, r3
 8000224:	75fb      	strb	r3, [r7, #23]
	  uint8_t ax_move[] =
 8000226:	23ff      	movs	r3, #255	; 0xff
 8000228:	733b      	strb	r3, [r7, #12]
 800022a:	23ff      	movs	r3, #255	; 0xff
 800022c:	737b      	strb	r3, [r7, #13]
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	73bb      	strb	r3, [r7, #14]
 8000232:	2307      	movs	r3, #7
 8000234:	73fb      	strb	r3, [r7, #15]
 8000236:	2303      	movs	r3, #3
 8000238:	743b      	strb	r3, [r7, #16]
 800023a:	231e      	movs	r3, #30
 800023c:	747b      	strb	r3, [r7, #17]
 800023e:	7fbb      	ldrb	r3, [r7, #30]
 8000240:	74bb      	strb	r3, [r7, #18]
 8000242:	7f7b      	ldrb	r3, [r7, #29]
 8000244:	74fb      	strb	r3, [r7, #19]
 8000246:	7f3b      	ldrb	r3, [r7, #28]
 8000248:	753b      	strb	r3, [r7, #20]
 800024a:	7efb      	ldrb	r3, [r7, #27]
 800024c:	757b      	strb	r3, [r7, #21]
 800024e:	7dfb      	ldrb	r3, [r7, #23]
 8000250:	75bb      	strb	r3, [r7, #22]
	    { 0xff, 0xff, id, 0x07, 0x03, 0x1E, angle_low, angle_high, speed_low,
		speed_high, checksum };

  for (uint8_t i = 0; i < 11; i++)
 8000252:	2300      	movs	r3, #0
 8000254:	77fb      	strb	r3, [r7, #31]
 8000256:	e00a      	b.n	800026e <ax_angle_move+0xa2>
    {
      UART_send_byte(ax_move[i]);
 8000258:	7ffb      	ldrb	r3, [r7, #31]
 800025a:	3320      	adds	r3, #32
 800025c:	443b      	add	r3, r7
 800025e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fac4 	bl	80017f0 <UART_send_byte>
  for (uint8_t i = 0; i < 11; i++)
 8000268:	7ffb      	ldrb	r3, [r7, #31]
 800026a:	3301      	adds	r3, #1
 800026c:	77fb      	strb	r3, [r7, #31]
 800026e:	7ffb      	ldrb	r3, [r7, #31]
 8000270:	2b0a      	cmp	r3, #10
 8000272:	d9f1      	bls.n	8000258 <ax_angle_move+0x8c>
    }
}
 8000274:	bf00      	nop
 8000276:	bf00      	nop
 8000278:	3720      	adds	r7, #32
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <ax_wheel_mode>:

void
ax_wheel_mode(uint8_t id)
{
 800027e:	b580      	push	{r7, lr}
 8000280:	b086      	sub	sp, #24
 8000282:	af00      	add	r7, sp, #0
 8000284:	4603      	mov	r3, r0
 8000286:	71fb      	strb	r3, [r7, #7]
	// 0-1023 CCW
	// 1024-2047 CW

	uint16_t checksum_local = id + 5 + 3 + 8;
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	b29b      	uxth	r3, r3
 800028c:	3310      	adds	r3, #16
 800028e:	82bb      	strh	r3, [r7, #20]
	uint8_t checksum = (uint8_t) (~checksum_local);
 8000290:	8abb      	ldrh	r3, [r7, #20]
 8000292:	b2db      	uxtb	r3, r3
 8000294:	43db      	mvns	r3, r3
 8000296:	74fb      	strb	r3, [r7, #19]
	uint8_t ax_move[] =
 8000298:	23ff      	movs	r3, #255	; 0xff
 800029a:	723b      	strb	r3, [r7, #8]
 800029c:	23ff      	movs	r3, #255	; 0xff
 800029e:	727b      	strb	r3, [r7, #9]
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	72bb      	strb	r3, [r7, #10]
 80002a4:	2305      	movs	r3, #5
 80002a6:	72fb      	strb	r3, [r7, #11]
 80002a8:	2303      	movs	r3, #3
 80002aa:	733b      	strb	r3, [r7, #12]
 80002ac:	2308      	movs	r3, #8
 80002ae:	737b      	strb	r3, [r7, #13]
 80002b0:	2300      	movs	r3, #0
 80002b2:	73bb      	strb	r3, [r7, #14]
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]
 80002b8:	7cfb      	ldrb	r3, [r7, #19]
 80002ba:	743b      	strb	r3, [r7, #16]
			{ 0xff, 0xff, id, 0x05, 0x03, 0x08, 0x00, 0x00, checksum };

	for (uint8_t i = 0; i < 9; i++)
 80002bc:	2300      	movs	r3, #0
 80002be:	75fb      	strb	r3, [r7, #23]
 80002c0:	e00a      	b.n	80002d8 <ax_wheel_mode+0x5a>
			    {
			      UART_send_byte(ax_move[i]);
 80002c2:	7dfb      	ldrb	r3, [r7, #23]
 80002c4:	3318      	adds	r3, #24
 80002c6:	443b      	add	r3, r7
 80002c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f001 fa8f 	bl	80017f0 <UART_send_byte>
	for (uint8_t i = 0; i < 9; i++)
 80002d2:	7dfb      	ldrb	r3, [r7, #23]
 80002d4:	3301      	adds	r3, #1
 80002d6:	75fb      	strb	r3, [r7, #23]
 80002d8:	7dfb      	ldrb	r3, [r7, #23]
 80002da:	2b08      	cmp	r3, #8
 80002dc:	d9f1      	bls.n	80002c2 <ax_wheel_mode+0x44>
			    }
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	3718      	adds	r7, #24
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <sensor_Init>:
//portC
uint8_t infra_1 = 1;

void
sensor_Init()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
sensor_IO_init();
 80002ec:	f000 f802 	bl	80002f4 <sensor_IO_init>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <sensor_IO_init>:

void
sensor_IO_init()
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (0b1 << 1); //takt za gpioB
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <sensor_IO_init+0x34>)
 80002fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fc:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <sensor_IO_init+0x34>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB-> MODER &= ~(0b11 << 2* infra_1);  //PB1
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <sensor_IO_init+0x38>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a09      	ldr	r2, [pc, #36]	; (8000330 <sensor_IO_init+0x3c>)
 800030a:	7812      	ldrb	r2, [r2, #0]
 800030c:	0052      	lsls	r2, r2, #1
 800030e:	2103      	movs	r1, #3
 8000310:	fa01 f202 	lsl.w	r2, r1, r2
 8000314:	43d2      	mvns	r2, r2
 8000316:	4611      	mov	r1, r2
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <sensor_IO_init+0x38>)
 800031a:	400b      	ands	r3, r1
 800031c:	6013      	str	r3, [r2, #0]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40021000 	.word	0x40021000
 800032c:	48000400 	.word	0x48000400
 8000330:	20000000 	.word	0x20000000

08000334 <sensor_JedanJedini>:

bool
sensor_JedanJedini()
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
	if(GPIOB->IDR & (0b1<<infra_1))
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <sensor_JedanJedini+0x28>)
 800033a:	691b      	ldr	r3, [r3, #16]
 800033c:	4a08      	ldr	r2, [pc, #32]	; (8000360 <sensor_JedanJedini+0x2c>)
 800033e:	7812      	ldrb	r2, [r2, #0]
 8000340:	4611      	mov	r1, r2
 8000342:	2201      	movs	r2, #1
 8000344:	408a      	lsls	r2, r1
 8000346:	4013      	ands	r3, r2
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <sensor_JedanJedini+0x1c>
		return true;
 800034c:	2301      	movs	r3, #1
 800034e:	e000      	b.n	8000352 <sensor_JedanJedini+0x1e>
	return false;
 8000350:	2300      	movs	r3, #0
}
 8000352:	4618      	mov	r0, r3
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	48000400 	.word	0x48000400
 8000360:	20000000 	.word	0x20000000

08000364 <tactic_yellow_2>:
		default:
			break;
		}
}

void tactic_yellow_2(uint8_t AX_Pogonski, uint8_t AX_Zakretni) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	460a      	mov	r2, r1
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	4613      	mov	r3, r2
 8000372:	71bb      	strb	r3, [r7, #6]
	switch (tactic_state) {
 8000374:	4bbd      	ldr	r3, [pc, #756]	; (800066c <tactic_yellow_2+0x308>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b0d      	cmp	r3, #13
 800037c:	f200 828c 	bhi.w	8000898 <tactic_yellow_2+0x534>
 8000380:	a201      	add	r2, pc, #4	; (adr r2, 8000388 <tactic_yellow_2+0x24>)
 8000382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000386:	bf00      	nop
 8000388:	080003c1 	.word	0x080003c1
 800038c:	080003dd 	.word	0x080003dd
 8000390:	08000495 	.word	0x08000495
 8000394:	080004f3 	.word	0x080004f3
 8000398:	08000551 	.word	0x08000551
 800039c:	080005af 	.word	0x080005af
 80003a0:	0800060d 	.word	0x0800060d
 80003a4:	08000679 	.word	0x08000679
 80003a8:	080006d5 	.word	0x080006d5
 80003ac:	08000731 	.word	0x08000731
 80003b0:	0800078d 	.word	0x0800078d
 80003b4:	080007e9 	.word	0x080007e9
 80003b8:	08000839 	.word	0x08000839
 80003bc:	0800088b 	.word	0x0800088b
	case 0:
		if (IO_cinc()) {
 80003c0:	f000 ffe0 	bl	8001384 <IO_cinc>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	f000 8268 	beq.w	800089c <tactic_yellow_2+0x538>
			tactic_state++;
 80003cc:	4ba7      	ldr	r3, [pc, #668]	; (800066c <tactic_yellow_2+0x308>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	3301      	adds	r3, #1
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	4ba5      	ldr	r3, [pc, #660]	; (800066c <tactic_yellow_2+0x308>)
 80003d8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80003da:	e25f      	b.n	800089c <tactic_yellow_2+0x538>

	case 1:
		TajmerDelay(200);
 80003dc:	20c8      	movs	r0, #200	; 0xc8
 80003de:	f001 f875 	bl	80014cc <TajmerDelay>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80003e2:	79bb      	ldrb	r3, [r7, #6]
 80003e4:	22c8      	movs	r2, #200	; 0xc8
 80003e6:	f240 213a 	movw	r1, #570	; 0x23a
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff feee 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	22c8      	movs	r2, #200	; 0xc8
 80003f4:	f240 213a 	movw	r1, #570	; 0x23a
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff fee7 	bl	80001cc <ax_angle_move>
		TajmerDelay(300);
 80003fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000402:	f001 f863 	bl	80014cc <TajmerDelay>
		ax_angle_move(AX_Zakretni, LEVOPP1, 200);
 8000406:	79bb      	ldrb	r3, [r7, #6]
 8000408:	22c8      	movs	r2, #200	; 0xc8
 800040a:	f240 215d 	movw	r1, #605	; 0x25d
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff fedc 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, LEVOPP1, 300);
 8000414:	79bb      	ldrb	r3, [r7, #6]
 8000416:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800041a:	f240 215d 	movw	r1, #605	; 0x25d
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff fed4 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, LEVOPP1, 200);
 8000424:	79bb      	ldrb	r3, [r7, #6]
 8000426:	22c8      	movs	r2, #200	; 0xc8
 8000428:	f240 215d 	movw	r1, #605	; 0x25d
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff fecd 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, LEVOPP1, 200);
 8000432:	79bb      	ldrb	r3, [r7, #6]
 8000434:	22c8      	movs	r2, #200	; 0xc8
 8000436:	f240 215d 	movw	r1, #605	; 0x25d
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fec6 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 8000440:	20c8      	movs	r0, #200	; 0xc8
 8000442:	f001 f843 	bl	80014cc <TajmerDelay>
		ax_wheel_mode(AX_Pogonski);
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff18 	bl	800027e <ax_wheel_mode>
		TajmerDelay(200);
 800044e:	20c8      	movs	r0, #200	; 0xc8
 8000450:	f001 f83c 	bl	80014cc <TajmerDelay>
		ax_angle_move(AX_Pogonski, 0, 1023);
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800045a:	2100      	movs	r1, #0
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff feb5 	bl	80001cc <ax_angle_move>
		TajmerDelay(250);
 8000462:	20fa      	movs	r0, #250	; 0xfa
 8000464:	f001 f832 	bl	80014cc <TajmerDelay>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 8000468:	79bb      	ldrb	r3, [r7, #6]
 800046a:	22c8      	movs	r2, #200	; 0xc8
 800046c:	f240 213a 	movw	r1, #570	; 0x23a
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff feab 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 8000476:	79bb      	ldrb	r3, [r7, #6]
 8000478:	22c8      	movs	r2, #200	; 0xc8
 800047a:	f240 213a 	movw	r1, #570	; 0x23a
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff fea4 	bl	80001cc <ax_angle_move>

		tactic_state++;
 8000484:	4b79      	ldr	r3, [pc, #484]	; (800066c <tactic_yellow_2+0x308>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	3301      	adds	r3, #1
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b77      	ldr	r3, [pc, #476]	; (800066c <tactic_yellow_2+0x308>)
 8000490:	701a      	strb	r2, [r3, #0]
		break;
 8000492:	e204      	b.n	800089e <tactic_yellow_2+0x53a>

	case 2:
		sensors_case_timer = SENSOR_JJ;
 8000494:	4b76      	ldr	r3, [pc, #472]	; (8000670 <tactic_yellow_2+0x30c>)
 8000496:	2201      	movs	r2, #1
 8000498:	701a      	strb	r2, [r3, #0]

		if(interrupted)
 800049a:	4b76      	ldr	r3, [pc, #472]	; (8000674 <tactic_yellow_2+0x310>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d00d      	beq.n	80004c0 <tactic_yellow_2+0x15c>
		{

			interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 80004a4:	79ba      	ldrb	r2, [r7, #6]
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	4611      	mov	r1, r2
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fcbe 	bl	8000e2c <interrupted_func_right_diagonal_sideway>
			tactic_state+=6;
 80004b0:	4b6e      	ldr	r3, [pc, #440]	; (800066c <tactic_yellow_2+0x308>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	3306      	adds	r3, #6
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	4b6c      	ldr	r3, [pc, #432]	; (800066c <tactic_yellow_2+0x308>)
 80004bc:	701a      	strb	r2, [r3, #0]

			TajmerDelay(150);
			tactic_state++;
		}

		break;
 80004be:	e1ee      	b.n	800089e <tactic_yellow_2+0x53a>
			ax_wheel_mode(AX_Pogonski);
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff fedb 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80004c8:	2064      	movs	r0, #100	; 0x64
 80004ca:	f000 ffff 	bl	80014cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff fe78 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 80004dc:	2096      	movs	r0, #150	; 0x96
 80004de:	f000 fff5 	bl	80014cc <TajmerDelay>
			tactic_state++;
 80004e2:	4b62      	ldr	r3, [pc, #392]	; (800066c <tactic_yellow_2+0x308>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	3301      	adds	r3, #1
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	4b5f      	ldr	r3, [pc, #380]	; (800066c <tactic_yellow_2+0x308>)
 80004ee:	701a      	strb	r2, [r3, #0]
		break;
 80004f0:	e1d5      	b.n	800089e <tactic_yellow_2+0x53a>
	case 3:
		sensors_case_timer = SENSOR_JJ;
 80004f2:	4b5f      	ldr	r3, [pc, #380]	; (8000670 <tactic_yellow_2+0x30c>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]


		if (interrupted) {
 80004f8:	4b5e      	ldr	r3, [pc, #376]	; (8000674 <tactic_yellow_2+0x310>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d00d      	beq.n	800051e <tactic_yellow_2+0x1ba>
			interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 8000502:	79ba      	ldrb	r2, [r7, #6]
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	4611      	mov	r1, r2
 8000508:	4618      	mov	r0, r3
 800050a:	f000 fc8f 	bl	8000e2c <interrupted_func_right_diagonal_sideway>
			tactic_state+=6;
 800050e:	4b57      	ldr	r3, [pc, #348]	; (800066c <tactic_yellow_2+0x308>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b2db      	uxtb	r3, r3
 8000514:	3306      	adds	r3, #6
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b54      	ldr	r3, [pc, #336]	; (800066c <tactic_yellow_2+0x308>)
 800051a:	701a      	strb	r2, [r3, #0]
			ax_angle_move(AX_Pogonski, 0, 1023);

			TajmerDelay(150);
			tactic_state++;
		}
		break;
 800051c:	e1bf      	b.n	800089e <tactic_yellow_2+0x53a>
			ax_wheel_mode(AX_Pogonski);
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff feac 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000526:	2064      	movs	r0, #100	; 0x64
 8000528:	f000 ffd0 	bl	80014cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fe49 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 800053a:	2096      	movs	r0, #150	; 0x96
 800053c:	f000 ffc6 	bl	80014cc <TajmerDelay>
			tactic_state++;
 8000540:	4b4a      	ldr	r3, [pc, #296]	; (800066c <tactic_yellow_2+0x308>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	3301      	adds	r3, #1
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b48      	ldr	r3, [pc, #288]	; (800066c <tactic_yellow_2+0x308>)
 800054c:	701a      	strb	r2, [r3, #0]
		break;
 800054e:	e1a6      	b.n	800089e <tactic_yellow_2+0x53a>
	case 4:
		sensors_case_timer = SENSOR_JJ;
 8000550:	4b47      	ldr	r3, [pc, #284]	; (8000670 <tactic_yellow_2+0x30c>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]


		if (interrupted) {
 8000556:	4b47      	ldr	r3, [pc, #284]	; (8000674 <tactic_yellow_2+0x310>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	b2db      	uxtb	r3, r3
 800055c:	2b00      	cmp	r3, #0
 800055e:	d00d      	beq.n	800057c <tactic_yellow_2+0x218>
			interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 8000560:	79ba      	ldrb	r2, [r7, #6]
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	4611      	mov	r1, r2
 8000566:	4618      	mov	r0, r3
 8000568:	f000 fc60 	bl	8000e2c <interrupted_func_right_diagonal_sideway>
			tactic_state+=6;
 800056c:	4b3f      	ldr	r3, [pc, #252]	; (800066c <tactic_yellow_2+0x308>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	3306      	adds	r3, #6
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b3d      	ldr	r3, [pc, #244]	; (800066c <tactic_yellow_2+0x308>)
 8000578:	701a      	strb	r2, [r3, #0]
			ax_angle_move(AX_Pogonski, 0, 1023);

			TajmerDelay(150);
			tactic_state++;
		}
		break;
 800057a:	e190      	b.n	800089e <tactic_yellow_2+0x53a>
			ax_wheel_mode(AX_Pogonski);
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fe7d 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000584:	2064      	movs	r0, #100	; 0x64
 8000586:	f000 ffa1 	bl	80014cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fe1a 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 8000598:	2096      	movs	r0, #150	; 0x96
 800059a:	f000 ff97 	bl	80014cc <TajmerDelay>
			tactic_state++;
 800059e:	4b33      	ldr	r3, [pc, #204]	; (800066c <tactic_yellow_2+0x308>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	3301      	adds	r3, #1
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b30      	ldr	r3, [pc, #192]	; (800066c <tactic_yellow_2+0x308>)
 80005aa:	701a      	strb	r2, [r3, #0]
		break;
 80005ac:	e177      	b.n	800089e <tactic_yellow_2+0x53a>
	case 5:
		sensors_case_timer = SENSOR_JJ;
 80005ae:	4b30      	ldr	r3, [pc, #192]	; (8000670 <tactic_yellow_2+0x30c>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]


		if (interrupted) {
 80005b4:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <tactic_yellow_2+0x310>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d00d      	beq.n	80005da <tactic_yellow_2+0x276>
			interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 80005be:	79ba      	ldrb	r2, [r7, #6]
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	4611      	mov	r1, r2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fc31 	bl	8000e2c <interrupted_func_right_diagonal_sideway>
			tactic_state+=5;
 80005ca:	4b28      	ldr	r3, [pc, #160]	; (800066c <tactic_yellow_2+0x308>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	3305      	adds	r3, #5
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <tactic_yellow_2+0x308>)
 80005d6:	701a      	strb	r2, [r3, #0]
			ax_angle_move(AX_Pogonski, 0, 1023);

			TajmerDelay(150);
			tactic_state++;
		}
		break;
 80005d8:	e161      	b.n	800089e <tactic_yellow_2+0x53a>
			ax_wheel_mode(AX_Pogonski);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fe4e 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80005e2:	2064      	movs	r0, #100	; 0x64
 80005e4:	f000 ff72 	bl	80014cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fdeb 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 80005f6:	2096      	movs	r0, #150	; 0x96
 80005f8:	f000 ff68 	bl	80014cc <TajmerDelay>
			tactic_state++;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <tactic_yellow_2+0x308>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	3301      	adds	r3, #1
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <tactic_yellow_2+0x308>)
 8000608:	701a      	strb	r2, [r3, #0]
		break;
 800060a:	e148      	b.n	800089e <tactic_yellow_2+0x53a>
	case 6:
		sensors_case_timer = SENSOR_JJ;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <tactic_yellow_2+0x30c>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <tactic_yellow_2+0x310>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00d      	beq.n	8000638 <tactic_yellow_2+0x2d4>
			interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 800061c:	79ba      	ldrb	r2, [r7, #6]
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fc02 	bl	8000e2c <interrupted_func_right_diagonal_sideway>
			tactic_state+=4;
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <tactic_yellow_2+0x308>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	3304      	adds	r3, #4
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <tactic_yellow_2+0x308>)
 8000634:	701a      	strb	r2, [r3, #0]
			ax_angle_move(AX_Pogonski, 0, 1023);

			TajmerDelay(150);
			tactic_state++;
		}
		break;
 8000636:	e132      	b.n	800089e <tactic_yellow_2+0x53a>
			ax_wheel_mode(AX_Pogonski);
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fe1f 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000640:	2064      	movs	r0, #100	; 0x64
 8000642:	f000 ff43 	bl	80014cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff fdbc 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 8000654:	2096      	movs	r0, #150	; 0x96
 8000656:	f000 ff39 	bl	80014cc <TajmerDelay>
			tactic_state++;
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <tactic_yellow_2+0x308>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	3301      	adds	r3, #1
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b01      	ldr	r3, [pc, #4]	; (800066c <tactic_yellow_2+0x308>)
 8000666:	701a      	strb	r2, [r3, #0]
		break;
 8000668:	e119      	b.n	800089e <tactic_yellow_2+0x53a>
 800066a:	bf00      	nop
 800066c:	2000002c 	.word	0x2000002c
 8000670:	20000034 	.word	0x20000034
 8000674:	20000035 	.word	0x20000035
	case 7:
		sensors_case_timer = SENSOR_JJ;
 8000678:	4b8b      	ldr	r3, [pc, #556]	; (80008a8 <tactic_yellow_2+0x544>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 800067e:	4b8b      	ldr	r3, [pc, #556]	; (80008ac <tactic_yellow_2+0x548>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00d      	beq.n	80006a4 <tactic_yellow_2+0x340>
			interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 8000688:	79ba      	ldrb	r2, [r7, #6]
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fbcc 	bl	8000e2c <interrupted_func_right_diagonal_sideway>
			tactic_state+=3;
 8000694:	4b86      	ldr	r3, [pc, #536]	; (80008b0 <tactic_yellow_2+0x54c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	3303      	adds	r3, #3
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4b84      	ldr	r3, [pc, #528]	; (80008b0 <tactic_yellow_2+0x54c>)
 80006a0:	701a      	strb	r2, [r3, #0]
 80006a2:	e017      	b.n	80006d4 <tactic_yellow_2+0x370>

		} else {
			ax_wheel_mode(AX_Pogonski);
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff fde9 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80006ac:	2064      	movs	r0, #100	; 0x64
 80006ae:	f000 ff0d 	bl	80014cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd86 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 80006c0:	2096      	movs	r0, #150	; 0x96
 80006c2:	f000 ff03 	bl	80014cc <TajmerDelay>
			tactic_state++;
 80006c6:	4b7a      	ldr	r3, [pc, #488]	; (80008b0 <tactic_yellow_2+0x54c>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	3301      	adds	r3, #1
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b77      	ldr	r3, [pc, #476]	; (80008b0 <tactic_yellow_2+0x54c>)
 80006d2:	701a      	strb	r2, [r3, #0]
		}
	case 8:
			sensors_case_timer = SENSOR_JJ;
 80006d4:	4b74      	ldr	r3, [pc, #464]	; (80008a8 <tactic_yellow_2+0x544>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 80006da:	4b74      	ldr	r3, [pc, #464]	; (80008ac <tactic_yellow_2+0x548>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00d      	beq.n	8000700 <tactic_yellow_2+0x39c>
				interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 80006e4:	79ba      	ldrb	r2, [r7, #6]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fb9e 	bl	8000e2c <interrupted_func_right_diagonal_sideway>
				tactic_state+=2;
 80006f0:	4b6f      	ldr	r3, [pc, #444]	; (80008b0 <tactic_yellow_2+0x54c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	3302      	adds	r3, #2
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b6d      	ldr	r3, [pc, #436]	; (80008b0 <tactic_yellow_2+0x54c>)
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	e017      	b.n	8000730 <tactic_yellow_2+0x3cc>

			} else {
				ax_wheel_mode(AX_Pogonski);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fdbb 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000708:	2064      	movs	r0, #100	; 0x64
 800070a:	f000 fedf 	bl	80014cc <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 1023);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff fd58 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 800071c:	2096      	movs	r0, #150	; 0x96
 800071e:	f000 fed5 	bl	80014cc <TajmerDelay>
				tactic_state++;
 8000722:	4b63      	ldr	r3, [pc, #396]	; (80008b0 <tactic_yellow_2+0x54c>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	3301      	adds	r3, #1
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b60      	ldr	r3, [pc, #384]	; (80008b0 <tactic_yellow_2+0x54c>)
 800072e:	701a      	strb	r2, [r3, #0]
			}
	case 9:
			sensors_case_timer = SENSOR_JJ;
 8000730:	4b5d      	ldr	r3, [pc, #372]	; (80008a8 <tactic_yellow_2+0x544>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 8000736:	4b5d      	ldr	r3, [pc, #372]	; (80008ac <tactic_yellow_2+0x548>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00d      	beq.n	800075c <tactic_yellow_2+0x3f8>
				interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 8000740:	79ba      	ldrb	r2, [r7, #6]
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fb70 	bl	8000e2c <interrupted_func_right_diagonal_sideway>
				tactic_state+=2;
 800074c:	4b58      	ldr	r3, [pc, #352]	; (80008b0 <tactic_yellow_2+0x54c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	3302      	adds	r3, #2
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b56      	ldr	r3, [pc, #344]	; (80008b0 <tactic_yellow_2+0x54c>)
 8000758:	701a      	strb	r2, [r3, #0]
 800075a:	e017      	b.n	800078c <tactic_yellow_2+0x428>
			} else {
				ax_wheel_mode(AX_Pogonski);
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fd8d 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000764:	2064      	movs	r0, #100	; 0x64
 8000766:	f000 feb1 	bl	80014cc <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 1023);
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fd2a 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 8000778:	2096      	movs	r0, #150	; 0x96
 800077a:	f000 fea7 	bl	80014cc <TajmerDelay>
				tactic_state++;
 800077e:	4b4c      	ldr	r3, [pc, #304]	; (80008b0 <tactic_yellow_2+0x54c>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	3301      	adds	r3, #1
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4b49      	ldr	r3, [pc, #292]	; (80008b0 <tactic_yellow_2+0x54c>)
 800078a:	701a      	strb	r2, [r3, #0]
			}
	case 10:
			sensors_case_timer = SENSOR_JJ;
 800078c:	4b46      	ldr	r3, [pc, #280]	; (80008a8 <tactic_yellow_2+0x544>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 8000792:	4b46      	ldr	r3, [pc, #280]	; (80008ac <tactic_yellow_2+0x548>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00d      	beq.n	80007b8 <tactic_yellow_2+0x454>
				interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 800079c:	79ba      	ldrb	r2, [r7, #6]
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fb42 	bl	8000e2c <interrupted_func_right_diagonal_sideway>
				tactic_state+=2;
 80007a8:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <tactic_yellow_2+0x54c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	3302      	adds	r3, #2
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b3f      	ldr	r3, [pc, #252]	; (80008b0 <tactic_yellow_2+0x54c>)
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	e017      	b.n	80007e8 <tactic_yellow_2+0x484>
			} else {
				ax_wheel_mode(AX_Pogonski);
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fd5f 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 80007c0:	2064      	movs	r0, #100	; 0x64
 80007c2:	f000 fe83 	bl	80014cc <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 1023);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fcfc 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 80007d4:	2096      	movs	r0, #150	; 0x96
 80007d6:	f000 fe79 	bl	80014cc <TajmerDelay>
				tactic_state++;
 80007da:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <tactic_yellow_2+0x54c>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	3301      	adds	r3, #1
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <tactic_yellow_2+0x54c>)
 80007e6:	701a      	strb	r2, [r3, #0]
			}
	case 11:
			sensors_case_timer = SENSOR_JJ;
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <tactic_yellow_2+0x544>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 80007ee:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <tactic_yellow_2+0x548>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d007      	beq.n	8000808 <tactic_yellow_2+0x4a4>
				tactic_state = 11;
 80007f8:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <tactic_yellow_2+0x54c>)
 80007fa:	220b      	movs	r2, #11
 80007fc:	701a      	strb	r2, [r3, #0]
				interrupted_func_stop(AX_Pogonski);
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fafd 	bl	8000e00 <interrupted_func_stop>
 8000806:	e017      	b.n	8000838 <tactic_yellow_2+0x4d4>


			} else {
				ax_wheel_mode(AX_Pogonski);
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fd37 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000810:	2064      	movs	r0, #100	; 0x64
 8000812:	f000 fe5b 	bl	80014cc <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 767);
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f240 22ff 	movw	r2, #767	; 0x2ff
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fcd4 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 8000824:	2096      	movs	r0, #150	; 0x96
 8000826:	f000 fe51 	bl	80014cc <TajmerDelay>
				tactic_state++;
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <tactic_yellow_2+0x54c>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	3301      	adds	r3, #1
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <tactic_yellow_2+0x54c>)
 8000836:	701a      	strb	r2, [r3, #0]
			}
	case 12:
			sensors_case_timer = SENSOR_JJ;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <tactic_yellow_2+0x544>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <tactic_yellow_2+0x548>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d007      	beq.n	8000858 <tactic_yellow_2+0x4f4>
				tactic_state = 12;
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <tactic_yellow_2+0x54c>)
 800084a:	220c      	movs	r2, #12
 800084c:	701a      	strb	r2, [r3, #0]
				interrupted_func_stop(AX_Pogonski);
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fad5 	bl	8000e00 <interrupted_func_stop>
				ax_angle_move(AX_Pogonski, 0, 767);

				TajmerDelay(150);
				tactic_state++;
			}
		break;
 8000856:	e022      	b.n	800089e <tactic_yellow_2+0x53a>
				ax_wheel_mode(AX_Pogonski);
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fd0f 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000860:	2064      	movs	r0, #100	; 0x64
 8000862:	f000 fe33 	bl	80014cc <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 767);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f240 22ff 	movw	r2, #767	; 0x2ff
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fcac 	bl	80001cc <ax_angle_move>
				TajmerDelay(150);
 8000874:	2096      	movs	r0, #150	; 0x96
 8000876:	f000 fe29 	bl	80014cc <TajmerDelay>
				tactic_state++;
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <tactic_yellow_2+0x54c>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	3301      	adds	r3, #1
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <tactic_yellow_2+0x54c>)
 8000886:	701a      	strb	r2, [r3, #0]
		break;
 8000888:	e009      	b.n	800089e <tactic_yellow_2+0x53a>
	case 13:
		ax_angle_move(AX_Pogonski, 0, 0);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fc9b 	bl	80001cc <ax_angle_move>
		break;
 8000896:	e002      	b.n	800089e <tactic_yellow_2+0x53a>
	default:
		break;
 8000898:	bf00      	nop
 800089a:	e000      	b.n	800089e <tactic_yellow_2+0x53a>
		break;
 800089c:	bf00      	nop
	}
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000034 	.word	0x20000034
 80008ac:	20000035 	.word	0x20000035
 80008b0:	2000002c 	.word	0x2000002c

080008b4 <tactic_blue_2>:
	default:
		break;
	}
}

void tactic_blue_2(uint8_t AX_Pogonski, uint8_t AX_Zakretni) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	460a      	mov	r2, r1
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	4613      	mov	r3, r2
 80008c2:	71bb      	strb	r3, [r7, #6]
	switch (tactic_state) {
 80008c4:	4bbc      	ldr	r3, [pc, #752]	; (8000bb8 <tactic_blue_2+0x304>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b0d      	cmp	r3, #13
 80008cc:	f200 828a 	bhi.w	8000de4 <tactic_blue_2+0x530>
 80008d0:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <tactic_blue_2+0x24>)
 80008d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d6:	bf00      	nop
 80008d8:	08000911 	.word	0x08000911
 80008dc:	0800092d 	.word	0x0800092d
 80008e0:	080009e3 	.word	0x080009e3
 80008e4:	08000a41 	.word	0x08000a41
 80008e8:	08000a9f 	.word	0x08000a9f
 80008ec:	08000afd 	.word	0x08000afd
 80008f0:	08000b5b 	.word	0x08000b5b
 80008f4:	08000bc5 	.word	0x08000bc5
 80008f8:	08000c21 	.word	0x08000c21
 80008fc:	08000c7d 	.word	0x08000c7d
 8000900:	08000cd9 	.word	0x08000cd9
 8000904:	08000d35 	.word	0x08000d35
 8000908:	08000d85 	.word	0x08000d85
 800090c:	08000dd7 	.word	0x08000dd7
	case 0:
		if (IO_cinc()) {
 8000910:	f000 fd38 	bl	8001384 <IO_cinc>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	f000 8266 	beq.w	8000de8 <tactic_blue_2+0x534>
			tactic_state++;
 800091c:	4ba6      	ldr	r3, [pc, #664]	; (8000bb8 <tactic_blue_2+0x304>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	3301      	adds	r3, #1
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4ba4      	ldr	r3, [pc, #656]	; (8000bb8 <tactic_blue_2+0x304>)
 8000928:	701a      	strb	r2, [r3, #0]
		}
		break;
 800092a:	e25d      	b.n	8000de8 <tactic_blue_2+0x534>

	case 1:
		TajmerDelay(200);
 800092c:	20c8      	movs	r0, #200	; 0xc8
 800092e:	f000 fdcd 	bl	80014cc <TajmerDelay>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 8000932:	79bb      	ldrb	r3, [r7, #6]
 8000934:	22c8      	movs	r2, #200	; 0xc8
 8000936:	f240 213a 	movw	r1, #570	; 0x23a
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fc46 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	22c8      	movs	r2, #200	; 0xc8
 8000944:	f240 213a 	movw	r1, #570	; 0x23a
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fc3f 	bl	80001cc <ax_angle_move>
		TajmerDelay(500);
 800094e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000952:	f000 fdbb 	bl	80014cc <TajmerDelay>
		ax_angle_move(AX_Zakretni, DESNOPP1, 200);
 8000956:	79bb      	ldrb	r3, [r7, #6]
 8000958:	22c8      	movs	r2, #200	; 0xc8
 800095a:	f240 2119 	movw	r1, #537	; 0x219
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fc34 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, DESNOPP1, 200);
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	22c8      	movs	r2, #200	; 0xc8
 8000968:	f240 2119 	movw	r1, #537	; 0x219
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fc2d 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, DESNOPP1, 200);
 8000972:	79bb      	ldrb	r3, [r7, #6]
 8000974:	22c8      	movs	r2, #200	; 0xc8
 8000976:	f240 2119 	movw	r1, #537	; 0x219
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fc26 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, DESNOPP1, 200);
 8000980:	79bb      	ldrb	r3, [r7, #6]
 8000982:	22c8      	movs	r2, #200	; 0xc8
 8000984:	f240 2119 	movw	r1, #537	; 0x219
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fc1f 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 800098e:	20c8      	movs	r0, #200	; 0xc8
 8000990:	f000 fd9c 	bl	80014cc <TajmerDelay>
		ax_wheel_mode(AX_Pogonski);
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fc71 	bl	800027e <ax_wheel_mode>
		TajmerDelay(200);
 800099c:	20c8      	movs	r0, #200	; 0xc8
 800099e:	f000 fd95 	bl	80014cc <TajmerDelay>
		ax_angle_move(AX_Pogonski, 0, 1023);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fc0e 	bl	80001cc <ax_angle_move>
		TajmerDelay(250);
 80009b0:	20fa      	movs	r0, #250	; 0xfa
 80009b2:	f000 fd8b 	bl	80014cc <TajmerDelay>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80009b6:	79bb      	ldrb	r3, [r7, #6]
 80009b8:	22c8      	movs	r2, #200	; 0xc8
 80009ba:	f240 213a 	movw	r1, #570	; 0x23a
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fc04 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	22c8      	movs	r2, #200	; 0xc8
 80009c8:	f240 213a 	movw	r1, #570	; 0x23a
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fbfd 	bl	80001cc <ax_angle_move>

		tactic_state++;
 80009d2:	4b79      	ldr	r3, [pc, #484]	; (8000bb8 <tactic_blue_2+0x304>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	3301      	adds	r3, #1
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b76      	ldr	r3, [pc, #472]	; (8000bb8 <tactic_blue_2+0x304>)
 80009de:	701a      	strb	r2, [r3, #0]
		break;
 80009e0:	e203      	b.n	8000dea <tactic_blue_2+0x536>

	case 2:
		sensors_case_timer = SENSOR_JJ;
 80009e2:	4b76      	ldr	r3, [pc, #472]	; (8000bbc <tactic_blue_2+0x308>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]

		if(interrupted)
 80009e8:	4b75      	ldr	r3, [pc, #468]	; (8000bc0 <tactic_blue_2+0x30c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d00d      	beq.n	8000a0e <tactic_blue_2+0x15a>
		{

			interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 80009f2:	79ba      	ldrb	r2, [r7, #6]
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 faeb 	bl	8000fd4 <interrupted_func_left_sideway>
			tactic_state+=8;
 80009fe:	4b6e      	ldr	r3, [pc, #440]	; (8000bb8 <tactic_blue_2+0x304>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	3308      	adds	r3, #8
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b6b      	ldr	r3, [pc, #428]	; (8000bb8 <tactic_blue_2+0x304>)
 8000a0a:	701a      	strb	r2, [r3, #0]

			TajmerDelay(150);
			tactic_state++;
		}

		break;
 8000a0c:	e1ed      	b.n	8000dea <tactic_blue_2+0x536>
			ax_wheel_mode(AX_Pogonski);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fc34 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000a16:	2064      	movs	r0, #100	; 0x64
 8000a18:	f000 fd58 	bl	80014cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fbd1 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 8000a2a:	2096      	movs	r0, #150	; 0x96
 8000a2c:	f000 fd4e 	bl	80014cc <TajmerDelay>
			tactic_state++;
 8000a30:	4b61      	ldr	r3, [pc, #388]	; (8000bb8 <tactic_blue_2+0x304>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	3301      	adds	r3, #1
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4b5f      	ldr	r3, [pc, #380]	; (8000bb8 <tactic_blue_2+0x304>)
 8000a3c:	701a      	strb	r2, [r3, #0]
		break;
 8000a3e:	e1d4      	b.n	8000dea <tactic_blue_2+0x536>
	case 3:
		sensors_case_timer = SENSOR_JJ;
 8000a40:	4b5e      	ldr	r3, [pc, #376]	; (8000bbc <tactic_blue_2+0x308>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]


		if (interrupted) {
 8000a46:	4b5e      	ldr	r3, [pc, #376]	; (8000bc0 <tactic_blue_2+0x30c>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d00d      	beq.n	8000a6c <tactic_blue_2+0x1b8>
			interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 8000a50:	79ba      	ldrb	r2, [r7, #6]
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	4611      	mov	r1, r2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fabc 	bl	8000fd4 <interrupted_func_left_sideway>
			tactic_state+=7;
 8000a5c:	4b56      	ldr	r3, [pc, #344]	; (8000bb8 <tactic_blue_2+0x304>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	3307      	adds	r3, #7
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b54      	ldr	r3, [pc, #336]	; (8000bb8 <tactic_blue_2+0x304>)
 8000a68:	701a      	strb	r2, [r3, #0]
			ax_angle_move(AX_Pogonski, 0, 1023);

			TajmerDelay(150);
			tactic_state++;
		}
		break;
 8000a6a:	e1be      	b.n	8000dea <tactic_blue_2+0x536>
			ax_wheel_mode(AX_Pogonski);
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fc05 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000a74:	2064      	movs	r0, #100	; 0x64
 8000a76:	f000 fd29 	bl	80014cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fba2 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 8000a88:	2096      	movs	r0, #150	; 0x96
 8000a8a:	f000 fd1f 	bl	80014cc <TajmerDelay>
			tactic_state++;
 8000a8e:	4b4a      	ldr	r3, [pc, #296]	; (8000bb8 <tactic_blue_2+0x304>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	3301      	adds	r3, #1
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b47      	ldr	r3, [pc, #284]	; (8000bb8 <tactic_blue_2+0x304>)
 8000a9a:	701a      	strb	r2, [r3, #0]
		break;
 8000a9c:	e1a5      	b.n	8000dea <tactic_blue_2+0x536>
	case 4:
		sensors_case_timer = SENSOR_JJ;
 8000a9e:	4b47      	ldr	r3, [pc, #284]	; (8000bbc <tactic_blue_2+0x308>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	701a      	strb	r2, [r3, #0]


		if (interrupted) {
 8000aa4:	4b46      	ldr	r3, [pc, #280]	; (8000bc0 <tactic_blue_2+0x30c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d00d      	beq.n	8000aca <tactic_blue_2+0x216>
			interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 fa8d 	bl	8000fd4 <interrupted_func_left_sideway>
			tactic_state+=6;
 8000aba:	4b3f      	ldr	r3, [pc, #252]	; (8000bb8 <tactic_blue_2+0x304>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	3306      	adds	r3, #6
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b3c      	ldr	r3, [pc, #240]	; (8000bb8 <tactic_blue_2+0x304>)
 8000ac6:	701a      	strb	r2, [r3, #0]
			ax_angle_move(AX_Pogonski, 0, 1023);

			TajmerDelay(150);
			tactic_state++;
		}
		break;
 8000ac8:	e18f      	b.n	8000dea <tactic_blue_2+0x536>
			ax_wheel_mode(AX_Pogonski);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fbd6 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000ad2:	2064      	movs	r0, #100	; 0x64
 8000ad4:	f000 fcfa 	bl	80014cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fb73 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 8000ae6:	2096      	movs	r0, #150	; 0x96
 8000ae8:	f000 fcf0 	bl	80014cc <TajmerDelay>
			tactic_state++;
 8000aec:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <tactic_blue_2+0x304>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	3301      	adds	r3, #1
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <tactic_blue_2+0x304>)
 8000af8:	701a      	strb	r2, [r3, #0]
		break;
 8000afa:	e176      	b.n	8000dea <tactic_blue_2+0x536>
	case 5:
		sensors_case_timer = SENSOR_JJ;
 8000afc:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <tactic_blue_2+0x308>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]


		if (interrupted) {
 8000b02:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <tactic_blue_2+0x30c>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d00d      	beq.n	8000b28 <tactic_blue_2+0x274>
			interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 8000b0c:	79ba      	ldrb	r2, [r7, #6]
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fa5e 	bl	8000fd4 <interrupted_func_left_sideway>
			tactic_state+=5;
 8000b18:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <tactic_blue_2+0x304>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	3305      	adds	r3, #5
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <tactic_blue_2+0x304>)
 8000b24:	701a      	strb	r2, [r3, #0]


			TajmerDelay(150);
			tactic_state++;
		}
		break;
 8000b26:	e160      	b.n	8000dea <tactic_blue_2+0x536>
			ax_wheel_mode(AX_Pogonski);
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fba7 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000b30:	2064      	movs	r0, #100	; 0x64
 8000b32:	f000 fccb 	bl	80014cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fb44 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 8000b44:	2096      	movs	r0, #150	; 0x96
 8000b46:	f000 fcc1 	bl	80014cc <TajmerDelay>
			tactic_state++;
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <tactic_blue_2+0x304>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	3301      	adds	r3, #1
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <tactic_blue_2+0x304>)
 8000b56:	701a      	strb	r2, [r3, #0]
		break;
 8000b58:	e147      	b.n	8000dea <tactic_blue_2+0x536>
	case 6:
		sensors_case_timer = SENSOR_JJ;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <tactic_blue_2+0x308>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <tactic_blue_2+0x30c>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00d      	beq.n	8000b86 <tactic_blue_2+0x2d2>
			interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 8000b6a:	79ba      	ldrb	r2, [r7, #6]
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 fa2f 	bl	8000fd4 <interrupted_func_left_sideway>
			tactic_state+=4;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <tactic_blue_2+0x304>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <tactic_blue_2+0x304>)
 8000b82:	701a      	strb	r2, [r3, #0]
			ax_angle_move(AX_Pogonski, 0, 1023);

			TajmerDelay(150);
			tactic_state++;
		}
		break;
 8000b84:	e131      	b.n	8000dea <tactic_blue_2+0x536>
			ax_wheel_mode(AX_Pogonski);
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fb78 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000b8e:	2064      	movs	r0, #100	; 0x64
 8000b90:	f000 fc9c 	bl	80014cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fb15 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 8000ba2:	2096      	movs	r0, #150	; 0x96
 8000ba4:	f000 fc92 	bl	80014cc <TajmerDelay>
			tactic_state++;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <tactic_blue_2+0x304>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b01      	ldr	r3, [pc, #4]	; (8000bb8 <tactic_blue_2+0x304>)
 8000bb4:	701a      	strb	r2, [r3, #0]
		break;
 8000bb6:	e118      	b.n	8000dea <tactic_blue_2+0x536>
 8000bb8:	2000002c 	.word	0x2000002c
 8000bbc:	20000034 	.word	0x20000034
 8000bc0:	20000035 	.word	0x20000035
	case 7:
		sensors_case_timer = SENSOR_JJ;
 8000bc4:	4b8b      	ldr	r3, [pc, #556]	; (8000df4 <tactic_blue_2+0x540>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000bca:	4b8b      	ldr	r3, [pc, #556]	; (8000df8 <tactic_blue_2+0x544>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d00d      	beq.n	8000bf0 <tactic_blue_2+0x33c>
			interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 8000bd4:	79ba      	ldrb	r2, [r7, #6]
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f9fa 	bl	8000fd4 <interrupted_func_left_sideway>
			tactic_state+=3;
 8000be0:	4b86      	ldr	r3, [pc, #536]	; (8000dfc <tactic_blue_2+0x548>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	3303      	adds	r3, #3
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b84      	ldr	r3, [pc, #528]	; (8000dfc <tactic_blue_2+0x548>)
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	e017      	b.n	8000c20 <tactic_blue_2+0x36c>

		} else {
			ax_wheel_mode(AX_Pogonski);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fb43 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f000 fc67 	bl	80014cc <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fae0 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000c0c:	2096      	movs	r0, #150	; 0x96
 8000c0e:	f000 fc5d 	bl	80014cc <TajmerDelay>
			tactic_state++;
 8000c12:	4b7a      	ldr	r3, [pc, #488]	; (8000dfc <tactic_blue_2+0x548>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	3301      	adds	r3, #1
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b77      	ldr	r3, [pc, #476]	; (8000dfc <tactic_blue_2+0x548>)
 8000c1e:	701a      	strb	r2, [r3, #0]
		}
	case 8:
			sensors_case_timer = SENSOR_JJ;
 8000c20:	4b74      	ldr	r3, [pc, #464]	; (8000df4 <tactic_blue_2+0x540>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 8000c26:	4b74      	ldr	r3, [pc, #464]	; (8000df8 <tactic_blue_2+0x544>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00d      	beq.n	8000c4c <tactic_blue_2+0x398>
				interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 8000c30:	79ba      	ldrb	r2, [r7, #6]
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f9cc 	bl	8000fd4 <interrupted_func_left_sideway>
				tactic_state+=2;
 8000c3c:	4b6f      	ldr	r3, [pc, #444]	; (8000dfc <tactic_blue_2+0x548>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	3302      	adds	r3, #2
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b6d      	ldr	r3, [pc, #436]	; (8000dfc <tactic_blue_2+0x548>)
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e017      	b.n	8000c7c <tactic_blue_2+0x3c8>

			} else {
				ax_wheel_mode(AX_Pogonski);
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fb15 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000c54:	2064      	movs	r0, #100	; 0x64
 8000c56:	f000 fc39 	bl	80014cc <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 1023);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fab2 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 8000c68:	2096      	movs	r0, #150	; 0x96
 8000c6a:	f000 fc2f 	bl	80014cc <TajmerDelay>
				tactic_state++;
 8000c6e:	4b63      	ldr	r3, [pc, #396]	; (8000dfc <tactic_blue_2+0x548>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	3301      	adds	r3, #1
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b60      	ldr	r3, [pc, #384]	; (8000dfc <tactic_blue_2+0x548>)
 8000c7a:	701a      	strb	r2, [r3, #0]
			}
	case 9:
			sensors_case_timer = SENSOR_JJ;
 8000c7c:	4b5d      	ldr	r3, [pc, #372]	; (8000df4 <tactic_blue_2+0x540>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 8000c82:	4b5d      	ldr	r3, [pc, #372]	; (8000df8 <tactic_blue_2+0x544>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00d      	beq.n	8000ca8 <tactic_blue_2+0x3f4>
				interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 8000c8c:	79ba      	ldrb	r2, [r7, #6]
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f99e 	bl	8000fd4 <interrupted_func_left_sideway>
				tactic_state+=2;
 8000c98:	4b58      	ldr	r3, [pc, #352]	; (8000dfc <tactic_blue_2+0x548>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b56      	ldr	r3, [pc, #344]	; (8000dfc <tactic_blue_2+0x548>)
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e017      	b.n	8000cd8 <tactic_blue_2+0x424>
			} else {
				ax_wheel_mode(AX_Pogonski);
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fae7 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000cb0:	2064      	movs	r0, #100	; 0x64
 8000cb2:	f000 fc0b 	bl	80014cc <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 767);
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fa84 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 8000cc4:	2096      	movs	r0, #150	; 0x96
 8000cc6:	f000 fc01 	bl	80014cc <TajmerDelay>
				tactic_state++;
 8000cca:	4b4c      	ldr	r3, [pc, #304]	; (8000dfc <tactic_blue_2+0x548>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	4b49      	ldr	r3, [pc, #292]	; (8000dfc <tactic_blue_2+0x548>)
 8000cd6:	701a      	strb	r2, [r3, #0]
			}
	case 10:
			sensors_case_timer = SENSOR_JJ;
 8000cd8:	4b46      	ldr	r3, [pc, #280]	; (8000df4 <tactic_blue_2+0x540>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 8000cde:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <tactic_blue_2+0x544>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00d      	beq.n	8000d04 <tactic_blue_2+0x450>
				interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 8000ce8:	79ba      	ldrb	r2, [r7, #6]
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f970 	bl	8000fd4 <interrupted_func_left_sideway>
				tactic_state+=2;
 8000cf4:	4b41      	ldr	r3, [pc, #260]	; (8000dfc <tactic_blue_2+0x548>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <tactic_blue_2+0x548>)
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e017      	b.n	8000d34 <tactic_blue_2+0x480>
			} else {
				ax_wheel_mode(AX_Pogonski);
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fab9 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000d0c:	2064      	movs	r0, #100	; 0x64
 8000d0e:	f000 fbdd 	bl	80014cc <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 767);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fa56 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 8000d20:	2096      	movs	r0, #150	; 0x96
 8000d22:	f000 fbd3 	bl	80014cc <TajmerDelay>
				tactic_state++;
 8000d26:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <tactic_blue_2+0x548>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	4b32      	ldr	r3, [pc, #200]	; (8000dfc <tactic_blue_2+0x548>)
 8000d32:	701a      	strb	r2, [r3, #0]
			}
	case 11:
			sensors_case_timer = SENSOR_JJ;
 8000d34:	4b2f      	ldr	r3, [pc, #188]	; (8000df4 <tactic_blue_2+0x540>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 8000d3a:	4b2f      	ldr	r3, [pc, #188]	; (8000df8 <tactic_blue_2+0x544>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d007      	beq.n	8000d54 <tactic_blue_2+0x4a0>
				tactic_state = 11;
 8000d44:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <tactic_blue_2+0x548>)
 8000d46:	220b      	movs	r2, #11
 8000d48:	701a      	strb	r2, [r3, #0]
				interrupted_func_stop(AX_Pogonski);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f857 	bl	8000e00 <interrupted_func_stop>
 8000d52:	e017      	b.n	8000d84 <tactic_blue_2+0x4d0>


			} else {
				ax_wheel_mode(AX_Pogonski);
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fa91 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000d5c:	2064      	movs	r0, #100	; 0x64
 8000d5e:	f000 fbb5 	bl	80014cc <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 767);
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fa2e 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 8000d70:	2096      	movs	r0, #150	; 0x96
 8000d72:	f000 fbab 	bl	80014cc <TajmerDelay>
				tactic_state++;
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <tactic_blue_2+0x548>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <tactic_blue_2+0x548>)
 8000d82:	701a      	strb	r2, [r3, #0]
			}
	case 12:
			sensors_case_timer = SENSOR_JJ;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <tactic_blue_2+0x540>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <tactic_blue_2+0x544>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d007      	beq.n	8000da4 <tactic_blue_2+0x4f0>
				tactic_state = 12;
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <tactic_blue_2+0x548>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	701a      	strb	r2, [r3, #0]
				interrupted_func_stop(AX_Pogonski);
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f82f 	bl	8000e00 <interrupted_func_stop>
				ax_angle_move(AX_Pogonski, 0, 767);

				TajmerDelay(150);
				tactic_state++;
			}
		break;
 8000da2:	e022      	b.n	8000dea <tactic_blue_2+0x536>
				ax_wheel_mode(AX_Pogonski);
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fa69 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000dac:	2064      	movs	r0, #100	; 0x64
 8000dae:	f000 fb8d 	bl	80014cc <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 767);
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fa06 	bl	80001cc <ax_angle_move>
				TajmerDelay(150);
 8000dc0:	2096      	movs	r0, #150	; 0x96
 8000dc2:	f000 fb83 	bl	80014cc <TajmerDelay>
				tactic_state++;
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <tactic_blue_2+0x548>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <tactic_blue_2+0x548>)
 8000dd2:	701a      	strb	r2, [r3, #0]
		break;
 8000dd4:	e009      	b.n	8000dea <tactic_blue_2+0x536>
	case 13:
		ax_angle_move(AX_Pogonski, 0, 0);
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff f9f5 	bl	80001cc <ax_angle_move>
		break;
 8000de2:	e002      	b.n	8000dea <tactic_blue_2+0x536>
	default:
		break;
 8000de4:	bf00      	nop
 8000de6:	e000      	b.n	8000dea <tactic_blue_2+0x536>
		break;
 8000de8:	bf00      	nop
	}
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000034 	.word	0x20000034
 8000df8:	20000035 	.word	0x20000035
 8000dfc:	2000002c 	.word	0x2000002c

08000e00 <interrupted_func_stop>:
		}
}

static void
interrupted_func_stop (uint8_t AX_Pogonski)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	TajmerDelay(200);
 8000e0a:	20c8      	movs	r0, #200	; 0xc8
 8000e0c:	f000 fb5e 	bl	80014cc <TajmerDelay>
    ax_angle_move(AX_Pogonski, 0, 0);
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff f9d8 	bl	80001cc <ax_angle_move>
    TajmerDelay(500);
 8000e1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e20:	f000 fb54 	bl	80014cc <TajmerDelay>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <interrupted_func_right_diagonal_sideway>:
	TajmerDelay(200);
}

static void
interrupted_func_right_diagonal_sideway(uint8_t AX_Pogonski, uint8_t AX_Zakretni)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	460a      	mov	r2, r1
 8000e36:	71fb      	strb	r3, [r7, #7]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	71bb      	strb	r3, [r7, #6]
	ax_angle_move(ID_SIMA2_POGONSKI, 0, 767);
 8000e3c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000e40:	2100      	movs	r1, #0
 8000e42:	2005      	movs	r0, #5
 8000e44:	f7ff f9c2 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 8000e48:	20c8      	movs	r0, #200	; 0xc8
 8000e4a:	f000 fb3f 	bl	80014cc <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 8000e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e52:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000e56:	2006      	movs	r0, #6
 8000e58:	f7ff f9b8 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 8000e5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e60:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000e64:	2006      	movs	r0, #6
 8000e66:	f7ff f9b1 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 8000e6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e6e:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000e72:	2006      	movs	r0, #6
 8000e74:	f7ff f9aa 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 8000e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e7c:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000e80:	2006      	movs	r0, #6
 8000e82:	f7ff f9a3 	bl	80001cc <ax_angle_move>
		TajmerDelay(300);
 8000e86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e8a:	f000 fb1f 	bl	80014cc <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000e8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e92:	f240 213a 	movw	r1, #570	; 0x23a
 8000e96:	2006      	movs	r0, #6
 8000e98:	f7ff f998 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000e9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ea0:	f240 213a 	movw	r1, #570	; 0x23a
 8000ea4:	2006      	movs	r0, #6
 8000ea6:	f7ff f991 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000eaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eae:	f240 213a 	movw	r1, #570	; 0x23a
 8000eb2:	2006      	movs	r0, #6
 8000eb4:	f7ff f98a 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000eb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ebc:	f240 213a 	movw	r1, #570	; 0x23a
 8000ec0:	2006      	movs	r0, #6
 8000ec2:	f7ff f983 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 8000ec6:	20c8      	movs	r0, #200	; 0xc8
 8000ec8:	f000 fb00 	bl	80014cc <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000ecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ed0:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000ed4:	2006      	movs	r0, #6
 8000ed6:	f7ff f979 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ede:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000ee2:	2006      	movs	r0, #6
 8000ee4:	f7ff f972 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000ee8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eec:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000ef0:	2006      	movs	r0, #6
 8000ef2:	f7ff f96b 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000ef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000efa:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000efe:	2006      	movs	r0, #6
 8000f00:	f7ff f964 	bl	80001cc <ax_angle_move>
		TajmerDelay(300);
 8000f04:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f08:	f000 fae0 	bl	80014cc <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000f0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f10:	f240 213a 	movw	r1, #570	; 0x23a
 8000f14:	2006      	movs	r0, #6
 8000f16:	f7ff f959 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000f1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f1e:	f240 213a 	movw	r1, #570	; 0x23a
 8000f22:	2006      	movs	r0, #6
 8000f24:	f7ff f952 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000f28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f2c:	f240 213a 	movw	r1, #570	; 0x23a
 8000f30:	2006      	movs	r0, #6
 8000f32:	f7ff f94b 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f3a:	f240 213a 	movw	r1, #570	; 0x23a
 8000f3e:	2006      	movs	r0, #6
 8000f40:	f7ff f944 	bl	80001cc <ax_angle_move>
		TajmerDelay(1250);
 8000f44:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8000f48:	f000 fac0 	bl	80014cc <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000f4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f50:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000f54:	2006      	movs	r0, #6
 8000f56:	f7ff f939 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000f5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f5e:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000f62:	2006      	movs	r0, #6
 8000f64:	f7ff f932 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f6c:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000f70:	2006      	movs	r0, #6
 8000f72:	f7ff f92b 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000f76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f7a:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000f7e:	2006      	movs	r0, #6
 8000f80:	f7ff f924 	bl	80001cc <ax_angle_move>
		TajmerDelay(300);
 8000f84:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f88:	f000 faa0 	bl	80014cc <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f90:	f240 213a 	movw	r1, #570	; 0x23a
 8000f94:	2006      	movs	r0, #6
 8000f96:	f7ff f919 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000f9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f9e:	f240 213a 	movw	r1, #570	; 0x23a
 8000fa2:	2006      	movs	r0, #6
 8000fa4:	f7ff f912 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000fa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fac:	f240 213a 	movw	r1, #570	; 0x23a
 8000fb0:	2006      	movs	r0, #6
 8000fb2:	f7ff f90b 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000fb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fba:	f240 213a 	movw	r1, #570	; 0x23a
 8000fbe:	2006      	movs	r0, #6
 8000fc0:	f7ff f904 	bl	80001cc <ax_angle_move>
		TajmerDelay(500);
 8000fc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc8:	f000 fa80 	bl	80014cc <TajmerDelay>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <interrupted_func_left_sideway>:

static void
interrupted_func_left_sideway(uint8_t AX_Pogonski, uint8_t AX_Zakretni)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	71fb      	strb	r3, [r7, #7]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	71bb      	strb	r3, [r7, #6]
		ax_angle_move(ID_SIMA2_POGONSKI, 0, 767);
 8000fe4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2005      	movs	r0, #5
 8000fec:	f7ff f8ee 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 8000ff0:	20c8      	movs	r0, #200	; 0xc8
 8000ff2:	f000 fa6b 	bl	80014cc <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ffa:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000ffe:	2006      	movs	r0, #6
 8001000:	f7ff f8e4 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8001004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001008:	f240 21c7 	movw	r1, #711	; 0x2c7
 800100c:	2006      	movs	r0, #6
 800100e:	f7ff f8dd 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8001012:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001016:	f240 21c7 	movw	r1, #711	; 0x2c7
 800101a:	2006      	movs	r0, #6
 800101c:	f7ff f8d6 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8001020:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001024:	f240 21c7 	movw	r1, #711	; 0x2c7
 8001028:	2006      	movs	r0, #6
 800102a:	f7ff f8cf 	bl	80001cc <ax_angle_move>
		TajmerDelay(250);
 800102e:	20fa      	movs	r0, #250	; 0xfa
 8001030:	f000 fa4c 	bl	80014cc <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8001034:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001038:	f240 213a 	movw	r1, #570	; 0x23a
 800103c:	2006      	movs	r0, #6
 800103e:	f7ff f8c5 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8001042:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001046:	f240 213a 	movw	r1, #570	; 0x23a
 800104a:	2006      	movs	r0, #6
 800104c:	f7ff f8be 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8001050:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001054:	f240 213a 	movw	r1, #570	; 0x23a
 8001058:	2006      	movs	r0, #6
 800105a:	f7ff f8b7 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 800105e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001062:	f240 213a 	movw	r1, #570	; 0x23a
 8001066:	2006      	movs	r0, #6
 8001068:	f7ff f8b0 	bl	80001cc <ax_angle_move>
		TajmerDelay(400);
 800106c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001070:	f000 fa2c 	bl	80014cc <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 8001074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001078:	f240 11b7 	movw	r1, #439	; 0x1b7
 800107c:	2006      	movs	r0, #6
 800107e:	f7ff f8a5 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 8001082:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001086:	f240 11b7 	movw	r1, #439	; 0x1b7
 800108a:	2006      	movs	r0, #6
 800108c:	f7ff f89e 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 8001090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001094:	f240 11b7 	movw	r1, #439	; 0x1b7
 8001098:	2006      	movs	r0, #6
 800109a:	f7ff f897 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 800109e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a2:	f240 11b7 	movw	r1, #439	; 0x1b7
 80010a6:	2006      	movs	r0, #6
 80010a8:	f7ff f890 	bl	80001cc <ax_angle_move>
		TajmerDelay(250);
 80010ac:	20fa      	movs	r0, #250	; 0xfa
 80010ae:	f000 fa0d 	bl	80014cc <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80010b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010b6:	f240 213a 	movw	r1, #570	; 0x23a
 80010ba:	2006      	movs	r0, #6
 80010bc:	f7ff f886 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80010c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010c4:	f240 213a 	movw	r1, #570	; 0x23a
 80010c8:	2006      	movs	r0, #6
 80010ca:	f7ff f87f 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80010ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010d2:	f240 213a 	movw	r1, #570	; 0x23a
 80010d6:	2006      	movs	r0, #6
 80010d8:	f7ff f878 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80010dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010e0:	f240 213a 	movw	r1, #570	; 0x23a
 80010e4:	2006      	movs	r0, #6
 80010e6:	f7ff f871 	bl	80001cc <ax_angle_move>
		TajmerDelay(1000);
 80010ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ee:	f000 f9ed 	bl	80014cc <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 80010f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010f6:	f240 11b7 	movw	r1, #439	; 0x1b7
 80010fa:	2006      	movs	r0, #6
 80010fc:	f7ff f866 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 8001100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001104:	f240 11b7 	movw	r1, #439	; 0x1b7
 8001108:	2006      	movs	r0, #6
 800110a:	f7ff f85f 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 800110e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001112:	f240 11b7 	movw	r1, #439	; 0x1b7
 8001116:	2006      	movs	r0, #6
 8001118:	f7ff f858 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 800111c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001120:	f240 11b7 	movw	r1, #439	; 0x1b7
 8001124:	2006      	movs	r0, #6
 8001126:	f7ff f851 	bl	80001cc <ax_angle_move>
		TajmerDelay(250);
 800112a:	20fa      	movs	r0, #250	; 0xfa
 800112c:	f000 f9ce 	bl	80014cc <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8001130:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001134:	f240 213a 	movw	r1, #570	; 0x23a
 8001138:	2006      	movs	r0, #6
 800113a:	f7ff f847 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 800113e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001142:	f240 213a 	movw	r1, #570	; 0x23a
 8001146:	2006      	movs	r0, #6
 8001148:	f7ff f840 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 800114c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001150:	f240 213a 	movw	r1, #570	; 0x23a
 8001154:	2006      	movs	r0, #6
 8001156:	f7ff f839 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 800115a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800115e:	f240 213a 	movw	r1, #570	; 0x23a
 8001162:	2006      	movs	r0, #6
 8001164:	f7ff f832 	bl	80001cc <ax_angle_move>
		TajmerDelay(1200);
 8001168:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800116c:	f000 f9ae 	bl	80014cc <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8001170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001174:	f240 21c7 	movw	r1, #711	; 0x2c7
 8001178:	2006      	movs	r0, #6
 800117a:	f7ff f827 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 800117e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001182:	f240 21c7 	movw	r1, #711	; 0x2c7
 8001186:	2006      	movs	r0, #6
 8001188:	f7ff f820 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 800118c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001190:	f240 21c7 	movw	r1, #711	; 0x2c7
 8001194:	2006      	movs	r0, #6
 8001196:	f7ff f819 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 800119a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800119e:	f240 21c7 	movw	r1, #711	; 0x2c7
 80011a2:	2006      	movs	r0, #6
 80011a4:	f7ff f812 	bl	80001cc <ax_angle_move>
		TajmerDelay(250);
 80011a8:	20fa      	movs	r0, #250	; 0xfa
 80011aa:	f000 f98f 	bl	80014cc <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80011ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b2:	f240 213a 	movw	r1, #570	; 0x23a
 80011b6:	2006      	movs	r0, #6
 80011b8:	f7ff f808 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80011bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011c0:	f240 213a 	movw	r1, #570	; 0x23a
 80011c4:	2006      	movs	r0, #6
 80011c6:	f7ff f801 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80011ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ce:	f240 213a 	movw	r1, #570	; 0x23a
 80011d2:	2006      	movs	r0, #6
 80011d4:	f7fe fffa 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80011d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011dc:	f240 213a 	movw	r1, #570	; 0x23a
 80011e0:	2006      	movs	r0, #6
 80011e2:	f7fe fff3 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 80011e6:	20c8      	movs	r0, #200	; 0xc8
 80011e8:	f000 f970 	bl	80014cc <TajmerDelay>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <io>:
static void
portA_init();

void
io ()
 {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	portC_init();
 80011f8:	f000 f806 	bl	8001208 <portC_init>
	portB_init();
 80011fc:	f000 f814 	bl	8001228 <portB_init>
	portA_init();
 8001200:	f000 f842 	bl	8001288 <portA_init>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <portC_init>:

static void
portC_init()
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (0b1 << 2);
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <portC_init+0x1c>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <portC_init+0x1c>)
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000

08001228 <portB_init>:

static void
portB_init()
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (0b1 << 1);
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <portB_init+0x58>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	4a13      	ldr	r2, [pc, #76]	; (8001280 <portB_init+0x58>)
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB->MODER &= ~(0b11 << 2 * 3);
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <portB_init+0x5c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a11      	ldr	r2, [pc, #68]	; (8001284 <portB_init+0x5c>)
 800123e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001242:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << 2 * 3);
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <portB_init+0x5c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <portB_init+0x5c>)
 800124a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800124e:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(0b1 << 3);
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <portB_init+0x5c>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <portB_init+0x5c>)
 8001256:	f023 0308 	bic.w	r3, r3, #8
 800125a:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (0b11 << 2 * 3);
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <portB_init+0x5c>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4a08      	ldr	r2, [pc, #32]	; (8001284 <portB_init+0x5c>)
 8001262:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001266:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~(0b11 << 2 * 3);
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <portB_init+0x5c>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4a05      	ldr	r2, [pc, #20]	; (8001284 <portB_init+0x5c>)
 800126e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	48000400 	.word	0x48000400

08001288 <portA_init>:

static void
portA_init()
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (0b1 << 0);
 800128c:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <portA_init+0xf8>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001290:	4a3b      	ldr	r2, [pc, #236]	; (8001380 <portA_init+0xf8>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOA->MODER &= ~(0b11 << 2 * CINC);
 8001298:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2207      	movs	r2, #7
 80012a0:	0052      	lsls	r2, r2, #1
 80012a2:	2103      	movs	r1, #3
 80012a4:	fa01 f202 	lsl.w	r2, r1, r2
 80012a8:	43d2      	mvns	r2, r2
 80012aa:	4611      	mov	r1, r2
 80012ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012b0:	400b      	ands	r3, r1
 80012b2:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * CINC); //low speed
 80012b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2207      	movs	r2, #7
 80012bc:	0052      	lsls	r2, r2, #1
 80012be:	2103      	movs	r1, #3
 80012c0:	fa01 f202 	lsl.w	r2, r1, r2
 80012c4:	43d2      	mvns	r2, r2
 80012c6:	4611      	mov	r1, r2
 80012c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012cc:	400b      	ands	r3, r1
 80012ce:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 *CINC);
 80012d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2207      	movs	r2, #7
 80012d8:	0052      	lsls	r2, r2, #1
 80012da:	2103      	movs	r1, #3
 80012dc:	fa01 f202 	lsl.w	r2, r1, r2
 80012e0:	43d2      	mvns	r2, r2
 80012e2:	4611      	mov	r1, r2
 80012e4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012e8:	400b      	ands	r3, r1
 80012ea:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2*CINC);
 80012ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	2207      	movs	r2, #7
 80012f4:	0052      	lsls	r2, r2, #1
 80012f6:	2102      	movs	r1, #2
 80012f8:	fa01 f202 	lsl.w	r2, r1, r2
 80012fc:	4611      	mov	r1, r2
 80012fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001302:	430b      	orrs	r3, r1
 8001304:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_2);
 8001306:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2209      	movs	r2, #9
 800130e:	0052      	lsls	r2, r2, #1
 8001310:	2103      	movs	r1, #3
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	43d2      	mvns	r2, r2
 8001318:	4611      	mov	r1, r2
 800131a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800131e:	400b      	ands	r3, r1
 8001320:	6013      	str	r3, [r2, #0]
    GPIOA->OSPEEDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_2); //low speed
 8001322:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2209      	movs	r2, #9
 800132a:	0052      	lsls	r2, r2, #1
 800132c:	2103      	movs	r1, #3
 800132e:	fa01 f202 	lsl.w	r2, r1, r2
 8001332:	43d2      	mvns	r2, r2
 8001334:	4611      	mov	r1, r2
 8001336:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800133a:	400b      	ands	r3, r1
 800133c:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~(0b11 << 2 *PREKIDAC_TAKTIKE_2);
 800133e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2209      	movs	r2, #9
 8001346:	0052      	lsls	r2, r2, #1
 8001348:	2103      	movs	r1, #3
 800134a:	fa01 f202 	lsl.w	r2, r1, r2
 800134e:	43d2      	mvns	r2, r2
 8001350:	4611      	mov	r1, r2
 8001352:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001356:	400b      	ands	r3, r1
 8001358:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2*PREKIDAC_TAKTIKE_2);
 800135a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2209      	movs	r2, #9
 8001362:	0052      	lsls	r2, r2, #1
 8001364:	2102      	movs	r1, #2
 8001366:	fa01 f202 	lsl.w	r2, r1, r2
 800136a:	4611      	mov	r1, r2
 800136c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001370:	430b      	orrs	r3, r1
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000

08001384 <IO_cinc>:

}

bool
IO_cinc()
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
	if(!(GPIOA->IDR & (0b1 << CINC)))
 8001388:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	2207      	movs	r2, #7
 8001390:	4611      	mov	r1, r2
 8001392:	2201      	movs	r2, #1
 8001394:	408a      	lsls	r2, r1
 8001396:	4013      	ands	r3, r2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d107      	bne.n	80013ac <IO_cinc+0x28>
		counter++;
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <IO_cinc+0x48>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	3301      	adds	r3, #1
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <IO_cinc+0x48>)
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	e002      	b.n	80013b2 <IO_cinc+0x2e>
	else
		counter=0;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <IO_cinc+0x48>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
	if(counter)
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <IO_cinc+0x48>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <IO_cinc+0x3c>
		return true;
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <IO_cinc+0x3e>
	return false;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	2000002d 	.word	0x2000002d

080013d0 <Taktika_SIMA_DRUGI_2>:

void
Taktika_SIMA_DRUGI_2()
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	if(!(GPIOA->IDR & (0b1 << PREKIDAC_TAKTIKE_2)))
 80013d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	2209      	movs	r2, #9
 80013dc:	4611      	mov	r1, r2
 80013de:	2201      	movs	r2, #1
 80013e0:	408a      	lsls	r2, r1
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d104      	bne.n	80013f2 <Taktika_SIMA_DRUGI_2+0x22>
			tactic_blue_2(ID_SIMA2_POGONSKI, ID_SIMA2_ZAKRETNI);
 80013e8:	2106      	movs	r1, #6
 80013ea:	2005      	movs	r0, #5
 80013ec:	f7ff fa62 	bl	80008b4 <tactic_blue_2>
		else
			tactic_yellow_2(ID_SIMA2_POGONSKI, ID_SIMA2_ZAKRETNI);
}
 80013f0:	e003      	b.n	80013fa <Taktika_SIMA_DRUGI_2+0x2a>
			tactic_yellow_2(ID_SIMA2_POGONSKI, ID_SIMA2_ZAKRETNI);
 80013f2:	2106      	movs	r1, #6
 80013f4:	2005      	movs	r0, #5
 80013f6:	f7fe ffb5 	bl	8000364 <tactic_yellow_2>
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}

080013fe <tajmer_init>:
volatile bool interrupted = false;


void
tajmer_init()
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
 tim2_init();
 8001402:	f000 f803 	bl	800140c <tim2_init>
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <tim2_init>:

static void
tim2_init()
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= (0b1 << 0);
 8001412:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <tim2_init+0xb8>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001416:	4a2b      	ldr	r2, [pc, #172]	; (80014c4 <tim2_init+0xb8>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6593      	str	r3, [r2, #88]	; 0x58

	TIM2-> PSC = 80-1; //80MHz -> 1MHz
 800141e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001422:	224f      	movs	r2, #79	; 0x4f
 8001424:	629a      	str	r2, [r3, #40]	; 0x28

	TIM2-> ARR = 1000-1; //1MHz -> 1kHz
 8001426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800142a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 &= ~((0b1 << 1) || (0b1 << 2));
 8001430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143a:	f023 0301 	bic.w	r3, r3, #1
 800143e:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= (0b1 << 0);
 8001440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6153      	str	r3, [r2, #20]

	TIM2->DIER |= (0b1 << 0);
 8001450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	60d3      	str	r3, [r2, #12]

	while (!(TIM2->SR & (0b1 << 0)));
 8001460:	bf00      	nop
 8001462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f8      	beq.n	8001462 <tim2_init+0x56>

	TIM2->SR &= ~(0b1 << 0);
 8001470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= (0b1 << 2);
 8001480:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	6013      	str	r3, [r2, #0]

	uint8_t const TIM2_PREKID = 28;
 8001490:	231c      	movs	r3, #28
 8001492:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[0] |= (0b1 << TIM2_PREKID);
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <tim2_init+0xbc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	2101      	movs	r1, #1
 800149c:	fa01 f202 	lsl.w	r2, r1, r2
 80014a0:	4611      	mov	r1, r2
 80014a2:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <tim2_init+0xbc>)
 80014a4:	430b      	orrs	r3, r1
 80014a6:	6013      	str	r3, [r2, #0]

	TIM2->CR1 |= (0b1 << 0);
 80014a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40021000 	.word	0x40021000
 80014c8:	e000e100 	.word	0xe000e100

080014cc <TajmerDelay>:
    return false;
  flag_delay = true;
  return true;
}

void TajmerDelay(uint32_t ms) {
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	uint32_t PocVreme = sys_time_ms;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <TajmerDelay+0x30>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
	while (sys_time_ms <= PocVreme + ms) {
 80014da:	e000      	b.n	80014de <TajmerDelay+0x12>
		__NOP();
 80014dc:	bf00      	nop
	while (sys_time_ms <= PocVreme + ms) {
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	441a      	add	r2, r3
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <TajmerDelay+0x30>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d2f7      	bcs.n	80014dc <TajmerDelay+0x10>
	}

}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000030 	.word	0x20000030

08001500 <TIM2_IRQHandler>:

void
TIM2_IRQHandler ()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  // poziva se svake milisekunde
  // proveri da li je stvarno TIM2 pozvao rutinu
  if ((TIM2->SR & (0b1 << 0)) == (0b1 << 0))
 8001504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b01      	cmp	r3, #1
 8001510:	d10c      	bne.n	800152c <TIM2_IRQHandler+0x2c>
    {
      TIM2->SR &= ~(0b1 << 0);	// da bi sledeci put mogli da detektujemo prekid
 8001512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6113      	str	r3, [r2, #16]

      sys_time_ms++;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <TIM2_IRQHandler+0x5c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <TIM2_IRQHandler+0x5c>)
 800152a:	6013      	str	r3, [r2, #0]
    }

  switch (sensors_case_timer) {
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <TIM2_IRQHandler+0x60>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <TIM2_IRQHandler+0x48>
 8001536:	2b01      	cmp	r3, #1
 8001538:	d10a      	bne.n	8001550 <TIM2_IRQHandler+0x50>
	case SENSOR_JJ:
		interrupted = sensor_JedanJedini();
 800153a:	f7fe fefb 	bl	8000334 <sensor_JedanJedini>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <TIM2_IRQHandler+0x64>)
 8001544:	701a      	strb	r2, [r3, #0]
		break;
 8001546:	e007      	b.n	8001558 <TIM2_IRQHandler+0x58>
	case SENSORS_OFF:
		  interrupted = false;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <TIM2_IRQHandler+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
		  break;
 800154e:	e003      	b.n	8001558 <TIM2_IRQHandler+0x58>
	default:
		  interrupted = false;
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <TIM2_IRQHandler+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
		break;
 8001556:	bf00      	nop
    }
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000030 	.word	0x20000030
 8001560:	20000034 	.word	0x20000034
 8001564:	20000035 	.word	0x20000035

08001568 <UART_init>:
static void
UART1_init();

void
UART_init()
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	UART1_init();
 800156c:	f000 f802 	bl	8001574 <UART1_init>
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <UART1_init>:

static void
UART1_init()
{
 8001574:	b490      	push	{r4, r7}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	//PB6 i PB7 AF7
	RCC->APB2ENR |= (0b1 << 14); //takt na USART1
 800157a:	4b99      	ldr	r3, [pc, #612]	; (80017e0 <UART1_init+0x26c>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	4a98      	ldr	r2, [pc, #608]	; (80017e0 <UART1_init+0x26c>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001584:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->AHB2ENR |= (0b1 << 1); //takt za gpioB
 8001586:	4b96      	ldr	r3, [pc, #600]	; (80017e0 <UART1_init+0x26c>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	4a95      	ldr	r2, [pc, #596]	; (80017e0 <UART1_init+0x26c>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	64d3      	str	r3, [r2, #76]	; 0x4c

	uint8_t const TX_PIN = 6;
 8001592:	2306      	movs	r3, #6
 8001594:	71fb      	strb	r3, [r7, #7]
	uint8_t const RX_PIN = 7;
 8001596:	2307      	movs	r3, #7
 8001598:	71bb      	strb	r3, [r7, #6]

	GPIOB->MODER &= ~(0b11 << TX_PIN * 2);
 800159a:	4b92      	ldr	r3, [pc, #584]	; (80017e4 <UART1_init+0x270>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	79fa      	ldrb	r2, [r7, #7]
 80015a0:	0052      	lsls	r2, r2, #1
 80015a2:	2103      	movs	r1, #3
 80015a4:	fa01 f202 	lsl.w	r2, r1, r2
 80015a8:	43d2      	mvns	r2, r2
 80015aa:	4611      	mov	r1, r2
 80015ac:	4a8d      	ldr	r2, [pc, #564]	; (80017e4 <UART1_init+0x270>)
 80015ae:	400b      	ands	r3, r1
 80015b0:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0b11 << RX_PIN * 2);
 80015b2:	4b8c      	ldr	r3, [pc, #560]	; (80017e4 <UART1_init+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	79ba      	ldrb	r2, [r7, #6]
 80015b8:	0052      	lsls	r2, r2, #1
 80015ba:	2103      	movs	r1, #3
 80015bc:	fa01 f202 	lsl.w	r2, r1, r2
 80015c0:	43d2      	mvns	r2, r2
 80015c2:	4611      	mov	r1, r2
 80015c4:	4a87      	ldr	r2, [pc, #540]	; (80017e4 <UART1_init+0x270>)
 80015c6:	400b      	ands	r3, r1
 80015c8:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << TX_PIN * 2);
 80015ca:	4b86      	ldr	r3, [pc, #536]	; (80017e4 <UART1_init+0x270>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	79fa      	ldrb	r2, [r7, #7]
 80015d0:	0052      	lsls	r2, r2, #1
 80015d2:	2102      	movs	r1, #2
 80015d4:	fa01 f202 	lsl.w	r2, r1, r2
 80015d8:	4611      	mov	r1, r2
 80015da:	4a82      	ldr	r2, [pc, #520]	; (80017e4 <UART1_init+0x270>)
 80015dc:	430b      	orrs	r3, r1
 80015de:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << RX_PIN * 2);
 80015e0:	4b80      	ldr	r3, [pc, #512]	; (80017e4 <UART1_init+0x270>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	79ba      	ldrb	r2, [r7, #6]
 80015e6:	0052      	lsls	r2, r2, #1
 80015e8:	2102      	movs	r1, #2
 80015ea:	fa01 f202 	lsl.w	r2, r1, r2
 80015ee:	4611      	mov	r1, r2
 80015f0:	4a7c      	ldr	r2, [pc, #496]	; (80017e4 <UART1_init+0x270>)
 80015f2:	430b      	orrs	r3, r1
 80015f4:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER |= (0b1 << TX_PIN);
 80015f6:	4b7b      	ldr	r3, [pc, #492]	; (80017e4 <UART1_init+0x270>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	79fa      	ldrb	r2, [r7, #7]
 80015fc:	2101      	movs	r1, #1
 80015fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001602:	4611      	mov	r1, r2
 8001604:	4a77      	ldr	r2, [pc, #476]	; (80017e4 <UART1_init+0x270>)
 8001606:	430b      	orrs	r3, r1
 8001608:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(0b11 << TX_PIN*2);
 800160a:	4b76      	ldr	r3, [pc, #472]	; (80017e4 <UART1_init+0x270>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	79fa      	ldrb	r2, [r7, #7]
 8001610:	0052      	lsls	r2, r2, #1
 8001612:	2103      	movs	r1, #3
 8001614:	fa01 f202 	lsl.w	r2, r1, r2
 8001618:	43d2      	mvns	r2, r2
 800161a:	4611      	mov	r1, r2
 800161c:	4a71      	ldr	r2, [pc, #452]	; (80017e4 <UART1_init+0x270>)
 800161e:	400b      	ands	r3, r1
 8001620:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0b01 << TX_PIN*2);
 8001622:	4b70      	ldr	r3, [pc, #448]	; (80017e4 <UART1_init+0x270>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	79fa      	ldrb	r2, [r7, #7]
 8001628:	0052      	lsls	r2, r2, #1
 800162a:	2101      	movs	r1, #1
 800162c:	fa01 f202 	lsl.w	r2, r1, r2
 8001630:	4611      	mov	r1, r2
 8001632:	4a6c      	ldr	r2, [pc, #432]	; (80017e4 <UART1_init+0x270>)
 8001634:	430b      	orrs	r3, r1
 8001636:	60d3      	str	r3, [r2, #12]

	uint8_t const Alt_function = 7;
 8001638:	2307      	movs	r3, #7
 800163a:	717b      	strb	r3, [r7, #5]

	GPIOB->AFR[TX_PIN / 8] &= ~(0b1111 << (TX_PIN % 8) * 4);
 800163c:	4a69      	ldr	r2, [pc, #420]	; (80017e4 <UART1_init+0x270>)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	3308      	adds	r3, #8
 8001646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164a:	79fa      	ldrb	r2, [r7, #7]
 800164c:	f002 0207 	and.w	r2, r2, #7
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	210f      	movs	r1, #15
 8001654:	fa01 f202 	lsl.w	r2, r1, r2
 8001658:	43d2      	mvns	r2, r2
 800165a:	4614      	mov	r4, r2
 800165c:	4961      	ldr	r1, [pc, #388]	; (80017e4 <UART1_init+0x270>)
 800165e:	79fa      	ldrb	r2, [r7, #7]
 8001660:	08d2      	lsrs	r2, r2, #3
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	4610      	mov	r0, r2
 8001666:	ea03 0204 	and.w	r2, r3, r4
 800166a:	f100 0308 	add.w	r3, r0, #8
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[TX_PIN / 8] |= (Alt_function << (TX_PIN % 8) * 4);
 8001672:	4a5c      	ldr	r2, [pc, #368]	; (80017e4 <UART1_init+0x270>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	08db      	lsrs	r3, r3, #3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	3308      	adds	r3, #8
 800167c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001680:	7979      	ldrb	r1, [r7, #5]
 8001682:	79fa      	ldrb	r2, [r7, #7]
 8001684:	f002 0207 	and.w	r2, r2, #7
 8001688:	0092      	lsls	r2, r2, #2
 800168a:	fa01 f202 	lsl.w	r2, r1, r2
 800168e:	4614      	mov	r4, r2
 8001690:	4954      	ldr	r1, [pc, #336]	; (80017e4 <UART1_init+0x270>)
 8001692:	79fa      	ldrb	r2, [r7, #7]
 8001694:	08d2      	lsrs	r2, r2, #3
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	4610      	mov	r0, r2
 800169a:	ea43 0204 	orr.w	r2, r3, r4
 800169e:	f100 0308 	add.w	r3, r0, #8
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] &= ~(0b1111 << (RX_PIN % 8) * 4);
 80016a6:	4a4f      	ldr	r2, [pc, #316]	; (80017e4 <UART1_init+0x270>)
 80016a8:	79bb      	ldrb	r3, [r7, #6]
 80016aa:	08db      	lsrs	r3, r3, #3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	3308      	adds	r3, #8
 80016b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b4:	79ba      	ldrb	r2, [r7, #6]
 80016b6:	f002 0207 	and.w	r2, r2, #7
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	210f      	movs	r1, #15
 80016be:	fa01 f202 	lsl.w	r2, r1, r2
 80016c2:	43d2      	mvns	r2, r2
 80016c4:	4614      	mov	r4, r2
 80016c6:	4947      	ldr	r1, [pc, #284]	; (80017e4 <UART1_init+0x270>)
 80016c8:	79ba      	ldrb	r2, [r7, #6]
 80016ca:	08d2      	lsrs	r2, r2, #3
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	4610      	mov	r0, r2
 80016d0:	ea03 0204 	and.w	r2, r3, r4
 80016d4:	f100 0308 	add.w	r3, r0, #8
 80016d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] |= (Alt_function << (RX_PIN % 8) * 4);
 80016dc:	4a41      	ldr	r2, [pc, #260]	; (80017e4 <UART1_init+0x270>)
 80016de:	79bb      	ldrb	r3, [r7, #6]
 80016e0:	08db      	lsrs	r3, r3, #3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	3308      	adds	r3, #8
 80016e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ea:	7979      	ldrb	r1, [r7, #5]
 80016ec:	79ba      	ldrb	r2, [r7, #6]
 80016ee:	f002 0207 	and.w	r2, r2, #7
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	fa01 f202 	lsl.w	r2, r1, r2
 80016f8:	4614      	mov	r4, r2
 80016fa:	493a      	ldr	r1, [pc, #232]	; (80017e4 <UART1_init+0x270>)
 80016fc:	79ba      	ldrb	r2, [r7, #6]
 80016fe:	08d2      	lsrs	r2, r2, #3
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	4610      	mov	r0, r2
 8001704:	ea43 0204 	orr.w	r2, r3, r4
 8001708:	f100 0308 	add.w	r3, r0, #8
 800170c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

     USART1->CR1 &= ~(0b1 << 12);
 8001710:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <UART1_init+0x274>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a34      	ldr	r2, [pc, #208]	; (80017e8 <UART1_init+0x274>)
 8001716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800171a:	6013      	str	r3, [r2, #0]
     USART1->CR1 &= ~(0b1 << 28); //8 bita
 800171c:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <UART1_init+0x274>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a31      	ldr	r2, [pc, #196]	; (80017e8 <UART1_init+0x274>)
 8001722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001726:	6013      	str	r3, [r2, #0]
     USART1->CR2 &= ~(0b11 << 12); //1 stop bit
 8001728:	4b2f      	ldr	r3, [pc, #188]	; (80017e8 <UART1_init+0x274>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a2e      	ldr	r2, [pc, #184]	; (80017e8 <UART1_init+0x274>)
 800172e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001732:	6053      	str	r3, [r2, #4]

     USART1->BRR = 0; //baud 9600
 8001734:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <UART1_init+0x274>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
     USART1->BRR |= ((546 << 4) | (14 << 0));
 800173a:	4b2b      	ldr	r3, [pc, #172]	; (80017e8 <UART1_init+0x274>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	4a2a      	ldr	r2, [pc, #168]	; (80017e8 <UART1_init+0x274>)
 8001740:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8001744:	f043 032e 	orr.w	r3, r3, #46	; 0x2e
 8001748:	60d3      	str	r3, [r2, #12]

     USART1->CR1 |= (0b11 << 2); //tx & rx pin enable
 800174a:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <UART1_init+0x274>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a26      	ldr	r2, [pc, #152]	; (80017e8 <UART1_init+0x274>)
 8001750:	f043 030c 	orr.w	r3, r3, #12
 8001754:	6013      	str	r3, [r2, #0]

     USART1->CR1 |= (0b1 << 5); //interrupt enable
 8001756:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <UART1_init+0x274>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a23      	ldr	r2, [pc, #140]	; (80017e8 <UART1_init+0x274>)
 800175c:	f043 0320 	orr.w	r3, r3, #32
 8001760:	6013      	str	r3, [r2, #0]

     USART1->CR2 &= ~(0b1 << 11);
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <UART1_init+0x274>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a20      	ldr	r2, [pc, #128]	; (80017e8 <UART1_init+0x274>)
 8001768:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800176c:	6053      	str	r3, [r2, #4]
     USART1->CR2 &= ~(0b1 << 14);
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <UART1_init+0x274>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <UART1_init+0x274>)
 8001774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001778:	6053      	str	r3, [r2, #4]
     USART1->CR3 &= ~(0b1 << 1);
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <UART1_init+0x274>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	4a1a      	ldr	r2, [pc, #104]	; (80017e8 <UART1_init+0x274>)
 8001780:	f023 0302 	bic.w	r3, r3, #2
 8001784:	6093      	str	r3, [r2, #8]
     USART1->CR3 &= ~(0b1 << 5);
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <UART1_init+0x274>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <UART1_init+0x274>)
 800178c:	f023 0320 	bic.w	r3, r3, #32
 8001790:	6093      	str	r3, [r2, #8]
     USART1->CR3 |= (0b1 << 3);
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <UART1_init+0x274>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <UART1_init+0x274>)
 8001798:	f043 0308 	orr.w	r3, r3, #8
 800179c:	6093      	str	r3, [r2, #8]

    uint8_t  USART1_INTERRUPT = 37;
 800179e:	2325      	movs	r3, #37	; 0x25
 80017a0:	713b      	strb	r3, [r7, #4]
    NVIC->ISER[USART1_INTERRUPT / 32] |= (0b1 <<  USART1_INTERRUPT % 32);
 80017a2:	4a12      	ldr	r2, [pc, #72]	; (80017ec <UART1_init+0x278>)
 80017a4:	793b      	ldrb	r3, [r7, #4]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	b2d8      	uxtb	r0, r3
 80017aa:	4603      	mov	r3, r0
 80017ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b0:	793a      	ldrb	r2, [r7, #4]
 80017b2:	f002 021f 	and.w	r2, r2, #31
 80017b6:	2101      	movs	r1, #1
 80017b8:	fa01 f202 	lsl.w	r2, r1, r2
 80017bc:	4614      	mov	r4, r2
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <UART1_init+0x278>)
 80017c0:	4601      	mov	r1, r0
 80017c2:	4323      	orrs	r3, r4
 80017c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

     USART1-> CR1 |= (0b1 << 0); //usart enable
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <UART1_init+0x274>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <UART1_init+0x274>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc90      	pop	{r4, r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	48000400 	.word	0x48000400
 80017e8:	40013800 	.word	0x40013800
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <UART_send_byte>:

void
UART_send_byte (uint8_t data)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
   USART1->TDR = data; //ovako se salje, kada je  USART1->dr sa desne strane, onda se ponasa kao recieve registar
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <UART_send_byte+0x38>)
 80017fc:	79fa      	ldrb	r2, [r7, #7]
 80017fe:	b292      	uxth	r2, r2
 8001800:	851a      	strh	r2, [r3, #40]	; 0x28

  while (!( USART1->ISR & (0b1 << 6)))
 8001802:	bf00      	nop
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <UART_send_byte+0x38>)
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f9      	beq.n	8001804 <UART_send_byte+0x14>
	  ;

   USART1->ISR &= ~(0b1 << 6);
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <UART_send_byte+0x38>)
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	4a04      	ldr	r2, [pc, #16]	; (8001828 <UART_send_byte+0x38>)
 8001816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800181a:	61d3      	str	r3, [r2, #28]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	40013800 	.word	0x40013800

0800182c <UART_write>:

void
UART_write (uint8_t data)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if (buffer_size != MAX_BUFFER_SIZE)
 8001836:	4b25      	ldr	r3, [pc, #148]	; (80018cc <UART_write+0xa0>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b20      	cmp	r3, #32
 800183e:	d01c      	beq.n	800187a <UART_write+0x4e>
    {
      buffer[index_write] = data;
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <UART_write+0xa4>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4619      	mov	r1, r3
 8001848:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <UART_write+0xa8>)
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <UART_write+0xa4>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	3301      	adds	r3, #1
 8001856:	425a      	negs	r2, r3
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	f002 021f 	and.w	r2, r2, #31
 8001860:	bf58      	it	pl
 8001862:	4253      	negpl	r3, r2
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <UART_write+0xa4>)
 8001868:	701a      	strb	r2, [r3, #0]
      buffer_size++;
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <UART_write+0xa0>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	3301      	adds	r3, #1
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <UART_write+0xa0>)
 8001876:	701a      	strb	r2, [r3, #0]
    {
      buffer[index_write] = data;
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
    }
}
 8001878:	e022      	b.n	80018c0 <UART_write+0x94>
      buffer[index_write] = data;
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <UART_write+0xa4>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	4619      	mov	r1, r3
 8001882:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <UART_write+0xa8>)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <UART_write+0xa4>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	3301      	adds	r3, #1
 8001890:	425a      	negs	r2, r3
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	f002 021f 	and.w	r2, r2, #31
 800189a:	bf58      	it	pl
 800189c:	4253      	negpl	r3, r2
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <UART_write+0xa4>)
 80018a2:	701a      	strb	r2, [r3, #0]
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <UART_write+0xac>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	3301      	adds	r3, #1
 80018ac:	425a      	negs	r2, r3
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	f002 021f 	and.w	r2, r2, #31
 80018b6:	bf58      	it	pl
 80018b8:	4253      	negpl	r3, r2
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <UART_write+0xac>)
 80018be:	701a      	strb	r2, [r3, #0]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	20000058 	.word	0x20000058
 80018d0:	20000059 	.word	0x20000059
 80018d4:	20000038 	.word	0x20000038
 80018d8:	2000005a 	.word	0x2000005a

080018dc <USART1_IRQHandler>:
    return false;
}

void
USART1_IRQHandler ()
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  if ( USART1->ISR & (0b1 << 5))
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <USART1_IRQHandler+0x24>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <USART1_IRQHandler+0x1e>
    {
      UART_write(USART1->RDR);
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <USART1_IRQHandler+0x24>)
 80018ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff99 	bl	800182c <UART_write>
    }
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40013800 	.word	0x40013800

08001904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001908:	f000 f8ef 	bl	8001aea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800190c:	f000 f80d 	bl	800192a <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  io();
 8001910:	f7ff fc70 	bl	80011f4 <io>
  tajmer_init();
 8001914:	f7ff fd73 	bl	80013fe <tajmer_init>
  UART_init();
 8001918:	f7ff fe26 	bl	8001568 <UART_init>
  sensor_Init();
 800191c:	f7fe fce4 	bl	80002e8 <sensor_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001920:	b662      	cpsie	i
}
 8001922:	bf00      	nop

  while (1)
  {
    /* USER CODE END WHILE */

	  Taktika_SIMA_DRUGI_2();
 8001924:	f7ff fd54 	bl	80013d0 <Taktika_SIMA_DRUGI_2>
 8001928:	e7fc      	b.n	8001924 <main+0x20>

0800192a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b096      	sub	sp, #88	; 0x58
 800192e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2244      	movs	r2, #68	; 0x44
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f001 f895 	bl	8002a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800193e:	463b      	mov	r3, r7
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800194c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001950:	f000 fa34 	bl	8001dbc <HAL_PWREx_ControlVoltageScaling>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800195a:	f000 f838 	bl	80019ce <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800195e:	2310      	movs	r3, #16
 8001960:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001962:	2301      	movs	r3, #1
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800196a:	2360      	movs	r3, #96	; 0x60
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800196e:	2302      	movs	r3, #2
 8001970:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001972:	2301      	movs	r3, #1
 8001974:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001976:	2301      	movs	r3, #1
 8001978:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800197a:	2328      	movs	r3, #40	; 0x28
 800197c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800197e:	2307      	movs	r3, #7
 8001980:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001982:	2302      	movs	r3, #2
 8001984:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001986:	2302      	movs	r3, #2
 8001988:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fa6a 	bl	8001e68 <HAL_RCC_OscConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0x74>
  {
    Error_Handler();
 800199a:	f000 f818 	bl	80019ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199e:	230f      	movs	r3, #15
 80019a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a2:	2303      	movs	r3, #3
 80019a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019b2:	463b      	mov	r3, r7
 80019b4:	2104      	movs	r1, #4
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fe6a 	bl	8002690 <HAL_RCC_ClockConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019c2:	f000 f804 	bl	80019ce <Error_Handler>
  }
}
 80019c6:	bf00      	nop
 80019c8:	3758      	adds	r7, #88	; 0x58
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d2:	b672      	cpsid	i
}
 80019d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <Error_Handler+0x8>

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_MspInit+0x44>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_MspInit+0x44>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_MspInit+0x44>)
 80019ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_MspInit+0x44>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <HAL_MspInit+0x44>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6593      	str	r3, [r2, #88]	; 0x58
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_MspInit+0x44>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <NMI_Handler+0x4>

08001a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6c:	f000 f892 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <SystemInit+0x20>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <SystemInit+0x20>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a9c:	f7ff ffea 	bl	8001a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa0:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aa2:	490d      	ldr	r1, [pc, #52]	; (8001ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <LoopForever+0xe>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa8:	e002      	b.n	8001ab0 <LoopCopyDataInit>

08001aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aae:	3304      	adds	r3, #4

08001ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab4:	d3f9      	bcc.n	8001aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab8:	4c0a      	ldr	r4, [pc, #40]	; (8001ae4 <LoopForever+0x16>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001abc:	e001      	b.n	8001ac2 <LoopFillZerobss>

08001abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac0:	3204      	adds	r2, #4

08001ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac4:	d3fb      	bcc.n	8001abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f000 ffd7 	bl	8002a78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aca:	f7ff ff1b 	bl	8001904 <main>

08001ace <LoopForever>:

LoopForever:
    b LoopForever
 8001ace:	e7fe      	b.n	8001ace <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001adc:	08002b20 	.word	0x08002b20
  ldr r2, =_sbss
 8001ae0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ae4:	20000060 	.word	0x20000060

08001ae8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC1_IRQHandler>

08001aea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af4:	2003      	movs	r0, #3
 8001af6:	f000 f91f 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afa:	200f      	movs	r0, #15
 8001afc:	f000 f80e 	bl	8001b1c <HAL_InitTick>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	71fb      	strb	r3, [r7, #7]
 8001b0a:	e001      	b.n	8001b10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b0c:	f7ff ff64 	bl	80019d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b10:	79fb      	ldrb	r3, [r7, #7]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b28:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_InitTick+0x6c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d023      	beq.n	8001b78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_InitTick+0x70>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_InitTick+0x6c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f91d 	bl	8001d86 <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10f      	bne.n	8001b72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d809      	bhi.n	8001b6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f000 f8f5 	bl	8001d4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b64:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <HAL_InitTick+0x74>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e007      	b.n	8001b7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	e004      	b.n	8001b7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
 8001b76:	e001      	b.n	8001b7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000000c 	.word	0x2000000c
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	20000008 	.word	0x20000008

08001b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_IncTick+0x20>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_IncTick+0x24>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_IncTick+0x24>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	2000000c 	.word	0x2000000c
 8001bb8:	2000005c 	.word	0x2000005c

08001bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_GetTick+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	2000005c 	.word	0x2000005c

08001bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	60d3      	str	r3, [r2, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <__NVIC_GetPriorityGrouping+0x18>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	f003 0307 	and.w	r3, r3, #7
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0a      	blt.n	8001c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	490c      	ldr	r1, [pc, #48]	; (8001c84 <__NVIC_SetPriority+0x4c>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c60:	e00a      	b.n	8001c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4908      	ldr	r1, [pc, #32]	; (8001c88 <__NVIC_SetPriority+0x50>)
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	440b      	add	r3, r1
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf28      	it	cs
 8001caa:	2304      	movcs	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d902      	bls.n	8001cbc <NVIC_EncodePriority+0x30>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3b03      	subs	r3, #3
 8001cba:	e000      	b.n	8001cbe <NVIC_EncodePriority+0x32>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	401a      	ands	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	4313      	orrs	r3, r2
         );
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff8e 	bl	8001c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff47 	bl	8001bd4 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff5c 	bl	8001c1c <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff8e 	bl	8001c8c <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5d 	bl	8001c38 <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffb0 	bl	8001cf4 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40007000 	.word	0x40007000

08001dbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dca:	d130      	bne.n	8001e2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd8:	d038      	beq.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dda:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001de2:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2232      	movs	r2, #50	; 0x32
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	0c9b      	lsrs	r3, r3, #18
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e00:	e002      	b.n	8001e08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e14:	d102      	bne.n	8001e1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f2      	bne.n	8001e02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e28:	d110      	bne.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e00f      	b.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e3a:	d007      	beq.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e44:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	20000004 	.word	0x20000004
 8001e64:	431bde83 	.word	0x431bde83

08001e68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	f000 bc02 	b.w	8002680 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e7c:	4b96      	ldr	r3, [pc, #600]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e86:	4b94      	ldr	r3, [pc, #592]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80e4 	beq.w	8002066 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x4c>
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	f040 808b 	bne.w	8001fc2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	f040 8087 	bne.w	8001fc2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eb4:	4b88      	ldr	r3, [pc, #544]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_OscConfig+0x64>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e3d9      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	4b81      	ldr	r3, [pc, #516]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x7e>
 8001edc:	4b7e      	ldr	r3, [pc, #504]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee4:	e005      	b.n	8001ef2 <HAL_RCC_OscConfig+0x8a>
 8001ee6:	4b7c      	ldr	r3, [pc, #496]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d223      	bcs.n	8001f3e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fd54 	bl	80029a8 <RCC_SetFlashLatencyFromMSIRange>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e3ba      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f0a:	4b73      	ldr	r3, [pc, #460]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a72      	ldr	r2, [pc, #456]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f10:	f043 0308 	orr.w	r3, r3, #8
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4b70      	ldr	r3, [pc, #448]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	496d      	ldr	r1, [pc, #436]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f28:	4b6b      	ldr	r3, [pc, #428]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	4968      	ldr	r1, [pc, #416]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
 8001f3c:	e025      	b.n	8001f8a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f3e:	4b66      	ldr	r3, [pc, #408]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a65      	ldr	r2, [pc, #404]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b63      	ldr	r3, [pc, #396]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4960      	ldr	r1, [pc, #384]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f5c:	4b5e      	ldr	r3, [pc, #376]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	495b      	ldr	r1, [pc, #364]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fd14 	bl	80029a8 <RCC_SetFlashLatencyFromMSIRange>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e37a      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f8a:	f000 fc81 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	4b51      	ldr	r3, [pc, #324]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	4950      	ldr	r1, [pc, #320]	; (80020dc <HAL_RCC_OscConfig+0x274>)
 8001f9c:	5ccb      	ldrb	r3, [r1, r3]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa6:	4a4e      	ldr	r2, [pc, #312]	; (80020e0 <HAL_RCC_OscConfig+0x278>)
 8001fa8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001faa:	4b4e      	ldr	r3, [pc, #312]	; (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fdb4 	bl	8001b1c <HAL_InitTick>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d052      	beq.n	8002064 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	e35e      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d032      	beq.n	8002030 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fca:	4b43      	ldr	r3, [pc, #268]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a42      	ldr	r2, [pc, #264]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fdf1 	bl	8001bbc <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fde:	f7ff fded 	bl	8001bbc <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e347      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ff0:	4b39      	ldr	r3, [pc, #228]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ffc:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a35      	ldr	r2, [pc, #212]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002002:	f043 0308 	orr.w	r3, r3, #8
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4930      	ldr	r1, [pc, #192]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800201a:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	492b      	ldr	r1, [pc, #172]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
 800202e:	e01a      	b.n	8002066 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002030:	4b29      	ldr	r3, [pc, #164]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a28      	ldr	r2, [pc, #160]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002036:	f023 0301 	bic.w	r3, r3, #1
 800203a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800203c:	f7ff fdbe 	bl	8001bbc <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002044:	f7ff fdba 	bl	8001bbc <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e314      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x1dc>
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002064:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d073      	beq.n	800215a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	2b08      	cmp	r3, #8
 8002076:	d005      	beq.n	8002084 <HAL_RCC_OscConfig+0x21c>
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2b0c      	cmp	r3, #12
 800207c:	d10e      	bne.n	800209c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d10b      	bne.n	800209c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d063      	beq.n	8002158 <HAL_RCC_OscConfig+0x2f0>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d15f      	bne.n	8002158 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e2f1      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	d106      	bne.n	80020b4 <HAL_RCC_OscConfig+0x24c>
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e025      	b.n	8002100 <HAL_RCC_OscConfig+0x298>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020bc:	d114      	bne.n	80020e8 <HAL_RCC_OscConfig+0x280>
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a02      	ldr	r2, [pc, #8]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e013      	b.n	8002100 <HAL_RCC_OscConfig+0x298>
 80020d8:	40021000 	.word	0x40021000
 80020dc:	08002ad8 	.word	0x08002ad8
 80020e0:	20000004 	.word	0x20000004
 80020e4:	20000008 	.word	0x20000008
 80020e8:	4ba0      	ldr	r3, [pc, #640]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a9f      	ldr	r2, [pc, #636]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b9d      	ldr	r3, [pc, #628]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a9c      	ldr	r2, [pc, #624]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80020fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d013      	beq.n	8002130 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7ff fd58 	bl	8001bbc <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fd54 	bl	8001bbc <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e2ae      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002122:	4b92      	ldr	r3, [pc, #584]	; (800236c <HAL_RCC_OscConfig+0x504>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x2a8>
 800212e:	e014      	b.n	800215a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7ff fd44 	bl	8001bbc <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002138:	f7ff fd40 	bl	8001bbc <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	; 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e29a      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800214a:	4b88      	ldr	r3, [pc, #544]	; (800236c <HAL_RCC_OscConfig+0x504>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x2d0>
 8002156:	e000      	b.n	800215a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d060      	beq.n	8002228 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d005      	beq.n	8002178 <HAL_RCC_OscConfig+0x310>
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d119      	bne.n	80021a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d116      	bne.n	80021a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002178:	4b7c      	ldr	r3, [pc, #496]	; (800236c <HAL_RCC_OscConfig+0x504>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_OscConfig+0x328>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e277      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4b76      	ldr	r3, [pc, #472]	; (800236c <HAL_RCC_OscConfig+0x504>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	4973      	ldr	r1, [pc, #460]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021a4:	e040      	b.n	8002228 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d023      	beq.n	80021f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ae:	4b6f      	ldr	r3, [pc, #444]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6e      	ldr	r2, [pc, #440]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ba:	f7ff fcff 	bl	8001bbc <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c2:	f7ff fcfb 	bl	8001bbc <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e255      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d4:	4b65      	ldr	r3, [pc, #404]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e0:	4b62      	ldr	r3, [pc, #392]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	061b      	lsls	r3, r3, #24
 80021ee:	495f      	ldr	r1, [pc, #380]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
 80021f4:	e018      	b.n	8002228 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f6:	4b5d      	ldr	r3, [pc, #372]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a5c      	ldr	r2, [pc, #368]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80021fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7ff fcdb 	bl	8001bbc <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220a:	f7ff fcd7 	bl	8001bbc <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e231      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800221c:	4b53      	ldr	r3, [pc, #332]	; (800236c <HAL_RCC_OscConfig+0x504>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f0      	bne.n	800220a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d03c      	beq.n	80022ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01c      	beq.n	8002276 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223c:	4b4b      	ldr	r3, [pc, #300]	; (800236c <HAL_RCC_OscConfig+0x504>)
 800223e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002242:	4a4a      	ldr	r2, [pc, #296]	; (800236c <HAL_RCC_OscConfig+0x504>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7ff fcb6 	bl	8001bbc <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002254:	f7ff fcb2 	bl	8001bbc <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e20c      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002266:	4b41      	ldr	r3, [pc, #260]	; (800236c <HAL_RCC_OscConfig+0x504>)
 8002268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ef      	beq.n	8002254 <HAL_RCC_OscConfig+0x3ec>
 8002274:	e01b      	b.n	80022ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002276:	4b3d      	ldr	r3, [pc, #244]	; (800236c <HAL_RCC_OscConfig+0x504>)
 8002278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227c:	4a3b      	ldr	r2, [pc, #236]	; (800236c <HAL_RCC_OscConfig+0x504>)
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002286:	f7ff fc99 	bl	8001bbc <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228e:	f7ff fc95 	bl	8001bbc <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e1ef      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022a0:	4b32      	ldr	r3, [pc, #200]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80022a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1ef      	bne.n	800228e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80a6 	beq.w	8002408 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022c0:	4b2a      	ldr	r3, [pc, #168]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10d      	bne.n	80022e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	4b27      	ldr	r3, [pc, #156]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d0:	4a26      	ldr	r2, [pc, #152]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d6:	6593      	str	r3, [r2, #88]	; 0x58
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e4:	2301      	movs	r3, #1
 80022e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e8:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_RCC_OscConfig+0x508>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d118      	bne.n	8002326 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f4:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <HAL_RCC_OscConfig+0x508>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1d      	ldr	r2, [pc, #116]	; (8002370 <HAL_RCC_OscConfig+0x508>)
 80022fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002300:	f7ff fc5c 	bl	8001bbc <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002308:	f7ff fc58 	bl	8001bbc <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1b2      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_RCC_OscConfig+0x508>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d108      	bne.n	8002340 <HAL_RCC_OscConfig+0x4d8>
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <HAL_RCC_OscConfig+0x504>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002334:	4a0d      	ldr	r2, [pc, #52]	; (800236c <HAL_RCC_OscConfig+0x504>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800233e:	e029      	b.n	8002394 <HAL_RCC_OscConfig+0x52c>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b05      	cmp	r3, #5
 8002346:	d115      	bne.n	8002374 <HAL_RCC_OscConfig+0x50c>
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_RCC_OscConfig+0x504>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234e:	4a07      	ldr	r2, [pc, #28]	; (800236c <HAL_RCC_OscConfig+0x504>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002358:	4b04      	ldr	r3, [pc, #16]	; (800236c <HAL_RCC_OscConfig+0x504>)
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235e:	4a03      	ldr	r2, [pc, #12]	; (800236c <HAL_RCC_OscConfig+0x504>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002368:	e014      	b.n	8002394 <HAL_RCC_OscConfig+0x52c>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	40007000 	.word	0x40007000
 8002374:	4b9a      	ldr	r3, [pc, #616]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	4a99      	ldr	r2, [pc, #612]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002384:	4b96      	ldr	r3, [pc, #600]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	4a95      	ldr	r2, [pc, #596]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 800238c:	f023 0304 	bic.w	r3, r3, #4
 8002390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d016      	beq.n	80023ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239c:	f7ff fc0e 	bl	8001bbc <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a4:	f7ff fc0a 	bl	8001bbc <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e162      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ba:	4b89      	ldr	r3, [pc, #548]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ed      	beq.n	80023a4 <HAL_RCC_OscConfig+0x53c>
 80023c8:	e015      	b.n	80023f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ca:	f7ff fbf7 	bl	8001bbc <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7ff fbf3 	bl	8001bbc <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e14b      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023e8:	4b7d      	ldr	r3, [pc, #500]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1ed      	bne.n	80023d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023f6:	7ffb      	ldrb	r3, [r7, #31]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d105      	bne.n	8002408 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fc:	4b78      	ldr	r3, [pc, #480]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 80023fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002400:	4a77      	ldr	r2, [pc, #476]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 8002402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002406:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b00      	cmp	r3, #0
 8002412:	d03c      	beq.n	800248e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01c      	beq.n	8002456 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800241c:	4b70      	ldr	r3, [pc, #448]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 800241e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002422:	4a6f      	ldr	r2, [pc, #444]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7ff fbc6 	bl	8001bbc <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002434:	f7ff fbc2 	bl	8001bbc <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e11c      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002446:	4b66      	ldr	r3, [pc, #408]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 8002448:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ef      	beq.n	8002434 <HAL_RCC_OscConfig+0x5cc>
 8002454:	e01b      	b.n	800248e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002456:	4b62      	ldr	r3, [pc, #392]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 8002458:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800245c:	4a60      	ldr	r2, [pc, #384]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7ff fba9 	bl	8001bbc <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800246e:	f7ff fba5 	bl	8001bbc <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0ff      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002480:	4b57      	ldr	r3, [pc, #348]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 8002482:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1ef      	bne.n	800246e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80f3 	beq.w	800267e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	2b02      	cmp	r3, #2
 800249e:	f040 80c9 	bne.w	8002634 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024a2:	4b4f      	ldr	r3, [pc, #316]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0203 	and.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d12c      	bne.n	8002510 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	3b01      	subs	r3, #1
 80024c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d123      	bne.n	8002510 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d11b      	bne.n	8002510 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d113      	bne.n	8002510 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	085b      	lsrs	r3, r3, #1
 80024f4:	3b01      	subs	r3, #1
 80024f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d109      	bne.n	8002510 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	085b      	lsrs	r3, r3, #1
 8002508:	3b01      	subs	r3, #1
 800250a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d06b      	beq.n	80025e8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d062      	beq.n	80025dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002516:	4b32      	ldr	r3, [pc, #200]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0ac      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002526:	4b2e      	ldr	r3, [pc, #184]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a2d      	ldr	r2, [pc, #180]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 800252c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002530:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002532:	f7ff fb43 	bl	8001bbc <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7ff fb3f 	bl	8001bbc <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e099      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800254c:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f0      	bne.n	800253a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002558:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <HAL_RCC_OscConfig+0x77c>)
 800255e:	4013      	ands	r3, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002568:	3a01      	subs	r2, #1
 800256a:	0112      	lsls	r2, r2, #4
 800256c:	4311      	orrs	r1, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002572:	0212      	lsls	r2, r2, #8
 8002574:	4311      	orrs	r1, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800257a:	0852      	lsrs	r2, r2, #1
 800257c:	3a01      	subs	r2, #1
 800257e:	0552      	lsls	r2, r2, #21
 8002580:	4311      	orrs	r1, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002586:	0852      	lsrs	r2, r2, #1
 8002588:	3a01      	subs	r2, #1
 800258a:	0652      	lsls	r2, r2, #25
 800258c:	4311      	orrs	r1, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002592:	06d2      	lsls	r2, r2, #27
 8002594:	430a      	orrs	r2, r1
 8002596:	4912      	ldr	r1, [pc, #72]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 8002598:	4313      	orrs	r3, r2
 800259a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 80025a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 80025ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025b4:	f7ff fb02 	bl	8001bbc <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025bc:	f7ff fafe 	bl	8001bbc <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e058      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ce:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <HAL_RCC_OscConfig+0x778>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025da:	e050      	b.n	800267e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e04f      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
 80025e0:	40021000 	.word	0x40021000
 80025e4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e8:	4b27      	ldr	r3, [pc, #156]	; (8002688 <HAL_RCC_OscConfig+0x820>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d144      	bne.n	800267e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025f4:	4b24      	ldr	r3, [pc, #144]	; (8002688 <HAL_RCC_OscConfig+0x820>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a23      	ldr	r2, [pc, #140]	; (8002688 <HAL_RCC_OscConfig+0x820>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002600:	4b21      	ldr	r3, [pc, #132]	; (8002688 <HAL_RCC_OscConfig+0x820>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a20      	ldr	r2, [pc, #128]	; (8002688 <HAL_RCC_OscConfig+0x820>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800260a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800260c:	f7ff fad6 	bl	8001bbc <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7ff fad2 	bl	8001bbc <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e02c      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <HAL_RCC_OscConfig+0x820>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x7ac>
 8002632:	e024      	b.n	800267e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d01f      	beq.n	800267a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <HAL_RCC_OscConfig+0x820>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <HAL_RCC_OscConfig+0x820>)
 8002640:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7ff fab9 	bl	8001bbc <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264e:	f7ff fab5 	bl	8001bbc <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e00f      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_RCC_OscConfig+0x820>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f0      	bne.n	800264e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_RCC_OscConfig+0x820>)
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	4905      	ldr	r1, [pc, #20]	; (8002688 <HAL_RCC_OscConfig+0x820>)
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_OscConfig+0x824>)
 8002674:	4013      	ands	r3, r2
 8002676:	60cb      	str	r3, [r1, #12]
 8002678:	e001      	b.n	800267e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3720      	adds	r7, #32
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000
 800268c:	feeefffc 	.word	0xfeeefffc

08002690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0e7      	b.n	8002874 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a4:	4b75      	ldr	r3, [pc, #468]	; (800287c <HAL_RCC_ClockConfig+0x1ec>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d910      	bls.n	80026d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b72      	ldr	r3, [pc, #456]	; (800287c <HAL_RCC_ClockConfig+0x1ec>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 0207 	bic.w	r2, r3, #7
 80026ba:	4970      	ldr	r1, [pc, #448]	; (800287c <HAL_RCC_ClockConfig+0x1ec>)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b6e      	ldr	r3, [pc, #440]	; (800287c <HAL_RCC_ClockConfig+0x1ec>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0cf      	b.n	8002874 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d010      	beq.n	8002702 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	4b66      	ldr	r3, [pc, #408]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d908      	bls.n	8002702 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f0:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	4960      	ldr	r1, [pc, #384]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d04c      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b03      	cmp	r3, #3
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002716:	4b5a      	ldr	r3, [pc, #360]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d121      	bne.n	8002766 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e0a6      	b.n	8002874 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800272e:	4b54      	ldr	r3, [pc, #336]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d115      	bne.n	8002766 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e09a      	b.n	8002874 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002746:	4b4e      	ldr	r3, [pc, #312]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e08e      	b.n	8002874 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002756:	4b4a      	ldr	r3, [pc, #296]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e086      	b.n	8002874 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002766:	4b46      	ldr	r3, [pc, #280]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4943      	ldr	r1, [pc, #268]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 8002774:	4313      	orrs	r3, r2
 8002776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002778:	f7ff fa20 	bl	8001bbc <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	e00a      	b.n	8002796 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002780:	f7ff fa1c 	bl	8001bbc <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e06e      	b.n	8002874 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	4b3a      	ldr	r3, [pc, #232]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 020c 	and.w	r2, r3, #12
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1eb      	bne.n	8002780 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d010      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	4b31      	ldr	r3, [pc, #196]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d208      	bcs.n	80027d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c4:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	492b      	ldr	r1, [pc, #172]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027d6:	4b29      	ldr	r3, [pc, #164]	; (800287c <HAL_RCC_ClockConfig+0x1ec>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d210      	bcs.n	8002806 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e4:	4b25      	ldr	r3, [pc, #148]	; (800287c <HAL_RCC_ClockConfig+0x1ec>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 0207 	bic.w	r2, r3, #7
 80027ec:	4923      	ldr	r1, [pc, #140]	; (800287c <HAL_RCC_ClockConfig+0x1ec>)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <HAL_RCC_ClockConfig+0x1ec>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d001      	beq.n	8002806 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e036      	b.n	8002874 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002812:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	4918      	ldr	r1, [pc, #96]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d009      	beq.n	8002844 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4910      	ldr	r1, [pc, #64]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 8002840:	4313      	orrs	r3, r2
 8002842:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002844:	f000 f824 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <HAL_RCC_ClockConfig+0x1f0>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	490b      	ldr	r1, [pc, #44]	; (8002884 <HAL_RCC_ClockConfig+0x1f4>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
 8002860:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1f8>)
 8002862:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1fc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff f957 	bl	8001b1c <HAL_InitTick>
 800286e:	4603      	mov	r3, r0
 8002870:	72fb      	strb	r3, [r7, #11]

  return status;
 8002872:	7afb      	ldrb	r3, [r7, #11]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40022000 	.word	0x40022000
 8002880:	40021000 	.word	0x40021000
 8002884:	08002ad8 	.word	0x08002ad8
 8002888:	20000004 	.word	0x20000004
 800288c:	20000008 	.word	0x20000008

08002890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	; 0x24
 8002894:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289e:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a8:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_RCC_GetSysClockFreq+0x108>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x34>
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d121      	bne.n	8002902 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d11e      	bne.n	8002902 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028c4:	4b34      	ldr	r3, [pc, #208]	; (8002998 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028d0:	4b31      	ldr	r3, [pc, #196]	; (8002998 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	e005      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028e0:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028ec:	4a2b      	ldr	r2, [pc, #172]	; (800299c <HAL_RCC_GetSysClockFreq+0x10c>)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10d      	bne.n	8002918 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b04      	cmp	r3, #4
 8002906:	d102      	bne.n	800290e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	e004      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d101      	bne.n	8002918 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002916:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d134      	bne.n	8002988 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800291e:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <HAL_RCC_GetSysClockFreq+0x108>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d003      	beq.n	8002936 <HAL_RCC_GetSysClockFreq+0xa6>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b03      	cmp	r3, #3
 8002932:	d003      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0xac>
 8002934:	e005      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002936:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002938:	617b      	str	r3, [r7, #20]
      break;
 800293a:	e005      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800293e:	617b      	str	r3, [r7, #20]
      break;
 8002940:	e002      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	617b      	str	r3, [r7, #20]
      break;
 8002946:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002948:	4b13      	ldr	r3, [pc, #76]	; (8002998 <HAL_RCC_GetSysClockFreq+0x108>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	3301      	adds	r3, #1
 8002954:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <HAL_RCC_GetSysClockFreq+0x108>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	fb03 f202 	mul.w	r2, r3, r2
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_RCC_GetSysClockFreq+0x108>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	0e5b      	lsrs	r3, r3, #25
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	3301      	adds	r3, #1
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002988:	69bb      	ldr	r3, [r7, #24]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3724      	adds	r7, #36	; 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	08002ae8 	.word	0x08002ae8
 80029a0:	00f42400 	.word	0x00f42400
 80029a4:	007a1200 	.word	0x007a1200

080029a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029b0:	2300      	movs	r3, #0
 80029b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029b4:	4b2a      	ldr	r3, [pc, #168]	; (8002a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029c0:	f7ff f9ee 	bl	8001da0 <HAL_PWREx_GetVoltageRange>
 80029c4:	6178      	str	r0, [r7, #20]
 80029c6:	e014      	b.n	80029f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029c8:	4b25      	ldr	r3, [pc, #148]	; (8002a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	4a24      	ldr	r2, [pc, #144]	; (8002a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d2:	6593      	str	r3, [r2, #88]	; 0x58
 80029d4:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029e0:	f7ff f9de 	bl	8001da0 <HAL_PWREx_GetVoltageRange>
 80029e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029e6:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ea:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f8:	d10b      	bne.n	8002a12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b80      	cmp	r3, #128	; 0x80
 80029fe:	d919      	bls.n	8002a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2ba0      	cmp	r3, #160	; 0xa0
 8002a04:	d902      	bls.n	8002a0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a06:	2302      	movs	r3, #2
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	e013      	b.n	8002a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	e010      	b.n	8002a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b80      	cmp	r3, #128	; 0x80
 8002a16:	d902      	bls.n	8002a1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a18:	2303      	movs	r3, #3
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	e00a      	b.n	8002a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b80      	cmp	r3, #128	; 0x80
 8002a22:	d102      	bne.n	8002a2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a24:	2302      	movs	r3, #2
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	e004      	b.n	8002a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b70      	cmp	r3, #112	; 0x70
 8002a2e:	d101      	bne.n	8002a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a30:	2301      	movs	r3, #1
 8002a32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f023 0207 	bic.w	r2, r3, #7
 8002a3c:	4909      	ldr	r1, [pc, #36]	; (8002a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a44:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d001      	beq.n	8002a56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40022000 	.word	0x40022000

08002a68 <memset>:
 8002a68:	4402      	add	r2, r0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d100      	bne.n	8002a72 <memset+0xa>
 8002a70:	4770      	bx	lr
 8002a72:	f803 1b01 	strb.w	r1, [r3], #1
 8002a76:	e7f9      	b.n	8002a6c <memset+0x4>

08002a78 <__libc_init_array>:
 8002a78:	b570      	push	{r4, r5, r6, lr}
 8002a7a:	4d0d      	ldr	r5, [pc, #52]	; (8002ab0 <__libc_init_array+0x38>)
 8002a7c:	4c0d      	ldr	r4, [pc, #52]	; (8002ab4 <__libc_init_array+0x3c>)
 8002a7e:	1b64      	subs	r4, r4, r5
 8002a80:	10a4      	asrs	r4, r4, #2
 8002a82:	2600      	movs	r6, #0
 8002a84:	42a6      	cmp	r6, r4
 8002a86:	d109      	bne.n	8002a9c <__libc_init_array+0x24>
 8002a88:	4d0b      	ldr	r5, [pc, #44]	; (8002ab8 <__libc_init_array+0x40>)
 8002a8a:	4c0c      	ldr	r4, [pc, #48]	; (8002abc <__libc_init_array+0x44>)
 8002a8c:	f000 f818 	bl	8002ac0 <_init>
 8002a90:	1b64      	subs	r4, r4, r5
 8002a92:	10a4      	asrs	r4, r4, #2
 8002a94:	2600      	movs	r6, #0
 8002a96:	42a6      	cmp	r6, r4
 8002a98:	d105      	bne.n	8002aa6 <__libc_init_array+0x2e>
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa0:	4798      	blx	r3
 8002aa2:	3601      	adds	r6, #1
 8002aa4:	e7ee      	b.n	8002a84 <__libc_init_array+0xc>
 8002aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aaa:	4798      	blx	r3
 8002aac:	3601      	adds	r6, #1
 8002aae:	e7f2      	b.n	8002a96 <__libc_init_array+0x1e>
 8002ab0:	08002b18 	.word	0x08002b18
 8002ab4:	08002b18 	.word	0x08002b18
 8002ab8:	08002b18 	.word	0x08002b18
 8002abc:	08002b1c 	.word	0x08002b1c

08002ac0 <_init>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr

08002acc <_fini>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	bf00      	nop
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr
