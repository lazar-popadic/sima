
Simeon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a10  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08001b9c  08001b9c  00011b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dec  08001dec  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001dec  08001dec  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001dec  08001dec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dec  08001dec  00011dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001df0  08001df0  00011df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000010  08001e04  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08001e04  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000050de  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001461  00000000  00000000  00025161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000618  00000000  00000000  000265c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000462  00000000  00000000  00026be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e94d  00000000  00000000  00027042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007e40  00000000  00000000  0004598f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5e79  00000000  00000000  0004d7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001560  00000000  00000000  00103648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00104ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001b84 	.word	0x08001b84

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08001b84 	.word	0x08001b84

080001cc <xl_angle_move>:
}


void
xl_angle_move (uint8_t id, uint16_t angle)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	460a      	mov	r2, r1
 80001d6:	71fb      	strb	r3, [r7, #7]
 80001d8:	4613      	mov	r3, r2
 80001da:	80bb      	strh	r3, [r7, #4]

	  uint8_t xl_move[14] =
 80001dc:	23ff      	movs	r3, #255	; 0xff
 80001de:	733b      	strb	r3, [r7, #12]
 80001e0:	23ff      	movs	r3, #255	; 0xff
 80001e2:	737b      	strb	r3, [r7, #13]
 80001e4:	23fd      	movs	r3, #253	; 0xfd
 80001e6:	73bb      	strb	r3, [r7, #14]
 80001e8:	2300      	movs	r3, #0
 80001ea:	73fb      	strb	r3, [r7, #15]
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	743b      	strb	r3, [r7, #16]
 80001f0:	2307      	movs	r3, #7
 80001f2:	747b      	strb	r3, [r7, #17]
 80001f4:	2300      	movs	r3, #0
 80001f6:	74bb      	strb	r3, [r7, #18]
 80001f8:	2303      	movs	r3, #3
 80001fa:	74fb      	strb	r3, [r7, #19]
 80001fc:	231e      	movs	r3, #30
 80001fe:	753b      	strb	r3, [r7, #20]
 8000200:	2300      	movs	r3, #0
 8000202:	757b      	strb	r3, [r7, #21]
	    { 0xff, 0xff, 0xfd, 0x00, id, 0x07, 0x00, 0x03, 0x1e, 0x00,
	    		DXL_LOBYTE(angle), DXL_HIBYTE(angle), 0x00, 0x00};
 8000204:	88bb      	ldrh	r3, [r7, #4]
 8000206:	b2db      	uxtb	r3, r3
	  uint8_t xl_move[14] =
 8000208:	75bb      	strb	r3, [r7, #22]
	    		DXL_LOBYTE(angle), DXL_HIBYTE(angle), 0x00, 0x00};
 800020a:	88bb      	ldrh	r3, [r7, #4]
 800020c:	0a1b      	lsrs	r3, r3, #8
 800020e:	b29b      	uxth	r3, r3
 8000210:	b2db      	uxtb	r3, r3
	  uint8_t xl_move[14] =
 8000212:	75fb      	strb	r3, [r7, #23]
 8000214:	2300      	movs	r3, #0
 8000216:	763b      	strb	r3, [r7, #24]
 8000218:	2300      	movs	r3, #0
 800021a:	767b      	strb	r3, [r7, #25]

	  uint16_t crc16;

	  crc16 = update_crc (0, xl_move, 12);
 800021c:	f107 030c 	add.w	r3, r7, #12
 8000220:	220c      	movs	r2, #12
 8000222:	4619      	mov	r1, r3
 8000224:	2000      	movs	r0, #0
 8000226:	f000 f821 	bl	800026c <update_crc>
 800022a:	4603      	mov	r3, r0
 800022c:	83bb      	strh	r3, [r7, #28]
	  xl_move[12] = DXL_LOBYTE(crc16); //crc_l
 800022e:	8bbb      	ldrh	r3, [r7, #28]
 8000230:	b2db      	uxtb	r3, r3
 8000232:	763b      	strb	r3, [r7, #24]
	  xl_move[13] = DXL_HIBYTE(crc16); //crc_h
 8000234:	8bbb      	ldrh	r3, [r7, #28]
 8000236:	0a1b      	lsrs	r3, r3, #8
 8000238:	b29b      	uxth	r3, r3
 800023a:	b2db      	uxtb	r3, r3
 800023c:	767b      	strb	r3, [r7, #25]

	  for (uint8_t i = 0; i < 14; i++)
 800023e:	2300      	movs	r3, #0
 8000240:	77fb      	strb	r3, [r7, #31]
 8000242:	e00a      	b.n	800025a <xl_angle_move+0x8e>
	    {
	      UART_send_byte (xl_move[i]);
 8000244:	7ffb      	ldrb	r3, [r7, #31]
 8000246:	3320      	adds	r3, #32
 8000248:	443b      	add	r3, r7
 800024a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800024e:	4618      	mov	r0, r3
 8000250:	f000 fb00 	bl	8000854 <UART_send_byte>
	  for (uint8_t i = 0; i < 14; i++)
 8000254:	7ffb      	ldrb	r3, [r7, #31]
 8000256:	3301      	adds	r3, #1
 8000258:	77fb      	strb	r3, [r7, #31]
 800025a:	7ffb      	ldrb	r3, [r7, #31]
 800025c:	2b0d      	cmp	r3, #13
 800025e:	d9f1      	bls.n	8000244 <xl_angle_move+0x78>
	    }
}
 8000260:	bf00      	nop
 8000262:	bf00      	nop
 8000264:	3720      	adds	r7, #32
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <update_crc>:

uint16_t
update_crc (uint16_t crc_accum, unsigned char *data_blk_ptr,
	    uint16_t data_blk_size)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000272:	af00      	add	r7, sp, #0
 8000274:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000278:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800027c:	6019      	str	r1, [r3, #0]
 800027e:	4611      	mov	r1, r2
 8000280:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000284:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000288:	4602      	mov	r2, r0
 800028a:	801a      	strh	r2, [r3, #0]
 800028c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000290:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000294:	460a      	mov	r2, r1
 8000296:	801a      	strh	r2, [r3, #0]
	uint16_t i, j;

		uint16_t crc_table[256] = {
 8000298:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800029c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80002a0:	4a28      	ldr	r2, [pc, #160]	; (8000344 <update_crc+0xd8>)
 80002a2:	4618      	mov	r0, r3
 80002a4:	4611      	mov	r1, r2
 80002a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002aa:	461a      	mov	r2, r3
 80002ac:	f001 fc5c 	bl	8001b68 <memcpy>

		};



		for(j = 0; j < data_blk_size; j++)
 80002b0:	2300      	movs	r3, #0
 80002b2:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 80002b6:	e031      	b.n	800031c <update_crc+0xb0>

		{

			i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 80002b8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80002bc:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80002c0:	881b      	ldrh	r3, [r3, #0]
 80002c2:	0a1b      	lsrs	r3, r3, #8
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80002ca:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80002ce:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 80002d2:	6809      	ldr	r1, [r1, #0]
 80002d4:	440b      	add	r3, r1
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	4053      	eors	r3, r2
 80002dc:	b29b      	uxth	r3, r3
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c

			crc_accum = (crc_accum << 8) ^ crc_table[i];
 80002e4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80002e8:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	021b      	lsls	r3, r3, #8
 80002f0:	b21a      	sxth	r2, r3
 80002f2:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 80002f6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80002fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80002fe:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000302:	b21b      	sxth	r3, r3
 8000304:	4053      	eors	r3, r2
 8000306:	b21a      	sxth	r2, r3
 8000308:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800030c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000310:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < data_blk_size; j++)
 8000312:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000316:	3301      	adds	r3, #1
 8000318:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800031c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000320:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000324:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	429a      	cmp	r2, r3
 800032c:	d3c4      	bcc.n	80002b8 <update_crc+0x4c>

		}



		return crc_accum;
 800032e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000332:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000336:	881b      	ldrh	r3, [r3, #0]
}
 8000338:	4618      	mov	r0, r3
 800033a:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	08001b9c 	.word	0x08001b9c

08000348 <sensor_Init>:
//portC
uint8_t infra_1 = 14;

void
sensor_Init()
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
sensor_IO_init();
 800034c:	f000 f802 	bl	8000354 <sensor_IO_init>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}

08000354 <sensor_IO_init>:

void
sensor_IO_init()
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (0b1 << 2); //takt za gpioC
 8000358:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <sensor_IO_init+0x34>)
 800035a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035c:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <sensor_IO_init+0x34>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOC-> MODER &= ~(0b11 << 2* infra_1);  //PC14
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <sensor_IO_init+0x38>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a09      	ldr	r2, [pc, #36]	; (8000390 <sensor_IO_init+0x3c>)
 800036a:	7812      	ldrb	r2, [r2, #0]
 800036c:	0052      	lsls	r2, r2, #1
 800036e:	2103      	movs	r1, #3
 8000370:	fa01 f202 	lsl.w	r2, r1, r2
 8000374:	43d2      	mvns	r2, r2
 8000376:	4611      	mov	r1, r2
 8000378:	4a04      	ldr	r2, [pc, #16]	; (800038c <sensor_IO_init+0x38>)
 800037a:	400b      	ands	r3, r1
 800037c:	6013      	str	r3, [r2, #0]
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000
 800038c:	48000800 	.word	0x48000800
 8000390:	20000000 	.word	0x20000000

08000394 <io>:
static void
portA_init();

void
io ()
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  portB_init ();
 8000398:	f000 f804 	bl	80003a4 <portB_init>
  portA_init();
 800039c:	f000 f832 	bl	8000404 <portA_init>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <portB_init>:

static void
portB_init()
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (0b1 << 1);
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <portB_init+0x58>)
 80003aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ac:	4a13      	ldr	r2, [pc, #76]	; (80003fc <portB_init+0x58>)
 80003ae:	f043 0302 	orr.w	r3, r3, #2
 80003b2:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB->MODER &= ~(0b11 << 2 * 3);
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <portB_init+0x5c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a11      	ldr	r2, [pc, #68]	; (8000400 <portB_init+0x5c>)
 80003ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80003be:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << 2 * 3);
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <portB_init+0x5c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <portB_init+0x5c>)
 80003c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ca:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(0b1 << 3);
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <portB_init+0x5c>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <portB_init+0x5c>)
 80003d2:	f023 0308 	bic.w	r3, r3, #8
 80003d6:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (0b11 << 2 * 3);
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <portB_init+0x5c>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	4a08      	ldr	r2, [pc, #32]	; (8000400 <portB_init+0x5c>)
 80003de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80003e2:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~(0b11 << 2 * 3);
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <portB_init+0x5c>)
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	4a05      	ldr	r2, [pc, #20]	; (8000400 <portB_init+0x5c>)
 80003ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80003ee:	60d3      	str	r3, [r2, #12]
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000
 8000400:	48000400 	.word	0x48000400

08000404 <portA_init>:

static void
portA_init()
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (0b1 << 0);
 8000408:	4b20      	ldr	r3, [pc, #128]	; (800048c <portA_init+0x88>)
 800040a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040c:	4a1f      	ldr	r2, [pc, #124]	; (800048c <portA_init+0x88>)
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOA->MODER &= ~(0b11 << 2 * CINC);
 8000414:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2207      	movs	r2, #7
 800041c:	0052      	lsls	r2, r2, #1
 800041e:	2103      	movs	r1, #3
 8000420:	fa01 f202 	lsl.w	r2, r1, r2
 8000424:	43d2      	mvns	r2, r2
 8000426:	4611      	mov	r1, r2
 8000428:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800042c:	400b      	ands	r3, r1
 800042e:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * CINC); //low speed
 8000430:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	2207      	movs	r2, #7
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	2103      	movs	r1, #3
 800043c:	fa01 f202 	lsl.w	r2, r1, r2
 8000440:	43d2      	mvns	r2, r2
 8000442:	4611      	mov	r1, r2
 8000444:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000448:	400b      	ands	r3, r1
 800044a:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 *CINC);
 800044c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000450:	68db      	ldr	r3, [r3, #12]
 8000452:	2207      	movs	r2, #7
 8000454:	0052      	lsls	r2, r2, #1
 8000456:	2103      	movs	r1, #3
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	43d2      	mvns	r2, r2
 800045e:	4611      	mov	r1, r2
 8000460:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000464:	400b      	ands	r3, r1
 8000466:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2*CINC);
 8000468:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	2207      	movs	r2, #7
 8000470:	0052      	lsls	r2, r2, #1
 8000472:	2102      	movs	r1, #2
 8000474:	fa01 f202 	lsl.w	r2, r1, r2
 8000478:	4611      	mov	r1, r2
 800047a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800047e:	430b      	orrs	r3, r1
 8000480:	60d3      	str	r3, [r2, #12]
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	40021000 	.word	0x40021000

08000490 <tajmer_init>:
extern uint8_t previous_tactic_state;
extern uint8_t tactic_state;

void
tajmer_init()
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
 tim2_init();
 8000494:	f000 f802 	bl	800049c <tim2_init>
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}

0800049c <tim2_init>:

static void
tim2_init()
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= (0b1 << 0);
 80004a2:	4b2c      	ldr	r3, [pc, #176]	; (8000554 <tim2_init+0xb8>)
 80004a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004a6:	4a2b      	ldr	r2, [pc, #172]	; (8000554 <tim2_init+0xb8>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6593      	str	r3, [r2, #88]	; 0x58

	TIM2-> PSC = 80-1; //80MHz -> 1MHz
 80004ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004b2:	224f      	movs	r2, #79	; 0x4f
 80004b4:	629a      	str	r2, [r3, #40]	; 0x28

	TIM2-> ARR = 1000-1; //1MHz -> 1kHz
 80004b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004be:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 &= ~((0b1 << 1) || (0b1 << 2));
 80004c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ca:	f023 0301 	bic.w	r3, r3, #1
 80004ce:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= (0b1 << 0);
 80004d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	6153      	str	r3, [r2, #20]

	TIM2->DIER |= (0b1 << 0);
 80004e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	60d3      	str	r3, [r2, #12]

	while (!(TIM2->SR & (0b1 << 0)));
 80004f0:	bf00      	nop
 80004f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f6:	691b      	ldr	r3, [r3, #16]
 80004f8:	f003 0301 	and.w	r3, r3, #1
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0f8      	beq.n	80004f2 <tim2_init+0x56>

	TIM2->SR &= ~(0b1 << 0);
 8000500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000504:	691b      	ldr	r3, [r3, #16]
 8000506:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800050a:	f023 0301 	bic.w	r3, r3, #1
 800050e:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= (0b1 << 2);
 8000510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800051a:	f043 0304 	orr.w	r3, r3, #4
 800051e:	6013      	str	r3, [r2, #0]

	uint8_t const TIM2_PREKID = 28;
 8000520:	231c      	movs	r3, #28
 8000522:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[0] |= (0b1 << TIM2_PREKID);
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <tim2_init+0xbc>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	79fa      	ldrb	r2, [r7, #7]
 800052a:	2101      	movs	r1, #1
 800052c:	fa01 f202 	lsl.w	r2, r1, r2
 8000530:	4611      	mov	r1, r2
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <tim2_init+0xbc>)
 8000534:	430b      	orrs	r3, r1
 8000536:	6013      	str	r3, [r2, #0]

	TIM2->CR1 |= (0b1 << 0);
 8000538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000
 8000558:	e000e100 	.word	0xe000e100

0800055c <TajmerDelay>:
    return false;
  flag_delay = true;
  return true;
}

void TajmerDelay(uint32_t ms) {
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	uint32_t PocVreme = sys_time_ms;
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <TajmerDelay+0x30>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	60fb      	str	r3, [r7, #12]
	while (sys_time_ms <= PocVreme + ms) {
 800056a:	e000      	b.n	800056e <TajmerDelay+0x12>
		__NOP();
 800056c:	bf00      	nop
	while (sys_time_ms <= PocVreme + ms) {
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	441a      	add	r2, r3
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <TajmerDelay+0x30>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	429a      	cmp	r2, r3
 800057a:	d2f7      	bcs.n	800056c <TajmerDelay+0x10>
	}

}
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	2000002c 	.word	0x2000002c

08000590 <TIM2_IRQHandler>:

void
TIM2_IRQHandler ()
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  // poziva se svake milisekunde
  // proveri da li je stvarno TIM2 pozvao rutinu
  if ((TIM2->SR & (0b1 << 0)) == (0b1 << 0))
 8000594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000598:	691b      	ldr	r3, [r3, #16]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d10c      	bne.n	80005bc <TIM2_IRQHandler+0x2c>
    {
      TIM2->SR &= ~(0b1 << 0);	// da bi sledeci put mogli da detektujemo prekid
 80005a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a6:	691b      	ldr	r3, [r3, #16]
 80005a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ac:	f023 0301 	bic.w	r3, r3, #1
 80005b0:	6113      	str	r3, [r2, #16]

      sys_time_ms++;
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <TIM2_IRQHandler+0x38>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	3301      	adds	r3, #1
 80005b8:	4a03      	ldr	r2, [pc, #12]	; (80005c8 <TIM2_IRQHandler+0x38>)
 80005ba:	6013      	str	r3, [r2, #0]
//		  break;
//	default:
//		  sensors_state = false;
//		break;
//    }
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	2000002c 	.word	0x2000002c

080005cc <UART_init>:
static void
UART1_init();

void
UART_init()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	UART1_init();
 80005d0:	f000 f802 	bl	80005d8 <UART1_init>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <UART1_init>:

static void
UART1_init()
{
 80005d8:	b490      	push	{r4, r7}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
	//PB6 i PB7 AF7
	RCC->APB2ENR |= (0b1 << 14); //takt na USART1
 80005de:	4b99      	ldr	r3, [pc, #612]	; (8000844 <UART1_init+0x26c>)
 80005e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005e2:	4a98      	ldr	r2, [pc, #608]	; (8000844 <UART1_init+0x26c>)
 80005e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e8:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->AHB2ENR |= (0b1 << 1); //takt za gpioB
 80005ea:	4b96      	ldr	r3, [pc, #600]	; (8000844 <UART1_init+0x26c>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a95      	ldr	r2, [pc, #596]	; (8000844 <UART1_init+0x26c>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c

	uint8_t const TX_PIN = 6;
 80005f6:	2306      	movs	r3, #6
 80005f8:	71fb      	strb	r3, [r7, #7]
	uint8_t const RX_PIN = 7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	71bb      	strb	r3, [r7, #6]

	GPIOB->MODER &= ~(0b11 << TX_PIN * 2);
 80005fe:	4b92      	ldr	r3, [pc, #584]	; (8000848 <UART1_init+0x270>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	79fa      	ldrb	r2, [r7, #7]
 8000604:	0052      	lsls	r2, r2, #1
 8000606:	2103      	movs	r1, #3
 8000608:	fa01 f202 	lsl.w	r2, r1, r2
 800060c:	43d2      	mvns	r2, r2
 800060e:	4611      	mov	r1, r2
 8000610:	4a8d      	ldr	r2, [pc, #564]	; (8000848 <UART1_init+0x270>)
 8000612:	400b      	ands	r3, r1
 8000614:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0b11 << RX_PIN * 2);
 8000616:	4b8c      	ldr	r3, [pc, #560]	; (8000848 <UART1_init+0x270>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	79ba      	ldrb	r2, [r7, #6]
 800061c:	0052      	lsls	r2, r2, #1
 800061e:	2103      	movs	r1, #3
 8000620:	fa01 f202 	lsl.w	r2, r1, r2
 8000624:	43d2      	mvns	r2, r2
 8000626:	4611      	mov	r1, r2
 8000628:	4a87      	ldr	r2, [pc, #540]	; (8000848 <UART1_init+0x270>)
 800062a:	400b      	ands	r3, r1
 800062c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << TX_PIN * 2);
 800062e:	4b86      	ldr	r3, [pc, #536]	; (8000848 <UART1_init+0x270>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	79fa      	ldrb	r2, [r7, #7]
 8000634:	0052      	lsls	r2, r2, #1
 8000636:	2102      	movs	r1, #2
 8000638:	fa01 f202 	lsl.w	r2, r1, r2
 800063c:	4611      	mov	r1, r2
 800063e:	4a82      	ldr	r2, [pc, #520]	; (8000848 <UART1_init+0x270>)
 8000640:	430b      	orrs	r3, r1
 8000642:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << RX_PIN * 2);
 8000644:	4b80      	ldr	r3, [pc, #512]	; (8000848 <UART1_init+0x270>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	79ba      	ldrb	r2, [r7, #6]
 800064a:	0052      	lsls	r2, r2, #1
 800064c:	2102      	movs	r1, #2
 800064e:	fa01 f202 	lsl.w	r2, r1, r2
 8000652:	4611      	mov	r1, r2
 8000654:	4a7c      	ldr	r2, [pc, #496]	; (8000848 <UART1_init+0x270>)
 8000656:	430b      	orrs	r3, r1
 8000658:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER |= (0b1 << TX_PIN);
 800065a:	4b7b      	ldr	r3, [pc, #492]	; (8000848 <UART1_init+0x270>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	79fa      	ldrb	r2, [r7, #7]
 8000660:	2101      	movs	r1, #1
 8000662:	fa01 f202 	lsl.w	r2, r1, r2
 8000666:	4611      	mov	r1, r2
 8000668:	4a77      	ldr	r2, [pc, #476]	; (8000848 <UART1_init+0x270>)
 800066a:	430b      	orrs	r3, r1
 800066c:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(0b11 << TX_PIN*2);
 800066e:	4b76      	ldr	r3, [pc, #472]	; (8000848 <UART1_init+0x270>)
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	79fa      	ldrb	r2, [r7, #7]
 8000674:	0052      	lsls	r2, r2, #1
 8000676:	2103      	movs	r1, #3
 8000678:	fa01 f202 	lsl.w	r2, r1, r2
 800067c:	43d2      	mvns	r2, r2
 800067e:	4611      	mov	r1, r2
 8000680:	4a71      	ldr	r2, [pc, #452]	; (8000848 <UART1_init+0x270>)
 8000682:	400b      	ands	r3, r1
 8000684:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0b01 << TX_PIN*2);
 8000686:	4b70      	ldr	r3, [pc, #448]	; (8000848 <UART1_init+0x270>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	79fa      	ldrb	r2, [r7, #7]
 800068c:	0052      	lsls	r2, r2, #1
 800068e:	2101      	movs	r1, #1
 8000690:	fa01 f202 	lsl.w	r2, r1, r2
 8000694:	4611      	mov	r1, r2
 8000696:	4a6c      	ldr	r2, [pc, #432]	; (8000848 <UART1_init+0x270>)
 8000698:	430b      	orrs	r3, r1
 800069a:	60d3      	str	r3, [r2, #12]

	uint8_t const Alt_function = 7;
 800069c:	2307      	movs	r3, #7
 800069e:	717b      	strb	r3, [r7, #5]

	GPIOB->AFR[TX_PIN / 8] &= ~(0b1111 << (TX_PIN % 8) * 4);
 80006a0:	4a69      	ldr	r2, [pc, #420]	; (8000848 <UART1_init+0x270>)
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	08db      	lsrs	r3, r3, #3
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	3308      	adds	r3, #8
 80006aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ae:	79fa      	ldrb	r2, [r7, #7]
 80006b0:	f002 0207 	and.w	r2, r2, #7
 80006b4:	0092      	lsls	r2, r2, #2
 80006b6:	210f      	movs	r1, #15
 80006b8:	fa01 f202 	lsl.w	r2, r1, r2
 80006bc:	43d2      	mvns	r2, r2
 80006be:	4614      	mov	r4, r2
 80006c0:	4961      	ldr	r1, [pc, #388]	; (8000848 <UART1_init+0x270>)
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	08d2      	lsrs	r2, r2, #3
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	4610      	mov	r0, r2
 80006ca:	ea03 0204 	and.w	r2, r3, r4
 80006ce:	f100 0308 	add.w	r3, r0, #8
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[TX_PIN / 8] |= (Alt_function << (TX_PIN % 8) * 4);
 80006d6:	4a5c      	ldr	r2, [pc, #368]	; (8000848 <UART1_init+0x270>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	08db      	lsrs	r3, r3, #3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	3308      	adds	r3, #8
 80006e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e4:	7979      	ldrb	r1, [r7, #5]
 80006e6:	79fa      	ldrb	r2, [r7, #7]
 80006e8:	f002 0207 	and.w	r2, r2, #7
 80006ec:	0092      	lsls	r2, r2, #2
 80006ee:	fa01 f202 	lsl.w	r2, r1, r2
 80006f2:	4614      	mov	r4, r2
 80006f4:	4954      	ldr	r1, [pc, #336]	; (8000848 <UART1_init+0x270>)
 80006f6:	79fa      	ldrb	r2, [r7, #7]
 80006f8:	08d2      	lsrs	r2, r2, #3
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	4610      	mov	r0, r2
 80006fe:	ea43 0204 	orr.w	r2, r3, r4
 8000702:	f100 0308 	add.w	r3, r0, #8
 8000706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] &= ~(0b1111 << (RX_PIN % 8) * 4);
 800070a:	4a4f      	ldr	r2, [pc, #316]	; (8000848 <UART1_init+0x270>)
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	08db      	lsrs	r3, r3, #3
 8000710:	b2db      	uxtb	r3, r3
 8000712:	3308      	adds	r3, #8
 8000714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000718:	79ba      	ldrb	r2, [r7, #6]
 800071a:	f002 0207 	and.w	r2, r2, #7
 800071e:	0092      	lsls	r2, r2, #2
 8000720:	210f      	movs	r1, #15
 8000722:	fa01 f202 	lsl.w	r2, r1, r2
 8000726:	43d2      	mvns	r2, r2
 8000728:	4614      	mov	r4, r2
 800072a:	4947      	ldr	r1, [pc, #284]	; (8000848 <UART1_init+0x270>)
 800072c:	79ba      	ldrb	r2, [r7, #6]
 800072e:	08d2      	lsrs	r2, r2, #3
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	4610      	mov	r0, r2
 8000734:	ea03 0204 	and.w	r2, r3, r4
 8000738:	f100 0308 	add.w	r3, r0, #8
 800073c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] |= (Alt_function << (RX_PIN % 8) * 4);
 8000740:	4a41      	ldr	r2, [pc, #260]	; (8000848 <UART1_init+0x270>)
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	08db      	lsrs	r3, r3, #3
 8000746:	b2db      	uxtb	r3, r3
 8000748:	3308      	adds	r3, #8
 800074a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074e:	7979      	ldrb	r1, [r7, #5]
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	f002 0207 	and.w	r2, r2, #7
 8000756:	0092      	lsls	r2, r2, #2
 8000758:	fa01 f202 	lsl.w	r2, r1, r2
 800075c:	4614      	mov	r4, r2
 800075e:	493a      	ldr	r1, [pc, #232]	; (8000848 <UART1_init+0x270>)
 8000760:	79ba      	ldrb	r2, [r7, #6]
 8000762:	08d2      	lsrs	r2, r2, #3
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	4610      	mov	r0, r2
 8000768:	ea43 0204 	orr.w	r2, r3, r4
 800076c:	f100 0308 	add.w	r3, r0, #8
 8000770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

     USART1->CR1 &= ~(0b1 << 12);
 8000774:	4b35      	ldr	r3, [pc, #212]	; (800084c <UART1_init+0x274>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a34      	ldr	r2, [pc, #208]	; (800084c <UART1_init+0x274>)
 800077a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800077e:	6013      	str	r3, [r2, #0]
     USART1->CR1 &= ~(0b1 << 28); //8 bita
 8000780:	4b32      	ldr	r3, [pc, #200]	; (800084c <UART1_init+0x274>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a31      	ldr	r2, [pc, #196]	; (800084c <UART1_init+0x274>)
 8000786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800078a:	6013      	str	r3, [r2, #0]
     USART1->CR2 &= ~(0b11 << 12); //1 stop bit
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <UART1_init+0x274>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	4a2e      	ldr	r2, [pc, #184]	; (800084c <UART1_init+0x274>)
 8000792:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000796:	6053      	str	r3, [r2, #4]

     USART1->BRR = 0; //baud 9600
 8000798:	4b2c      	ldr	r3, [pc, #176]	; (800084c <UART1_init+0x274>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
     USART1->BRR |= ((546 << 4) | (14 << 0));
 800079e:	4b2b      	ldr	r3, [pc, #172]	; (800084c <UART1_init+0x274>)
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	4a2a      	ldr	r2, [pc, #168]	; (800084c <UART1_init+0x274>)
 80007a4:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80007a8:	f043 032e 	orr.w	r3, r3, #46	; 0x2e
 80007ac:	60d3      	str	r3, [r2, #12]

     USART1->CR1 |= (0b11 << 2); //tx & rx pin enable
 80007ae:	4b27      	ldr	r3, [pc, #156]	; (800084c <UART1_init+0x274>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a26      	ldr	r2, [pc, #152]	; (800084c <UART1_init+0x274>)
 80007b4:	f043 030c 	orr.w	r3, r3, #12
 80007b8:	6013      	str	r3, [r2, #0]

     USART1->CR1 |= (0b1 << 5); //interrupt enable
 80007ba:	4b24      	ldr	r3, [pc, #144]	; (800084c <UART1_init+0x274>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a23      	ldr	r2, [pc, #140]	; (800084c <UART1_init+0x274>)
 80007c0:	f043 0320 	orr.w	r3, r3, #32
 80007c4:	6013      	str	r3, [r2, #0]

     USART1->CR2 &= ~(0b1 << 11);
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <UART1_init+0x274>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	4a20      	ldr	r2, [pc, #128]	; (800084c <UART1_init+0x274>)
 80007cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007d0:	6053      	str	r3, [r2, #4]
     USART1->CR2 &= ~(0b1 << 14);
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <UART1_init+0x274>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	4a1d      	ldr	r2, [pc, #116]	; (800084c <UART1_init+0x274>)
 80007d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007dc:	6053      	str	r3, [r2, #4]
     USART1->CR3 &= ~(0b1 << 1);
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <UART1_init+0x274>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	4a1a      	ldr	r2, [pc, #104]	; (800084c <UART1_init+0x274>)
 80007e4:	f023 0302 	bic.w	r3, r3, #2
 80007e8:	6093      	str	r3, [r2, #8]
     USART1->CR3 &= ~(0b1 << 5);
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <UART1_init+0x274>)
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <UART1_init+0x274>)
 80007f0:	f023 0320 	bic.w	r3, r3, #32
 80007f4:	6093      	str	r3, [r2, #8]
     USART1->CR3 |= (0b1 << 3);
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <UART1_init+0x274>)
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	4a14      	ldr	r2, [pc, #80]	; (800084c <UART1_init+0x274>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6093      	str	r3, [r2, #8]

    uint8_t  USART1_INTERRUPT = 37;
 8000802:	2325      	movs	r3, #37	; 0x25
 8000804:	713b      	strb	r3, [r7, #4]
    NVIC->ISER[USART1_INTERRUPT / 32] |= (0b1 <<  USART1_INTERRUPT % 32);
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <UART1_init+0x278>)
 8000808:	793b      	ldrb	r3, [r7, #4]
 800080a:	095b      	lsrs	r3, r3, #5
 800080c:	b2d8      	uxtb	r0, r3
 800080e:	4603      	mov	r3, r0
 8000810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000814:	793a      	ldrb	r2, [r7, #4]
 8000816:	f002 021f 	and.w	r2, r2, #31
 800081a:	2101      	movs	r1, #1
 800081c:	fa01 f202 	lsl.w	r2, r1, r2
 8000820:	4614      	mov	r4, r2
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <UART1_init+0x278>)
 8000824:	4601      	mov	r1, r0
 8000826:	4323      	orrs	r3, r4
 8000828:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

     USART1-> CR1 |= (0b1 << 0); //usart enable
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <UART1_init+0x274>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <UART1_init+0x274>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bc90      	pop	{r4, r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000
 8000848:	48000400 	.word	0x48000400
 800084c:	40013800 	.word	0x40013800
 8000850:	e000e100 	.word	0xe000e100

08000854 <UART_send_byte>:

void
UART_send_byte (uint8_t data)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
   USART1->TDR = data; //ovako se salje, kada je  USART1->dr sa desne strane, onda se ponasa kao recieve registar
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <UART_send_byte+0x38>)
 8000860:	79fa      	ldrb	r2, [r7, #7]
 8000862:	b292      	uxth	r2, r2
 8000864:	851a      	strh	r2, [r3, #40]	; 0x28

  while (!( USART1->ISR & (0b1 << 6)))
 8000866:	bf00      	nop
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <UART_send_byte+0x38>)
 800086a:	69db      	ldr	r3, [r3, #28]
 800086c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000870:	2b00      	cmp	r3, #0
 8000872:	d0f9      	beq.n	8000868 <UART_send_byte+0x14>
	  ;

   USART1->ISR &= ~(0b1 << 6);
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <UART_send_byte+0x38>)
 8000876:	69db      	ldr	r3, [r3, #28]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <UART_send_byte+0x38>)
 800087a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800087e:	61d3      	str	r3, [r2, #28]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	40013800 	.word	0x40013800

08000890 <UART_write>:

void
UART_write (uint8_t data)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  if (buffer_size != MAX_BUFFER_SIZE)
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <UART_write+0xa0>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b20      	cmp	r3, #32
 80008a2:	d01c      	beq.n	80008de <UART_write+0x4e>
    {
      buffer[index_write] = data;
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <UART_write+0xa4>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4619      	mov	r1, r3
 80008ac:	4a22      	ldr	r2, [pc, #136]	; (8000938 <UART_write+0xa8>)
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <UART_write+0xa4>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	3301      	adds	r3, #1
 80008ba:	425a      	negs	r2, r3
 80008bc:	f003 031f 	and.w	r3, r3, #31
 80008c0:	f002 021f 	and.w	r2, r2, #31
 80008c4:	bf58      	it	pl
 80008c6:	4253      	negpl	r3, r2
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <UART_write+0xa4>)
 80008cc:	701a      	strb	r2, [r3, #0]
      buffer_size++;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <UART_write+0xa0>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	3301      	adds	r3, #1
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <UART_write+0xa0>)
 80008da:	701a      	strb	r2, [r3, #0]
    {
      buffer[index_write] = data;
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
    }
}
 80008dc:	e022      	b.n	8000924 <UART_write+0x94>
      buffer[index_write] = data;
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <UART_write+0xa4>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4619      	mov	r1, r3
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <UART_write+0xa8>)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <UART_write+0xa4>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	3301      	adds	r3, #1
 80008f4:	425a      	negs	r2, r3
 80008f6:	f003 031f 	and.w	r3, r3, #31
 80008fa:	f002 021f 	and.w	r2, r2, #31
 80008fe:	bf58      	it	pl
 8000900:	4253      	negpl	r3, r2
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <UART_write+0xa4>)
 8000906:	701a      	strb	r2, [r3, #0]
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <UART_write+0xac>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	3301      	adds	r3, #1
 8000910:	425a      	negs	r2, r3
 8000912:	f003 031f 	and.w	r3, r3, #31
 8000916:	f002 021f 	and.w	r2, r2, #31
 800091a:	bf58      	it	pl
 800091c:	4253      	negpl	r3, r2
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <UART_write+0xac>)
 8000922:	701a      	strb	r2, [r3, #0]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	20000050 	.word	0x20000050
 8000934:	20000051 	.word	0x20000051
 8000938:	20000030 	.word	0x20000030
 800093c:	20000052 	.word	0x20000052

08000940 <USART1_IRQHandler>:
    return false;
}

void
USART1_IRQHandler ()
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  if ( USART1->ISR & (0b1 << 5))
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <USART1_IRQHandler+0x24>)
 8000946:	69db      	ldr	r3, [r3, #28]
 8000948:	f003 0320 	and.w	r3, r3, #32
 800094c:	2b00      	cmp	r3, #0
 800094e:	d006      	beq.n	800095e <USART1_IRQHandler+0x1e>
    {
      UART_write(USART1->RDR);
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <USART1_IRQHandler+0x24>)
 8000952:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000954:	b29b      	uxth	r3, r3
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff99 	bl	8000890 <UART_write>
    }
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40013800 	.word	0x40013800

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096e:	f000 f910 	bl	8000b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000972:	f000 f82d 	bl	80009d0 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  io();
 8000976:	f7ff fd0d 	bl	8000394 <io>
  tajmer_init();
 800097a:	f7ff fd89 	bl	8000490 <tajmer_init>
  UART_init();
 800097e:	f7ff fe25 	bl	80005cc <UART_init>
  sensor_Init();
 8000982:	f7ff fce1 	bl	8000348 <sensor_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000986:	b662      	cpsie	i
}
 8000988:	bf00      	nop
     uint8_t move1[]={0xff, 0xff, 0x01, 0x05, 0x03, 0x1E, 0x00, 0x00, 0xD8};
     uint8_t move2[]={0xff, 0xff, 0x01, 0x05, 0x03, 0x1E, 0xff, 0x03, 0xD6};

     uint8_t ping[]={0xff, 0xff, 0x01, 0x02, 0x01, 0xFB}; */

  uint8_t ledon_b[] =
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <main+0x60>)
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000994:	e883 0003 	stmia.w	r3, {r0, r1}
      { 0xff, 0xff, 0xfe, 0x04, 0x03, 0x19, 0x01, 0xE0 };
    uint8_t ledoff_b[] =
 8000998:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <main+0x64>)
 800099a:	463b      	mov	r3, r7
 800099c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009a0:	e883 0003 	stmia.w	r3, {r0, r1}
//	  TajmerDelay(3000);
//	  TajmerDelay(3000);
//	  ax_angle_move(5, 0, 0);
//	  TajmerDelay(100000);

     xl_angle_move(2, 0);
 80009a4:	2100      	movs	r1, #0
 80009a6:	2002      	movs	r0, #2
 80009a8:	f7ff fc10 	bl	80001cc <xl_angle_move>
     TajmerDelay(1000);
 80009ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b0:	f7ff fdd4 	bl	800055c <TajmerDelay>
     xl_angle_move(2, 1023);
 80009b4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80009b8:	2002      	movs	r0, #2
 80009ba:	f7ff fc07 	bl	80001cc <xl_angle_move>
     TajmerDelay(1000);
 80009be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c2:	f7ff fdcb 	bl	800055c <TajmerDelay>
     xl_angle_move(2, 0);
 80009c6:	e7ed      	b.n	80009a4 <main+0x3c>
 80009c8:	08001d9c 	.word	0x08001d9c
 80009cc:	08001da4 	.word	0x08001da4

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b096      	sub	sp, #88	; 0x58
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2244      	movs	r2, #68	; 0x44
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 f896 	bl	8001b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	463b      	mov	r3, r7
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009f6:	f000 fa35 	bl	8000e64 <HAL_PWREx_ControlVoltageScaling>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a00:	f000 f838 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a04:	2310      	movs	r3, #16
 8000a06:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a10:	2360      	movs	r3, #96	; 0x60
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a14:	2302      	movs	r3, #2
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a20:	2328      	movs	r3, #40	; 0x28
 8000a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a24:	2307      	movs	r3, #7
 8000a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fa6b 	bl	8000f10 <HAL_RCC_OscConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a40:	f000 f818 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a44:	230f      	movs	r3, #15
 8000a46:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2104      	movs	r1, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fe6b 	bl	8001738 <HAL_RCC_ClockConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a68:	f000 f804 	bl	8000a74 <Error_Handler>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3758      	adds	r7, #88	; 0x58
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <HAL_MspInit+0x44>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6613      	str	r3, [r2, #96]	; 0x60
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <HAL_MspInit+0x44>)
 8000a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x44>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x44>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f892 	bl	8000c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b44:	f7ff ffea 	bl	8000b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4a:	490d      	ldr	r1, [pc, #52]	; (8000b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <LoopForever+0xe>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b60:	4c0a      	ldr	r4, [pc, #40]	; (8000b8c <LoopForever+0x16>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f000 ffd7 	bl	8001b20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b72:	f7ff fef9 	bl	8000968 <main>

08000b76 <LoopForever>:

LoopForever:
    b LoopForever
 8000b76:	e7fe      	b.n	8000b76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b84:	08001df4 	.word	0x08001df4
  ldr r2, =_sbss
 8000b88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b8c:	20000058 	.word	0x20000058

08000b90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_IRQHandler>

08000b92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 f91f 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba2:	200f      	movs	r0, #15
 8000ba4:	f000 f80e 	bl	8000bc4 <HAL_InitTick>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	e001      	b.n	8000bb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb4:	f7ff ff64 	bl	8000a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_InitTick+0x6c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d023      	beq.n	8000c20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_InitTick+0x70>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_InitTick+0x6c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f91d 	bl	8000e2e <HAL_SYSTICK_Config>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10f      	bne.n	8000c1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d809      	bhi.n	8000c14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f8f5 	bl	8000df6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_InitTick+0x74>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e007      	b.n	8000c24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
 8000c18:	e004      	b.n	8000c24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
 8000c1e:	e001      	b.n	8000c24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000000c 	.word	0x2000000c
 8000c34:	20000004 	.word	0x20000004
 8000c38:	20000008 	.word	0x20000008

08000c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x20>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_IncTick+0x24>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_IncTick+0x24>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	2000000c 	.word	0x2000000c
 8000c60:	20000054 	.word	0x20000054

08000c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return uwTick;
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <HAL_GetTick+0x14>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000054 	.word	0x20000054

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dac:	d301      	bcc.n	8000db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00f      	b.n	8000dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <SysTick_Config+0x40>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dba:	210f      	movs	r1, #15
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f7ff ff8e 	bl	8000ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <SysTick_Config+0x40>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <SysTick_Config+0x40>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	e000e010 	.word	0xe000e010

08000de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff47 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff5c 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ff8e 	bl	8000d34 <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff5d 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffb0 	bl	8000d9c <SysTick_Config>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40007000 	.word	0x40007000

08000e64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e72:	d130      	bne.n	8000ed6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e74:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e80:	d038      	beq.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e8a:	4a1e      	ldr	r2, [pc, #120]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2232      	movs	r2, #50	; 0x32
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	0c9b      	lsrs	r3, r3, #18
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ea8:	e002      	b.n	8000eb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ebc:	d102      	bne.n	8000ec4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f2      	bne.n	8000eaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed0:	d110      	bne.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e00f      	b.n	8000ef6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee2:	d007      	beq.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eec:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40007000 	.word	0x40007000
 8000f08:	20000004 	.word	0x20000004
 8000f0c:	431bde83 	.word	0x431bde83

08000f10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d102      	bne.n	8000f24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f000 bc02 	b.w	8001728 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f24:	4b96      	ldr	r3, [pc, #600]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 030c 	and.w	r3, r3, #12
 8000f2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f2e:	4b94      	ldr	r3, [pc, #592]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0310 	and.w	r3, r3, #16
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80e4 	beq.w	800110e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d007      	beq.n	8000f5c <HAL_RCC_OscConfig+0x4c>
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	2b0c      	cmp	r3, #12
 8000f50:	f040 808b 	bne.w	800106a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	f040 8087 	bne.w	800106a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f5c:	4b88      	ldr	r3, [pc, #544]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d005      	beq.n	8000f74 <HAL_RCC_OscConfig+0x64>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e3d9      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a1a      	ldr	r2, [r3, #32]
 8000f78:	4b81      	ldr	r3, [pc, #516]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d004      	beq.n	8000f8e <HAL_RCC_OscConfig+0x7e>
 8000f84:	4b7e      	ldr	r3, [pc, #504]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f8c:	e005      	b.n	8000f9a <HAL_RCC_OscConfig+0x8a>
 8000f8e:	4b7c      	ldr	r3, [pc, #496]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8000f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d223      	bcs.n	8000fe6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fd54 	bl	8001a50 <RCC_SetFlashLatencyFromMSIRange>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e3ba      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fb2:	4b73      	ldr	r3, [pc, #460]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a72      	ldr	r2, [pc, #456]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b70      	ldr	r3, [pc, #448]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	496d      	ldr	r1, [pc, #436]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fd0:	4b6b      	ldr	r3, [pc, #428]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	4968      	ldr	r1, [pc, #416]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
 8000fe4:	e025      	b.n	8001032 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe6:	4b66      	ldr	r3, [pc, #408]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a65      	ldr	r2, [pc, #404]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	4b63      	ldr	r3, [pc, #396]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	4960      	ldr	r1, [pc, #384]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8001000:	4313      	orrs	r3, r2
 8001002:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001004:	4b5e      	ldr	r3, [pc, #376]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	495b      	ldr	r1, [pc, #364]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d109      	bne.n	8001032 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fd14 	bl	8001a50 <RCC_SetFlashLatencyFromMSIRange>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e37a      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001032:	f000 fc81 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 8001036:	4602      	mov	r2, r0
 8001038:	4b51      	ldr	r3, [pc, #324]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	4950      	ldr	r1, [pc, #320]	; (8001184 <HAL_RCC_OscConfig+0x274>)
 8001044:	5ccb      	ldrb	r3, [r1, r3]
 8001046:	f003 031f 	and.w	r3, r3, #31
 800104a:	fa22 f303 	lsr.w	r3, r2, r3
 800104e:	4a4e      	ldr	r2, [pc, #312]	; (8001188 <HAL_RCC_OscConfig+0x278>)
 8001050:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001052:	4b4e      	ldr	r3, [pc, #312]	; (800118c <HAL_RCC_OscConfig+0x27c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fdb4 	bl	8000bc4 <HAL_InitTick>
 800105c:	4603      	mov	r3, r0
 800105e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d052      	beq.n	800110c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	e35e      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d032      	beq.n	80010d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001072:	4b43      	ldr	r3, [pc, #268]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a42      	ldr	r2, [pc, #264]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800107e:	f7ff fdf1 	bl	8000c64 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001086:	f7ff fded 	bl	8000c64 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e347      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001098:	4b39      	ldr	r3, [pc, #228]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f0      	beq.n	8001086 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a35      	ldr	r2, [pc, #212]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b33      	ldr	r3, [pc, #204]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	4930      	ldr	r1, [pc, #192]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	492b      	ldr	r1, [pc, #172]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	604b      	str	r3, [r1, #4]
 80010d6:	e01a      	b.n	800110e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010d8:	4b29      	ldr	r3, [pc, #164]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a28      	ldr	r2, [pc, #160]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 80010de:	f023 0301 	bic.w	r3, r3, #1
 80010e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fdbe 	bl	8000c64 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010ec:	f7ff fdba 	bl	8000c64 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e314      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x1dc>
 800110a:	e000      	b.n	800110e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800110c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d073      	beq.n	8001202 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b08      	cmp	r3, #8
 800111e:	d005      	beq.n	800112c <HAL_RCC_OscConfig+0x21c>
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2b0c      	cmp	r3, #12
 8001124:	d10e      	bne.n	8001144 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d10b      	bne.n	8001144 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d063      	beq.n	8001200 <HAL_RCC_OscConfig+0x2f0>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d15f      	bne.n	8001200 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e2f1      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114c:	d106      	bne.n	800115c <HAL_RCC_OscConfig+0x24c>
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e025      	b.n	80011a8 <HAL_RCC_OscConfig+0x298>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001164:	d114      	bne.n	8001190 <HAL_RCC_OscConfig+0x280>
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a02      	ldr	r2, [pc, #8]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 8001178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e013      	b.n	80011a8 <HAL_RCC_OscConfig+0x298>
 8001180:	40021000 	.word	0x40021000
 8001184:	08001dac 	.word	0x08001dac
 8001188:	20000004 	.word	0x20000004
 800118c:	20000008 	.word	0x20000008
 8001190:	4ba0      	ldr	r3, [pc, #640]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a9f      	ldr	r2, [pc, #636]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 8001196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b9d      	ldr	r3, [pc, #628]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a9c      	ldr	r2, [pc, #624]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 80011a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d013      	beq.n	80011d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b0:	f7ff fd58 	bl	8000c64 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fd54 	bl	8000c64 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	; 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e2ae      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ca:	4b92      	ldr	r3, [pc, #584]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f0      	beq.n	80011b8 <HAL_RCC_OscConfig+0x2a8>
 80011d6:	e014      	b.n	8001202 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d8:	f7ff fd44 	bl	8000c64 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff fd40 	bl	8000c64 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	; 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e29a      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011f2:	4b88      	ldr	r3, [pc, #544]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x2d0>
 80011fe:	e000      	b.n	8001202 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d060      	beq.n	80012d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2b04      	cmp	r3, #4
 8001212:	d005      	beq.n	8001220 <HAL_RCC_OscConfig+0x310>
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2b0c      	cmp	r3, #12
 8001218:	d119      	bne.n	800124e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d116      	bne.n	800124e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001220:	4b7c      	ldr	r3, [pc, #496]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_OscConfig+0x328>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e277      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001238:	4b76      	ldr	r3, [pc, #472]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	061b      	lsls	r3, r3, #24
 8001246:	4973      	ldr	r1, [pc, #460]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800124c:	e040      	b.n	80012d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d023      	beq.n	800129e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001256:	4b6f      	ldr	r3, [pc, #444]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a6e      	ldr	r2, [pc, #440]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001262:	f7ff fcff 	bl	8000c64 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126a:	f7ff fcfb 	bl	8000c64 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e255      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800127c:	4b65      	ldr	r3, [pc, #404]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001288:	4b62      	ldr	r3, [pc, #392]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	061b      	lsls	r3, r3, #24
 8001296:	495f      	ldr	r1, [pc, #380]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
 800129c:	e018      	b.n	80012d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129e:	4b5d      	ldr	r3, [pc, #372]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a5c      	ldr	r2, [pc, #368]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 80012a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012aa:	f7ff fcdb 	bl	8000c64 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff fcd7 	bl	8000c64 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e231      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012c4:	4b53      	ldr	r3, [pc, #332]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f0      	bne.n	80012b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d03c      	beq.n	8001356 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01c      	beq.n	800131e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e4:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 80012e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ea:	4a4a      	ldr	r2, [pc, #296]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f4:	f7ff fcb6 	bl	8000c64 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff fcb2 	bl	8000c64 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e20c      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800130e:	4b41      	ldr	r3, [pc, #260]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 8001310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0ef      	beq.n	80012fc <HAL_RCC_OscConfig+0x3ec>
 800131c:	e01b      	b.n	8001356 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131e:	4b3d      	ldr	r3, [pc, #244]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 8001320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001324:	4a3b      	ldr	r2, [pc, #236]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132e:	f7ff fc99 	bl	8000c64 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001336:	f7ff fc95 	bl	8000c64 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e1ef      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001348:	4b32      	ldr	r3, [pc, #200]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 800134a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1ef      	bne.n	8001336 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80a6 	beq.w	80014b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001368:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10d      	bne.n	8001390 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001378:	4a26      	ldr	r2, [pc, #152]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 800137a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137e:	6593      	str	r3, [r2, #88]	; 0x58
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800138c:	2301      	movs	r3, #1
 800138e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <HAL_RCC_OscConfig+0x508>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001398:	2b00      	cmp	r3, #0
 800139a:	d118      	bne.n	80013ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <HAL_RCC_OscConfig+0x508>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <HAL_RCC_OscConfig+0x508>)
 80013a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a8:	f7ff fc5c 	bl	8000c64 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b0:	f7ff fc58 	bl	8000c64 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1b2      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_RCC_OscConfig+0x508>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d108      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4d8>
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 80013d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013e6:	e029      	b.n	800143c <HAL_RCC_OscConfig+0x52c>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d115      	bne.n	800141c <HAL_RCC_OscConfig+0x50c>
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 80013f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f6:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 8001402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001406:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_RCC_OscConfig+0x504>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001410:	e014      	b.n	800143c <HAL_RCC_OscConfig+0x52c>
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	40007000 	.word	0x40007000
 800141c:	4b9a      	ldr	r3, [pc, #616]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 800141e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001422:	4a99      	ldr	r2, [pc, #612]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800142c:	4b96      	ldr	r3, [pc, #600]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 800142e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001432:	4a95      	ldr	r2, [pc, #596]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 8001434:	f023 0304 	bic.w	r3, r3, #4
 8001438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d016      	beq.n	8001472 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fc0e 	bl	8000c64 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800144a:	e00a      	b.n	8001462 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144c:	f7ff fc0a 	bl	8000c64 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	; 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e162      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001462:	4b89      	ldr	r3, [pc, #548]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 8001464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0ed      	beq.n	800144c <HAL_RCC_OscConfig+0x53c>
 8001470:	e015      	b.n	800149e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001472:	f7ff fbf7 	bl	8000c64 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fbf3 	bl	8000c64 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e14b      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001490:	4b7d      	ldr	r3, [pc, #500]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 8001492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1ed      	bne.n	800147a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800149e:	7ffb      	ldrb	r3, [r7, #31]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d105      	bne.n	80014b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a4:	4b78      	ldr	r3, [pc, #480]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	4a77      	ldr	r2, [pc, #476]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 80014aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0320 	and.w	r3, r3, #32
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d03c      	beq.n	8001536 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d01c      	beq.n	80014fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014c4:	4b70      	ldr	r3, [pc, #448]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 80014c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014ca:	4a6f      	ldr	r2, [pc, #444]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d4:	f7ff fbc6 	bl	8000c64 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014dc:	f7ff fbc2 	bl	8000c64 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e11c      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014ee:	4b66      	ldr	r3, [pc, #408]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 80014f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0ef      	beq.n	80014dc <HAL_RCC_OscConfig+0x5cc>
 80014fc:	e01b      	b.n	8001536 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014fe:	4b62      	ldr	r3, [pc, #392]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 8001500:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001504:	4a60      	ldr	r2, [pc, #384]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7ff fba9 	bl	8000c64 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001516:	f7ff fba5 	bl	8000c64 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e0ff      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001528:	4b57      	ldr	r3, [pc, #348]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 800152a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1ef      	bne.n	8001516 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80f3 	beq.w	8001726 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	2b02      	cmp	r3, #2
 8001546:	f040 80c9 	bne.w	80016dc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800154a:	4b4f      	ldr	r3, [pc, #316]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f003 0203 	and.w	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	429a      	cmp	r2, r3
 800155c:	d12c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	3b01      	subs	r3, #1
 800156a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d123      	bne.n	80015b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d11b      	bne.n	80015b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d113      	bne.n	80015b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159a:	085b      	lsrs	r3, r3, #1
 800159c:	3b01      	subs	r3, #1
 800159e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d109      	bne.n	80015b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	3b01      	subs	r3, #1
 80015b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d06b      	beq.n	8001690 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b0c      	cmp	r3, #12
 80015bc:	d062      	beq.n	8001684 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015be:	4b32      	ldr	r3, [pc, #200]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0ac      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015ce:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a2d      	ldr	r2, [pc, #180]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 80015d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015da:	f7ff fb43 	bl	8000c64 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e2:	f7ff fb3f 	bl	8000c64 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e099      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f4:	4b24      	ldr	r3, [pc, #144]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f0      	bne.n	80015e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <HAL_RCC_OscConfig+0x77c>)
 8001606:	4013      	ands	r3, r2
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001610:	3a01      	subs	r2, #1
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	4311      	orrs	r1, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800161a:	0212      	lsls	r2, r2, #8
 800161c:	4311      	orrs	r1, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001622:	0852      	lsrs	r2, r2, #1
 8001624:	3a01      	subs	r2, #1
 8001626:	0552      	lsls	r2, r2, #21
 8001628:	4311      	orrs	r1, r2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800162e:	0852      	lsrs	r2, r2, #1
 8001630:	3a01      	subs	r2, #1
 8001632:	0652      	lsls	r2, r2, #25
 8001634:	4311      	orrs	r1, r2
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800163a:	06d2      	lsls	r2, r2, #27
 800163c:	430a      	orrs	r2, r1
 800163e:	4912      	ldr	r1, [pc, #72]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 8001640:	4313      	orrs	r3, r2
 8001642:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 800164a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 8001656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800165a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800165c:	f7ff fb02 	bl	8000c64 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fafe 	bl	8000c64 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e058      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <HAL_RCC_OscConfig+0x778>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001682:	e050      	b.n	8001726 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e04f      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
 8001688:	40021000 	.word	0x40021000
 800168c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_RCC_OscConfig+0x820>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d144      	bne.n	8001726 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <HAL_RCC_OscConfig+0x820>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a23      	ldr	r2, [pc, #140]	; (8001730 <HAL_RCC_OscConfig+0x820>)
 80016a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_RCC_OscConfig+0x820>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4a20      	ldr	r2, [pc, #128]	; (8001730 <HAL_RCC_OscConfig+0x820>)
 80016ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016b4:	f7ff fad6 	bl	8000c64 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff fad2 	bl	8000c64 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e02c      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_RCC_OscConfig+0x820>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x7ac>
 80016da:	e024      	b.n	8001726 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d01f      	beq.n	8001722 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_RCC_OscConfig+0x820>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <HAL_RCC_OscConfig+0x820>)
 80016e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ee:	f7ff fab9 	bl	8000c64 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f6:	f7ff fab5 	bl	8000c64 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e00f      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_RCC_OscConfig+0x820>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_RCC_OscConfig+0x820>)
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	4905      	ldr	r1, [pc, #20]	; (8001730 <HAL_RCC_OscConfig+0x820>)
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_RCC_OscConfig+0x824>)
 800171c:	4013      	ands	r3, r2
 800171e:	60cb      	str	r3, [r1, #12]
 8001720:	e001      	b.n	8001726 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40021000 	.word	0x40021000
 8001734:	feeefffc 	.word	0xfeeefffc

08001738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0e7      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800174c:	4b75      	ldr	r3, [pc, #468]	; (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d910      	bls.n	800177c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b72      	ldr	r3, [pc, #456]	; (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 0207 	bic.w	r2, r3, #7
 8001762:	4970      	ldr	r1, [pc, #448]	; (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b6e      	ldr	r3, [pc, #440]	; (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0cf      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d010      	beq.n	80017aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	4b66      	ldr	r3, [pc, #408]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001794:	429a      	cmp	r2, r3
 8001796:	d908      	bls.n	80017aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4b63      	ldr	r3, [pc, #396]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4960      	ldr	r1, [pc, #384]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d04c      	beq.n	8001850 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017be:	4b5a      	ldr	r3, [pc, #360]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d121      	bne.n	800180e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0a6      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d6:	4b54      	ldr	r3, [pc, #336]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d115      	bne.n	800180e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e09a      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ee:	4b4e      	ldr	r3, [pc, #312]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e08e      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017fe:	4b4a      	ldr	r3, [pc, #296]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e086      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800180e:	4b46      	ldr	r3, [pc, #280]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f023 0203 	bic.w	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4943      	ldr	r1, [pc, #268]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001820:	f7ff fa20 	bl	8000c64 <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	e00a      	b.n	800183e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001828:	f7ff fa1c 	bl	8000c64 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e06e      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	4b3a      	ldr	r3, [pc, #232]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 020c 	and.w	r2, r3, #12
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	429a      	cmp	r2, r3
 800184e:	d1eb      	bne.n	8001828 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d010      	beq.n	800187e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	4b31      	ldr	r3, [pc, #196]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001868:	429a      	cmp	r2, r3
 800186a:	d208      	bcs.n	800187e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800186c:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	492b      	ldr	r1, [pc, #172]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800187e:	4b29      	ldr	r3, [pc, #164]	; (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d210      	bcs.n	80018ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 0207 	bic.w	r2, r3, #7
 8001894:	4923      	ldr	r1, [pc, #140]	; (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e036      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d008      	beq.n	80018cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	4918      	ldr	r1, [pc, #96]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d009      	beq.n	80018ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4910      	ldr	r1, [pc, #64]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018ec:	f000 f824 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	f003 030f 	and.w	r3, r3, #15
 80018fc:	490b      	ldr	r1, [pc, #44]	; (800192c <HAL_RCC_ClockConfig+0x1f4>)
 80018fe:	5ccb      	ldrb	r3, [r1, r3]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
 8001908:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 800190a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x1fc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff f957 	bl	8000bc4 <HAL_InitTick>
 8001916:	4603      	mov	r3, r0
 8001918:	72fb      	strb	r3, [r7, #11]

  return status;
 800191a:	7afb      	ldrb	r3, [r7, #11]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40022000 	.word	0x40022000
 8001928:	40021000 	.word	0x40021000
 800192c:	08001dac 	.word	0x08001dac
 8001930:	20000004 	.word	0x20000004
 8001934:	20000008 	.word	0x20000008

08001938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001946:	4b3e      	ldr	r3, [pc, #248]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001950:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x34>
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d121      	bne.n	80019aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d11e      	bne.n	80019aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800196c:	4b34      	ldr	r3, [pc, #208]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001978:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	e005      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001988:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001994:	4a2b      	ldr	r2, [pc, #172]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10d      	bne.n	80019c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d102      	bne.n	80019b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x110>)
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	e004      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019bc:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x114>)
 80019be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d134      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d003      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0xa6>
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d003      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0xac>
 80019dc:	e005      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x110>)
 80019e0:	617b      	str	r3, [r7, #20]
      break;
 80019e2:	e005      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x114>)
 80019e6:	617b      	str	r3, [r7, #20]
      break;
 80019e8:	e002      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	617b      	str	r3, [r7, #20]
      break;
 80019ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	3301      	adds	r3, #1
 80019fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	fb03 f202 	mul.w	r2, r3, r2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	0e5b      	lsrs	r3, r3, #25
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	3301      	adds	r3, #1
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a30:	69bb      	ldr	r3, [r7, #24]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000
 8001a44:	08001dbc 	.word	0x08001dbc
 8001a48:	00f42400 	.word	0x00f42400
 8001a4c:	007a1200 	.word	0x007a1200

08001a50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a68:	f7ff f9ee 	bl	8000e48 <HAL_PWREx_GetVoltageRange>
 8001a6c:	6178      	str	r0, [r7, #20]
 8001a6e:	e014      	b.n	8001a9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	4a24      	ldr	r2, [pc, #144]	; (8001b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7c:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a88:	f7ff f9de 	bl	8000e48 <HAL_PWREx_GetVoltageRange>
 8001a8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa0:	d10b      	bne.n	8001aba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b80      	cmp	r3, #128	; 0x80
 8001aa6:	d919      	bls.n	8001adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2ba0      	cmp	r3, #160	; 0xa0
 8001aac:	d902      	bls.n	8001ab4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aae:	2302      	movs	r3, #2
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	e013      	b.n	8001adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	e010      	b.n	8001adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b80      	cmp	r3, #128	; 0x80
 8001abe:	d902      	bls.n	8001ac6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	e00a      	b.n	8001adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b80      	cmp	r3, #128	; 0x80
 8001aca:	d102      	bne.n	8001ad2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001acc:	2302      	movs	r3, #2
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	e004      	b.n	8001adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b70      	cmp	r3, #112	; 0x70
 8001ad6:	d101      	bne.n	8001adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ad8:	2301      	movs	r3, #1
 8001ada:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 0207 	bic.w	r2, r3, #7
 8001ae4:	4909      	ldr	r1, [pc, #36]	; (8001b0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d001      	beq.n	8001afe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40022000 	.word	0x40022000

08001b10 <memset>:
 8001b10:	4402      	add	r2, r0
 8001b12:	4603      	mov	r3, r0
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d100      	bne.n	8001b1a <memset+0xa>
 8001b18:	4770      	bx	lr
 8001b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b1e:	e7f9      	b.n	8001b14 <memset+0x4>

08001b20 <__libc_init_array>:
 8001b20:	b570      	push	{r4, r5, r6, lr}
 8001b22:	4d0d      	ldr	r5, [pc, #52]	; (8001b58 <__libc_init_array+0x38>)
 8001b24:	4c0d      	ldr	r4, [pc, #52]	; (8001b5c <__libc_init_array+0x3c>)
 8001b26:	1b64      	subs	r4, r4, r5
 8001b28:	10a4      	asrs	r4, r4, #2
 8001b2a:	2600      	movs	r6, #0
 8001b2c:	42a6      	cmp	r6, r4
 8001b2e:	d109      	bne.n	8001b44 <__libc_init_array+0x24>
 8001b30:	4d0b      	ldr	r5, [pc, #44]	; (8001b60 <__libc_init_array+0x40>)
 8001b32:	4c0c      	ldr	r4, [pc, #48]	; (8001b64 <__libc_init_array+0x44>)
 8001b34:	f000 f826 	bl	8001b84 <_init>
 8001b38:	1b64      	subs	r4, r4, r5
 8001b3a:	10a4      	asrs	r4, r4, #2
 8001b3c:	2600      	movs	r6, #0
 8001b3e:	42a6      	cmp	r6, r4
 8001b40:	d105      	bne.n	8001b4e <__libc_init_array+0x2e>
 8001b42:	bd70      	pop	{r4, r5, r6, pc}
 8001b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b48:	4798      	blx	r3
 8001b4a:	3601      	adds	r6, #1
 8001b4c:	e7ee      	b.n	8001b2c <__libc_init_array+0xc>
 8001b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b52:	4798      	blx	r3
 8001b54:	3601      	adds	r6, #1
 8001b56:	e7f2      	b.n	8001b3e <__libc_init_array+0x1e>
 8001b58:	08001dec 	.word	0x08001dec
 8001b5c:	08001dec 	.word	0x08001dec
 8001b60:	08001dec 	.word	0x08001dec
 8001b64:	08001df0 	.word	0x08001df0

08001b68 <memcpy>:
 8001b68:	440a      	add	r2, r1
 8001b6a:	4291      	cmp	r1, r2
 8001b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001b70:	d100      	bne.n	8001b74 <memcpy+0xc>
 8001b72:	4770      	bx	lr
 8001b74:	b510      	push	{r4, lr}
 8001b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b7e:	4291      	cmp	r1, r2
 8001b80:	d1f9      	bne.n	8001b76 <memcpy+0xe>
 8001b82:	bd10      	pop	{r4, pc}

08001b84 <_init>:
 8001b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b86:	bf00      	nop
 8001b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8a:	bc08      	pop	{r3}
 8001b8c:	469e      	mov	lr, r3
 8001b8e:	4770      	bx	lr

08001b90 <_fini>:
 8001b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b92:	bf00      	nop
 8001b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b96:	bc08      	pop	{r3}
 8001b98:	469e      	mov	lr, r3
 8001b9a:	4770      	bx	lr
