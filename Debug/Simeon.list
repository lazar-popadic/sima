
Simeon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002958  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002ae4  08002ae4  00003ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b24  08002b24  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002b24  08002b24  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b24  08002b24  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b24  08002b24  00003b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b28  08002b28  00003b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002b2c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000010  08002b3c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08002b3c  00004060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005589  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001613  00000000  00000000  000095c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000abe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004e8  00000000  00000000  0000b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec6e  00000000  00000000  0000b788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009706  00000000  00000000  0002a3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b618b  00000000  00000000  00033afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9c87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017c8  00000000  00000000  000e9ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000eb494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002acc 	.word	0x08002acc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08002acc 	.word	0x08002acc

080001cc <ax_angle_move>:
update_crc (unsigned short crc_accum, unsigned char *data_blk_ptr,
	    unsigned short data_blk_size);

void
ax_angle_move (uint8_t id, uint16_t angle, uint16_t speed)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	460b      	mov	r3, r1
 80001d8:	80bb      	strh	r3, [r7, #4]
 80001da:	4613      	mov	r3, r2
 80001dc:	807b      	strh	r3, [r7, #2]
	uint8_t angle_low, angle_high, speed_low, speed_high;
	  angle_low = angle & 0xff;
 80001de:	88bb      	ldrh	r3, [r7, #4]
 80001e0:	77bb      	strb	r3, [r7, #30]
	  angle_high = angle >> 8;
 80001e2:	88bb      	ldrh	r3, [r7, #4]
 80001e4:	0a1b      	lsrs	r3, r3, #8
 80001e6:	b29b      	uxth	r3, r3
 80001e8:	777b      	strb	r3, [r7, #29]
	  speed_low = speed & 0xff;
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	773b      	strb	r3, [r7, #28]
	  speed_high = speed >> 8;
 80001ee:	887b      	ldrh	r3, [r7, #2]
 80001f0:	0a1b      	lsrs	r3, r3, #8
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	76fb      	strb	r3, [r7, #27]

	  uint16_t checksum_local = id + 7 + 3 + 0x1e + angle_low + angle_high
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	b29a      	uxth	r2, r3
 80001fa:	7fbb      	ldrb	r3, [r7, #30]
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	4413      	add	r3, r2
 8000200:	b29a      	uxth	r2, r3
 8000202:	7f7b      	ldrb	r3, [r7, #29]
 8000204:	b29b      	uxth	r3, r3
 8000206:	4413      	add	r3, r2
 8000208:	b29a      	uxth	r2, r3
	      + speed_low + speed_high;
 800020a:	7f3b      	ldrb	r3, [r7, #28]
 800020c:	b29b      	uxth	r3, r3
 800020e:	4413      	add	r3, r2
 8000210:	b29a      	uxth	r2, r3
 8000212:	7efb      	ldrb	r3, [r7, #27]
 8000214:	b29b      	uxth	r3, r3
 8000216:	4413      	add	r3, r2
 8000218:	b29b      	uxth	r3, r3
	  uint16_t checksum_local = id + 7 + 3 + 0x1e + angle_low + angle_high
 800021a:	3328      	adds	r3, #40	@ 0x28
 800021c:	833b      	strh	r3, [r7, #24]
	  uint8_t checksum = (uint8_t) (~checksum_local);
 800021e:	8b3b      	ldrh	r3, [r7, #24]
 8000220:	b2db      	uxtb	r3, r3
 8000222:	43db      	mvns	r3, r3
 8000224:	75fb      	strb	r3, [r7, #23]
	  uint8_t ax_move[] =
 8000226:	23ff      	movs	r3, #255	@ 0xff
 8000228:	733b      	strb	r3, [r7, #12]
 800022a:	23ff      	movs	r3, #255	@ 0xff
 800022c:	737b      	strb	r3, [r7, #13]
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	73bb      	strb	r3, [r7, #14]
 8000232:	2307      	movs	r3, #7
 8000234:	73fb      	strb	r3, [r7, #15]
 8000236:	2303      	movs	r3, #3
 8000238:	743b      	strb	r3, [r7, #16]
 800023a:	231e      	movs	r3, #30
 800023c:	747b      	strb	r3, [r7, #17]
 800023e:	7fbb      	ldrb	r3, [r7, #30]
 8000240:	74bb      	strb	r3, [r7, #18]
 8000242:	7f7b      	ldrb	r3, [r7, #29]
 8000244:	74fb      	strb	r3, [r7, #19]
 8000246:	7f3b      	ldrb	r3, [r7, #28]
 8000248:	753b      	strb	r3, [r7, #20]
 800024a:	7efb      	ldrb	r3, [r7, #27]
 800024c:	757b      	strb	r3, [r7, #21]
 800024e:	7dfb      	ldrb	r3, [r7, #23]
 8000250:	75bb      	strb	r3, [r7, #22]
	    { 0xff, 0xff, id, 0x07, 0x03, 0x1E, angle_low, angle_high, speed_low,
		speed_high, checksum };

  for (uint8_t i = 0; i < 11; i++)
 8000252:	2300      	movs	r3, #0
 8000254:	77fb      	strb	r3, [r7, #31]
 8000256:	e00a      	b.n	800026e <ax_angle_move+0xa2>
    {
      UART_send_byte(ax_move[i]);
 8000258:	7ffb      	ldrb	r3, [r7, #31]
 800025a:	3320      	adds	r3, #32
 800025c:	443b      	add	r3, r7
 800025e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fac2 	bl	80017ec <UART_send_byte>
  for (uint8_t i = 0; i < 11; i++)
 8000268:	7ffb      	ldrb	r3, [r7, #31]
 800026a:	3301      	adds	r3, #1
 800026c:	77fb      	strb	r3, [r7, #31]
 800026e:	7ffb      	ldrb	r3, [r7, #31]
 8000270:	2b0a      	cmp	r3, #10
 8000272:	d9f1      	bls.n	8000258 <ax_angle_move+0x8c>
    }
}
 8000274:	bf00      	nop
 8000276:	bf00      	nop
 8000278:	3720      	adds	r7, #32
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <ax_wheel_mode>:

void
ax_wheel_mode(uint8_t id)
{
 800027e:	b580      	push	{r7, lr}
 8000280:	b086      	sub	sp, #24
 8000282:	af00      	add	r7, sp, #0
 8000284:	4603      	mov	r3, r0
 8000286:	71fb      	strb	r3, [r7, #7]
	// 0-1023 CCW
	// 1024-2047 CW

	uint16_t checksum_local = id + 5 + 3 + 8;
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	b29b      	uxth	r3, r3
 800028c:	3310      	adds	r3, #16
 800028e:	82bb      	strh	r3, [r7, #20]
	uint8_t checksum = (uint8_t) (~checksum_local);
 8000290:	8abb      	ldrh	r3, [r7, #20]
 8000292:	b2db      	uxtb	r3, r3
 8000294:	43db      	mvns	r3, r3
 8000296:	74fb      	strb	r3, [r7, #19]
	uint8_t ax_move[] =
 8000298:	23ff      	movs	r3, #255	@ 0xff
 800029a:	723b      	strb	r3, [r7, #8]
 800029c:	23ff      	movs	r3, #255	@ 0xff
 800029e:	727b      	strb	r3, [r7, #9]
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	72bb      	strb	r3, [r7, #10]
 80002a4:	2305      	movs	r3, #5
 80002a6:	72fb      	strb	r3, [r7, #11]
 80002a8:	2303      	movs	r3, #3
 80002aa:	733b      	strb	r3, [r7, #12]
 80002ac:	2308      	movs	r3, #8
 80002ae:	737b      	strb	r3, [r7, #13]
 80002b0:	2300      	movs	r3, #0
 80002b2:	73bb      	strb	r3, [r7, #14]
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]
 80002b8:	7cfb      	ldrb	r3, [r7, #19]
 80002ba:	743b      	strb	r3, [r7, #16]
			{ 0xff, 0xff, id, 0x05, 0x03, 0x08, 0x00, 0x00, checksum };

	for (uint8_t i = 0; i < 9; i++)
 80002bc:	2300      	movs	r3, #0
 80002be:	75fb      	strb	r3, [r7, #23]
 80002c0:	e00a      	b.n	80002d8 <ax_wheel_mode+0x5a>
			    {
			      UART_send_byte(ax_move[i]);
 80002c2:	7dfb      	ldrb	r3, [r7, #23]
 80002c4:	3318      	adds	r3, #24
 80002c6:	443b      	add	r3, r7
 80002c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f001 fa8d 	bl	80017ec <UART_send_byte>
	for (uint8_t i = 0; i < 9; i++)
 80002d2:	7dfb      	ldrb	r3, [r7, #23]
 80002d4:	3301      	adds	r3, #1
 80002d6:	75fb      	strb	r3, [r7, #23]
 80002d8:	7dfb      	ldrb	r3, [r7, #23]
 80002da:	2b08      	cmp	r3, #8
 80002dc:	d9f1      	bls.n	80002c2 <ax_wheel_mode+0x44>
			    }
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	3718      	adds	r7, #24
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <sensor_Init>:
//portC
uint8_t infra_1 = 1;

void
sensor_Init()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
sensor_IO_init();
 80002ec:	f000 f802 	bl	80002f4 <sensor_IO_init>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <sensor_IO_init>:

void
sensor_IO_init()
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (0b1 << 1); //takt za gpioB
 80002f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000328 <sensor_IO_init+0x34>)
 80002fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000328 <sensor_IO_init+0x34>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	64d3      	str	r3, [r2, #76]	@ 0x4c

	GPIOB-> MODER &= ~(0b11 << 2* infra_1);  //PB1
 8000304:	4b09      	ldr	r3, [pc, #36]	@ (800032c <sensor_IO_init+0x38>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a09      	ldr	r2, [pc, #36]	@ (8000330 <sensor_IO_init+0x3c>)
 800030a:	7812      	ldrb	r2, [r2, #0]
 800030c:	0052      	lsls	r2, r2, #1
 800030e:	2103      	movs	r1, #3
 8000310:	fa01 f202 	lsl.w	r2, r1, r2
 8000314:	43d2      	mvns	r2, r2
 8000316:	4611      	mov	r1, r2
 8000318:	4a04      	ldr	r2, [pc, #16]	@ (800032c <sensor_IO_init+0x38>)
 800031a:	400b      	ands	r3, r1
 800031c:	6013      	str	r3, [r2, #0]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40021000 	.word	0x40021000
 800032c:	48000400 	.word	0x48000400
 8000330:	20000000 	.word	0x20000000

08000334 <sensor_JedanJedini>:

bool
sensor_JedanJedini()
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
	if(GPIOB->IDR & (0b1<<infra_1))
 8000338:	4b08      	ldr	r3, [pc, #32]	@ (800035c <sensor_JedanJedini+0x28>)
 800033a:	691b      	ldr	r3, [r3, #16]
 800033c:	4a08      	ldr	r2, [pc, #32]	@ (8000360 <sensor_JedanJedini+0x2c>)
 800033e:	7812      	ldrb	r2, [r2, #0]
 8000340:	4611      	mov	r1, r2
 8000342:	2201      	movs	r2, #1
 8000344:	408a      	lsls	r2, r1
 8000346:	4013      	ands	r3, r2
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <sensor_JedanJedini+0x1c>
		return true;
 800034c:	2301      	movs	r3, #1
 800034e:	e000      	b.n	8000352 <sensor_JedanJedini+0x1e>
	return false;
 8000350:	2300      	movs	r3, #0
}
 8000352:	4618      	mov	r0, r3
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	48000400 	.word	0x48000400
 8000360:	20000000 	.word	0x20000000

08000364 <tactic_yellow_3>:
	default:
		break;
	}
}

void tactic_yellow_3(uint8_t AX_Pogonski, uint8_t AX_Zakretni) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	460a      	mov	r2, r1
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	4613      	mov	r3, r2
 8000372:	71bb      	strb	r3, [r7, #6]
	switch (tactic_state) {
 8000374:	4b82      	ldr	r3, [pc, #520]	@ (8000580 <tactic_yellow_3+0x21c>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b0f      	cmp	r3, #15
 800037c:	f200 8315 	bhi.w	80009aa <tactic_yellow_3+0x646>
 8000380:	a201      	add	r2, pc, #4	@ (adr r2, 8000388 <tactic_yellow_3+0x24>)
 8000382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000386:	bf00      	nop
 8000388:	080003c9 	.word	0x080003c9
 800038c:	080003e9 	.word	0x080003e9
 8000390:	08000451 	.word	0x08000451
 8000394:	080004a9 	.word	0x080004a9
 8000398:	08000501 	.word	0x08000501
 800039c:	08000559 	.word	0x08000559
 80003a0:	08000679 	.word	0x08000679
 80003a4:	080006d1 	.word	0x080006d1
 80003a8:	08000729 	.word	0x08000729
 80003ac:	08000781 	.word	0x08000781
 80003b0:	080007d9 	.word	0x080007d9
 80003b4:	08000831 	.word	0x08000831
 80003b8:	08000889 	.word	0x08000889
 80003bc:	080008e1 	.word	0x080008e1
 80003c0:	08000945 	.word	0x08000945
 80003c4:	0800099d 	.word	0x0800099d
	case 0:
		if (IO_cinc()) {
 80003c8:	f000 ffc0 	bl	800134c <IO_cinc>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	f000 82ed 	beq.w	80009ae <tactic_yellow_3+0x64a>
			timer_start_sys_time();
 80003d4:	f001 f856 	bl	8001484 <timer_start_sys_time>
			tactic_state++;
 80003d8:	4b69      	ldr	r3, [pc, #420]	@ (8000580 <tactic_yellow_3+0x21c>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	3301      	adds	r3, #1
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	4b67      	ldr	r3, [pc, #412]	@ (8000580 <tactic_yellow_3+0x21c>)
 80003e4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80003e6:	e2e2      	b.n	80009ae <tactic_yellow_3+0x64a>

	case 1:
		TajmerDelay(90000); //90000  //200
 80003e8:	4866      	ldr	r0, [pc, #408]	@ (8000584 <tactic_yellow_3+0x220>)
 80003ea:	f001 f85b 	bl	80014a4 <TajmerDelay>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80003ee:	79bb      	ldrb	r3, [r7, #6]
 80003f0:	22c8      	movs	r2, #200	@ 0xc8
 80003f2:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff fee8 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80003fc:	79bb      	ldrb	r3, [r7, #6]
 80003fe:	22c8      	movs	r2, #200	@ 0xc8
 8000400:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff fee1 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 800040a:	20c8      	movs	r0, #200	@ 0xc8
 800040c:	f001 f84a 	bl	80014a4 <TajmerDelay>
		ax_wheel_mode(AX_Pogonski);
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff33 	bl	800027e <ax_wheel_mode>
		TajmerDelay(200);
 8000418:	20c8      	movs	r0, #200	@ 0xc8
 800041a:	f001 f843 	bl	80014a4 <TajmerDelay>
		ax_angle_move(AX_Pogonski, 0, 512);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff fed0 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 800042c:	20c8      	movs	r0, #200	@ 0xc8
 800042e:	f001 f839 	bl	80014a4 <TajmerDelay>
		ax_angle_move(AX_Pogonski, 0, 767);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fec6 	bl	80001cc <ax_angle_move>

		tactic_state++;
 8000440:	4b4f      	ldr	r3, [pc, #316]	@ (8000580 <tactic_yellow_3+0x21c>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	b2db      	uxtb	r3, r3
 8000446:	3301      	adds	r3, #1
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b4d      	ldr	r3, [pc, #308]	@ (8000580 <tactic_yellow_3+0x21c>)
 800044c:	701a      	strb	r2, [r3, #0]
		break;
 800044e:	e2af      	b.n	80009b0 <tactic_yellow_3+0x64c>

	case 2:
		sensors_case_timer = SENSOR_JJ;
 8000450:	4b4d      	ldr	r3, [pc, #308]	@ (8000588 <tactic_yellow_3+0x224>)
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000456:	4b4d      	ldr	r3, [pc, #308]	@ (800058c <tactic_yellow_3+0x228>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	b2db      	uxtb	r3, r3
 800045c:	2b00      	cmp	r3, #0
 800045e:	d00b      	beq.n	8000478 <tactic_yellow_3+0x114>

			interrupted_func_stop(AX_Pogonski);
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	4618      	mov	r0, r3
 8000464:	f000 fdde 	bl	8001024 <interrupted_func_stop>
			tactic_state ++;
 8000468:	4b45      	ldr	r3, [pc, #276]	@ (8000580 <tactic_yellow_3+0x21c>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	b2db      	uxtb	r3, r3
 800046e:	3301      	adds	r3, #1
 8000470:	b2da      	uxtb	r2, r3
 8000472:	4b43      	ldr	r3, [pc, #268]	@ (8000580 <tactic_yellow_3+0x21c>)
 8000474:	701a      	strb	r2, [r3, #0]
 8000476:	e017      	b.n	80004a8 <tactic_yellow_3+0x144>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff feff 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000480:	2064      	movs	r0, #100	@ 0x64
 8000482:	f001 f80f 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800048c:	2100      	movs	r1, #0
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff fe9c 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000494:	2096      	movs	r0, #150	@ 0x96
 8000496:	f001 f805 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 800049a:	4b39      	ldr	r3, [pc, #228]	@ (8000580 <tactic_yellow_3+0x21c>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	3301      	adds	r3, #1
 80004a2:	b2da      	uxtb	r2, r3
 80004a4:	4b36      	ldr	r3, [pc, #216]	@ (8000580 <tactic_yellow_3+0x21c>)
 80004a6:	701a      	strb	r2, [r3, #0]
		}
	case 3:
		sensors_case_timer = SENSOR_JJ;
 80004a8:	4b37      	ldr	r3, [pc, #220]	@ (8000588 <tactic_yellow_3+0x224>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 80004ae:	4b37      	ldr	r3, [pc, #220]	@ (800058c <tactic_yellow_3+0x228>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d00b      	beq.n	80004d0 <tactic_yellow_3+0x16c>

			interrupted_func_stop(AX_Pogonski);
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fdb2 	bl	8001024 <interrupted_func_stop>
			tactic_state ++;
 80004c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000580 <tactic_yellow_3+0x21c>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	3301      	adds	r3, #1
 80004c8:	b2da      	uxtb	r2, r3
 80004ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000580 <tactic_yellow_3+0x21c>)
 80004cc:	701a      	strb	r2, [r3, #0]
 80004ce:	e017      	b.n	8000500 <tactic_yellow_3+0x19c>
		} else {
			ax_wheel_mode(AX_Pogonski);
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff fed3 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80004d8:	2064      	movs	r0, #100	@ 0x64
 80004da:	f000 ffe3 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff fe70 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 80004ec:	2096      	movs	r0, #150	@ 0x96
 80004ee:	f000 ffd9 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 80004f2:	4b23      	ldr	r3, [pc, #140]	@ (8000580 <tactic_yellow_3+0x21c>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	3301      	adds	r3, #1
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b20      	ldr	r3, [pc, #128]	@ (8000580 <tactic_yellow_3+0x21c>)
 80004fe:	701a      	strb	r2, [r3, #0]
		}
	case 4:
		sensors_case_timer = SENSOR_JJ;
 8000500:	4b21      	ldr	r3, [pc, #132]	@ (8000588 <tactic_yellow_3+0x224>)
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000506:	4b21      	ldr	r3, [pc, #132]	@ (800058c <tactic_yellow_3+0x228>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b2db      	uxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d00b      	beq.n	8000528 <tactic_yellow_3+0x1c4>

			interrupted_func_stop(AX_Pogonski);
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	4618      	mov	r0, r3
 8000514:	f000 fd86 	bl	8001024 <interrupted_func_stop>
			tactic_state ++;
 8000518:	4b19      	ldr	r3, [pc, #100]	@ (8000580 <tactic_yellow_3+0x21c>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	3301      	adds	r3, #1
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <tactic_yellow_3+0x21c>)
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	e017      	b.n	8000558 <tactic_yellow_3+0x1f4>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff fea7 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000530:	2064      	movs	r0, #100	@ 0x64
 8000532:	f000 ffb7 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff fe44 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000544:	2096      	movs	r0, #150	@ 0x96
 8000546:	f000 ffad 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 800054a:	4b0d      	ldr	r3, [pc, #52]	@ (8000580 <tactic_yellow_3+0x21c>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	3301      	adds	r3, #1
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b0a      	ldr	r3, [pc, #40]	@ (8000580 <tactic_yellow_3+0x21c>)
 8000556:	701a      	strb	r2, [r3, #0]
		}
	case 5:
		sensors_case_timer = SENSOR_JJ;
 8000558:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <tactic_yellow_3+0x224>)
 800055a:	2201      	movs	r2, #1
 800055c:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 800055e:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <tactic_yellow_3+0x228>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d013      	beq.n	8000590 <tactic_yellow_3+0x22c>

			interrupted_func_stop(AX_Pogonski);
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fd5a 	bl	8001024 <interrupted_func_stop>
			tactic_state ++;
 8000570:	4b03      	ldr	r3, [pc, #12]	@ (8000580 <tactic_yellow_3+0x21c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	3301      	adds	r3, #1
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4b01      	ldr	r3, [pc, #4]	@ (8000580 <tactic_yellow_3+0x21c>)
 800057c:	701a      	strb	r2, [r3, #0]
 800057e:	e07b      	b.n	8000678 <tactic_yellow_3+0x314>
 8000580:	2000002c 	.word	0x2000002c
 8000584:	00015f90 	.word	0x00015f90
 8000588:	20000034 	.word	0x20000034
 800058c:	20000035 	.word	0x20000035
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fe73 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000598:	2064      	movs	r0, #100	@ 0x64
 800059a:	f000 ff83 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 767);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fe10 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff fe09 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe02 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fdfb 	bl	80001cc <ax_angle_move>
			TajmerDelay(200);
 80005d6:	20c8      	movs	r0, #200	@ 0xc8
 80005d8:	f000 ff64 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Zakretni, DESNOPP, 1000);
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005e2:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fdf0 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, DESNOPP, 1000);
 80005ec:	79bb      	ldrb	r3, [r7, #6]
 80005ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005f2:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fde8 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, DESNOPP, 1000);
 80005fc:	79bb      	ldrb	r3, [r7, #6]
 80005fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000602:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fde0 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, DESNOPP, 1000);
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000612:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff fdd8 	bl	80001cc <ax_angle_move>
			TajmerDelay(400);
 800061c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000620:	f000 ff40 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800062a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fdcc 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000634:	79bb      	ldrb	r3, [r7, #6]
 8000636:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800063a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fdc4 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800064a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff fdbc 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800065a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fdb4 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000664:	2096      	movs	r0, #150	@ 0x96
 8000666:	f000 ff1d 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 800066a:	4ba7      	ldr	r3, [pc, #668]	@ (8000908 <tactic_yellow_3+0x5a4>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	3301      	adds	r3, #1
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4ba4      	ldr	r3, [pc, #656]	@ (8000908 <tactic_yellow_3+0x5a4>)
 8000676:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		sensors_case_timer = SENSOR_JJ;
 8000678:	4ba4      	ldr	r3, [pc, #656]	@ (800090c <tactic_yellow_3+0x5a8>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 800067e:	4ba4      	ldr	r3, [pc, #656]	@ (8000910 <tactic_yellow_3+0x5ac>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00b      	beq.n	80006a0 <tactic_yellow_3+0x33c>

			interrupted_func_stop(AX_Pogonski);
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fcca 	bl	8001024 <interrupted_func_stop>
						tactic_state ++;
 8000690:	4b9d      	ldr	r3, [pc, #628]	@ (8000908 <tactic_yellow_3+0x5a4>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	3301      	adds	r3, #1
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b9b      	ldr	r3, [pc, #620]	@ (8000908 <tactic_yellow_3+0x5a4>)
 800069c:	701a      	strb	r2, [r3, #0]
 800069e:	e017      	b.n	80006d0 <tactic_yellow_3+0x36c>
		} else {
			ax_wheel_mode(AX_Pogonski);
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fdeb 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80006a8:	2064      	movs	r0, #100	@ 0x64
 80006aa:	f000 fefb 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fd88 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 80006bc:	2096      	movs	r0, #150	@ 0x96
 80006be:	f000 fef1 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 80006c2:	4b91      	ldr	r3, [pc, #580]	@ (8000908 <tactic_yellow_3+0x5a4>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	3301      	adds	r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b8e      	ldr	r3, [pc, #568]	@ (8000908 <tactic_yellow_3+0x5a4>)
 80006ce:	701a      	strb	r2, [r3, #0]
		}
	case 7:
		sensors_case_timer = SENSOR_JJ;
 80006d0:	4b8e      	ldr	r3, [pc, #568]	@ (800090c <tactic_yellow_3+0x5a8>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 80006d6:	4b8e      	ldr	r3, [pc, #568]	@ (8000910 <tactic_yellow_3+0x5ac>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d00b      	beq.n	80006f8 <tactic_yellow_3+0x394>

			interrupted_func_stop(AX_Pogonski);
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fc9e 	bl	8001024 <interrupted_func_stop>
						tactic_state ++;
 80006e8:	4b87      	ldr	r3, [pc, #540]	@ (8000908 <tactic_yellow_3+0x5a4>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	3301      	adds	r3, #1
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b85      	ldr	r3, [pc, #532]	@ (8000908 <tactic_yellow_3+0x5a4>)
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	e017      	b.n	8000728 <tactic_yellow_3+0x3c4>
		} else {
			ax_wheel_mode(AX_Pogonski);
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fdbf 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000700:	2064      	movs	r0, #100	@ 0x64
 8000702:	f000 fecf 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fd5c 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000714:	2096      	movs	r0, #150	@ 0x96
 8000716:	f000 fec5 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 800071a:	4b7b      	ldr	r3, [pc, #492]	@ (8000908 <tactic_yellow_3+0x5a4>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b78      	ldr	r3, [pc, #480]	@ (8000908 <tactic_yellow_3+0x5a4>)
 8000726:	701a      	strb	r2, [r3, #0]
		}
	case 8:
		sensors_case_timer = SENSOR_JJ;
 8000728:	4b78      	ldr	r3, [pc, #480]	@ (800090c <tactic_yellow_3+0x5a8>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 800072e:	4b78      	ldr	r3, [pc, #480]	@ (8000910 <tactic_yellow_3+0x5ac>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d00b      	beq.n	8000750 <tactic_yellow_3+0x3ec>

			interrupted_func_stop(AX_Pogonski);
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fc72 	bl	8001024 <interrupted_func_stop>
						tactic_state ++;
 8000740:	4b71      	ldr	r3, [pc, #452]	@ (8000908 <tactic_yellow_3+0x5a4>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	3301      	adds	r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b6f      	ldr	r3, [pc, #444]	@ (8000908 <tactic_yellow_3+0x5a4>)
 800074c:	701a      	strb	r2, [r3, #0]
 800074e:	e017      	b.n	8000780 <tactic_yellow_3+0x41c>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fd93 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000758:	2064      	movs	r0, #100	@ 0x64
 800075a:	f000 fea3 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fd30 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 800076c:	2096      	movs	r0, #150	@ 0x96
 800076e:	f000 fe99 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 8000772:	4b65      	ldr	r3, [pc, #404]	@ (8000908 <tactic_yellow_3+0x5a4>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	3301      	adds	r3, #1
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b62      	ldr	r3, [pc, #392]	@ (8000908 <tactic_yellow_3+0x5a4>)
 800077e:	701a      	strb	r2, [r3, #0]
		}
	case 9:
		sensors_case_timer = SENSOR_JJ;
 8000780:	4b62      	ldr	r3, [pc, #392]	@ (800090c <tactic_yellow_3+0x5a8>)
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000786:	4b62      	ldr	r3, [pc, #392]	@ (8000910 <tactic_yellow_3+0x5ac>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00b      	beq.n	80007a8 <tactic_yellow_3+0x444>

			interrupted_func_stop(AX_Pogonski);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fc46 	bl	8001024 <interrupted_func_stop>
						tactic_state ++;
 8000798:	4b5b      	ldr	r3, [pc, #364]	@ (8000908 <tactic_yellow_3+0x5a4>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	3301      	adds	r3, #1
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b59      	ldr	r3, [pc, #356]	@ (8000908 <tactic_yellow_3+0x5a4>)
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	e017      	b.n	80007d8 <tactic_yellow_3+0x474>
		} else {
			ax_wheel_mode(AX_Pogonski);
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fd67 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80007b0:	2064      	movs	r0, #100	@ 0x64
 80007b2:	f000 fe77 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd04 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 80007c4:	2096      	movs	r0, #150	@ 0x96
 80007c6:	f000 fe6d 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 80007ca:	4b4f      	ldr	r3, [pc, #316]	@ (8000908 <tactic_yellow_3+0x5a4>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	3301      	adds	r3, #1
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b4c      	ldr	r3, [pc, #304]	@ (8000908 <tactic_yellow_3+0x5a4>)
 80007d6:	701a      	strb	r2, [r3, #0]
		}
	case 10:
		sensors_case_timer = SENSOR_JJ;
 80007d8:	4b4c      	ldr	r3, [pc, #304]	@ (800090c <tactic_yellow_3+0x5a8>)
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 80007de:	4b4c      	ldr	r3, [pc, #304]	@ (8000910 <tactic_yellow_3+0x5ac>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d00b      	beq.n	8000800 <tactic_yellow_3+0x49c>

			interrupted_func_stop(AX_Pogonski);
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fc1a 	bl	8001024 <interrupted_func_stop>
			tactic_state ++;
 80007f0:	4b45      	ldr	r3, [pc, #276]	@ (8000908 <tactic_yellow_3+0x5a4>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	3301      	adds	r3, #1
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b43      	ldr	r3, [pc, #268]	@ (8000908 <tactic_yellow_3+0x5a4>)
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	e017      	b.n	8000830 <tactic_yellow_3+0x4cc>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fd3b 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000808:	2064      	movs	r0, #100	@ 0x64
 800080a:	f000 fe4b 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fcd8 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 800081c:	2096      	movs	r0, #150	@ 0x96
 800081e:	f000 fe41 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 8000822:	4b39      	ldr	r3, [pc, #228]	@ (8000908 <tactic_yellow_3+0x5a4>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	3301      	adds	r3, #1
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b36      	ldr	r3, [pc, #216]	@ (8000908 <tactic_yellow_3+0x5a4>)
 800082e:	701a      	strb	r2, [r3, #0]
		}
	case 11:
		sensors_case_timer = SENSOR_JJ;
 8000830:	4b36      	ldr	r3, [pc, #216]	@ (800090c <tactic_yellow_3+0x5a8>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000836:	4b36      	ldr	r3, [pc, #216]	@ (8000910 <tactic_yellow_3+0x5ac>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d00b      	beq.n	8000858 <tactic_yellow_3+0x4f4>

			interrupted_func_stop(AX_Pogonski);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fbee 	bl	8001024 <interrupted_func_stop>
			tactic_state ++;
 8000848:	4b2f      	ldr	r3, [pc, #188]	@ (8000908 <tactic_yellow_3+0x5a4>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	3301      	adds	r3, #1
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b2d      	ldr	r3, [pc, #180]	@ (8000908 <tactic_yellow_3+0x5a4>)
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	e017      	b.n	8000888 <tactic_yellow_3+0x524>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fd0f 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000860:	2064      	movs	r0, #100	@ 0x64
 8000862:	f000 fe1f 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fcac 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000874:	2096      	movs	r0, #150	@ 0x96
 8000876:	f000 fe15 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 800087a:	4b23      	ldr	r3, [pc, #140]	@ (8000908 <tactic_yellow_3+0x5a4>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	3301      	adds	r3, #1
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b20      	ldr	r3, [pc, #128]	@ (8000908 <tactic_yellow_3+0x5a4>)
 8000886:	701a      	strb	r2, [r3, #0]
		}
	case 12:
		sensors_case_timer = SENSOR_JJ;
 8000888:	4b20      	ldr	r3, [pc, #128]	@ (800090c <tactic_yellow_3+0x5a8>)
 800088a:	2201      	movs	r2, #1
 800088c:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 800088e:	4b20      	ldr	r3, [pc, #128]	@ (8000910 <tactic_yellow_3+0x5ac>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00b      	beq.n	80008b0 <tactic_yellow_3+0x54c>

			interrupted_func_stop(AX_Pogonski);
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fbc2 	bl	8001024 <interrupted_func_stop>
			tactic_state ++;
 80008a0:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <tactic_yellow_3+0x5a4>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	3301      	adds	r3, #1
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <tactic_yellow_3+0x5a4>)
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e017      	b.n	80008e0 <tactic_yellow_3+0x57c>
		} else {
			ax_wheel_mode(AX_Pogonski);
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fce3 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80008b8:	2064      	movs	r0, #100	@ 0x64
 80008ba:	f000 fdf3 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fc80 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 80008cc:	2096      	movs	r0, #150	@ 0x96
 80008ce:	f000 fde9 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 80008d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <tactic_yellow_3+0x5a4>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	3301      	adds	r3, #1
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <tactic_yellow_3+0x5a4>)
 80008de:	701a      	strb	r2, [r3, #0]
		}
	case 13:
			sensors_case_timer = SENSOR_JJ;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <tactic_yellow_3+0x5a8>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 80008e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <tactic_yellow_3+0x5ac>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d011      	beq.n	8000914 <tactic_yellow_3+0x5b0>

				interrupted_func_stop(AX_Pogonski);
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fb96 	bl	8001024 <interrupted_func_stop>
				tactic_state ++;
 80008f8:	4b03      	ldr	r3, [pc, #12]	@ (8000908 <tactic_yellow_3+0x5a4>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	3301      	adds	r3, #1
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b01      	ldr	r3, [pc, #4]	@ (8000908 <tactic_yellow_3+0x5a4>)
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	e01d      	b.n	8000944 <tactic_yellow_3+0x5e0>
 8000908:	2000002c 	.word	0x2000002c
 800090c:	20000034 	.word	0x20000034
 8000910:	20000035 	.word	0x20000035
			} else {
				ax_wheel_mode(AX_Pogonski);
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fcb1 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 800091c:	2064      	movs	r0, #100	@ 0x64
 800091e:	f000 fdc1 	bl	80014a4 <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 1023);
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fc4e 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 8000930:	2096      	movs	r0, #150	@ 0x96
 8000932:	f000 fdb7 	bl	80014a4 <TajmerDelay>
				tactic_state++;
 8000936:	4b20      	ldr	r3, [pc, #128]	@ (80009b8 <tactic_yellow_3+0x654>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	3301      	adds	r3, #1
 800093e:	b2da      	uxtb	r2, r3
 8000940:	4b1d      	ldr	r3, [pc, #116]	@ (80009b8 <tactic_yellow_3+0x654>)
 8000942:	701a      	strb	r2, [r3, #0]
			}
	case 14:
				sensors_case_timer = SENSOR_JJ;
 8000944:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <tactic_yellow_3+0x658>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]

				if (interrupted) {
 800094a:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <tactic_yellow_3+0x65c>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00b      	beq.n	800096c <tactic_yellow_3+0x608>

					interrupted_func_stop(AX_Pogonski);
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	4618      	mov	r0, r3
 8000958:	f000 fb64 	bl	8001024 <interrupted_func_stop>
					tactic_state ++;
 800095c:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <tactic_yellow_3+0x654>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	3301      	adds	r3, #1
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <tactic_yellow_3+0x654>)
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	e017      	b.n	800099c <tactic_yellow_3+0x638>
				} else {
					ax_wheel_mode(AX_Pogonski);
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fc85 	bl	800027e <ax_wheel_mode>
					TajmerDelay(100);
 8000974:	2064      	movs	r0, #100	@ 0x64
 8000976:	f000 fd95 	bl	80014a4 <TajmerDelay>
					ax_angle_move(AX_Pogonski, 0, 1023);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fc22 	bl	80001cc <ax_angle_move>

					TajmerDelay(150);
 8000988:	2096      	movs	r0, #150	@ 0x96
 800098a:	f000 fd8b 	bl	80014a4 <TajmerDelay>
					tactic_state++;
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <tactic_yellow_3+0x654>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	3301      	adds	r3, #1
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <tactic_yellow_3+0x654>)
 800099a:	701a      	strb	r2, [r3, #0]
				}
	case 15:
		ax_angle_move(AX_Pogonski, 0, 0);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fc12 	bl	80001cc <ax_angle_move>
		break;
 80009a8:	e002      	b.n	80009b0 <tactic_yellow_3+0x64c>
	default:
		break;
 80009aa:	bf00      	nop
 80009ac:	e000      	b.n	80009b0 <tactic_yellow_3+0x64c>
		break;
 80009ae:	bf00      	nop
	}
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2000002c 	.word	0x2000002c
 80009bc:	20000034 	.word	0x20000034
 80009c0:	20000035 	.word	0x20000035

080009c4 <tactic_blue_3>:
	default:
		break;
	}
}

void tactic_blue_3(uint8_t AX_Pogonski, uint8_t AX_Zakretni) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	460a      	mov	r2, r1
 80009ce:	71fb      	strb	r3, [r7, #7]
 80009d0:	4613      	mov	r3, r2
 80009d2:	71bb      	strb	r3, [r7, #6]
	switch (tactic_state) {
 80009d4:	4b82      	ldr	r3, [pc, #520]	@ (8000be0 <tactic_blue_3+0x21c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b0f      	cmp	r3, #15
 80009dc:	f200 8315 	bhi.w	800100a <tactic_blue_3+0x646>
 80009e0:	a201      	add	r2, pc, #4	@ (adr r2, 80009e8 <tactic_blue_3+0x24>)
 80009e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e6:	bf00      	nop
 80009e8:	08000a29 	.word	0x08000a29
 80009ec:	08000a49 	.word	0x08000a49
 80009f0:	08000ab1 	.word	0x08000ab1
 80009f4:	08000b09 	.word	0x08000b09
 80009f8:	08000b61 	.word	0x08000b61
 80009fc:	08000bb9 	.word	0x08000bb9
 8000a00:	08000cd9 	.word	0x08000cd9
 8000a04:	08000d31 	.word	0x08000d31
 8000a08:	08000d89 	.word	0x08000d89
 8000a0c:	08000de1 	.word	0x08000de1
 8000a10:	08000e39 	.word	0x08000e39
 8000a14:	08000e91 	.word	0x08000e91
 8000a18:	08000ee9 	.word	0x08000ee9
 8000a1c:	08000f41 	.word	0x08000f41
 8000a20:	08000fa5 	.word	0x08000fa5
 8000a24:	08000ffd 	.word	0x08000ffd
	case 0:
		if (IO_cinc()) {
 8000a28:	f000 fc90 	bl	800134c <IO_cinc>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 82ed 	beq.w	800100e <tactic_blue_3+0x64a>
			timer_start_sys_time();
 8000a34:	f000 fd26 	bl	8001484 <timer_start_sys_time>
			tactic_state++;
 8000a38:	4b69      	ldr	r3, [pc, #420]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	3301      	adds	r3, #1
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b67      	ldr	r3, [pc, #412]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000a44:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000a46:	e2e2      	b.n	800100e <tactic_blue_3+0x64a>

	case 1:
		TajmerDelay(90000); //90000 //200
 8000a48:	4866      	ldr	r0, [pc, #408]	@ (8000be4 <tactic_blue_3+0x220>)
 8000a4a:	f000 fd2b 	bl	80014a4 <TajmerDelay>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	22c8      	movs	r2, #200	@ 0xc8
 8000a52:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fbb8 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 8000a5c:	79bb      	ldrb	r3, [r7, #6]
 8000a5e:	22c8      	movs	r2, #200	@ 0xc8
 8000a60:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fbb1 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 8000a6a:	20c8      	movs	r0, #200	@ 0xc8
 8000a6c:	f000 fd1a 	bl	80014a4 <TajmerDelay>
		ax_wheel_mode(AX_Pogonski);
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fc03 	bl	800027e <ax_wheel_mode>
		TajmerDelay(200);
 8000a78:	20c8      	movs	r0, #200	@ 0xc8
 8000a7a:	f000 fd13 	bl	80014a4 <TajmerDelay>
		ax_angle_move(AX_Pogonski, 0, 512);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fba0 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 8000a8c:	20c8      	movs	r0, #200	@ 0xc8
 8000a8e:	f000 fd09 	bl	80014a4 <TajmerDelay>
		ax_angle_move(AX_Pogonski, 0, 767);
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fb96 	bl	80001cc <ax_angle_move>

		tactic_state++;
 8000aa0:	4b4f      	ldr	r3, [pc, #316]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b4d      	ldr	r3, [pc, #308]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000aac:	701a      	strb	r2, [r3, #0]
		break;
 8000aae:	e2af      	b.n	8001010 <tactic_blue_3+0x64c>

	case 2:
		sensors_case_timer = SENSOR_JJ;
 8000ab0:	4b4d      	ldr	r3, [pc, #308]	@ (8000be8 <tactic_blue_3+0x224>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000ab6:	4b4d      	ldr	r3, [pc, #308]	@ (8000bec <tactic_blue_3+0x228>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00b      	beq.n	8000ad8 <tactic_blue_3+0x114>

			interrupted_func_stop(AX_Pogonski);
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 faae 	bl	8001024 <interrupted_func_stop>
						tactic_state ++;
 8000ac8:	4b45      	ldr	r3, [pc, #276]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	3301      	adds	r3, #1
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b43      	ldr	r3, [pc, #268]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	e017      	b.n	8000b08 <tactic_blue_3+0x144>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fbcf 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000ae0:	2064      	movs	r0, #100	@ 0x64
 8000ae2:	f000 fcdf 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fb6c 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000af4:	2096      	movs	r0, #150	@ 0x96
 8000af6:	f000 fcd5 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 8000afa:	4b39      	ldr	r3, [pc, #228]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	3301      	adds	r3, #1
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b36      	ldr	r3, [pc, #216]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000b06:	701a      	strb	r2, [r3, #0]
		}
	case 3:
		sensors_case_timer = SENSOR_JJ;
 8000b08:	4b37      	ldr	r3, [pc, #220]	@ (8000be8 <tactic_blue_3+0x224>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000b0e:	4b37      	ldr	r3, [pc, #220]	@ (8000bec <tactic_blue_3+0x228>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00b      	beq.n	8000b30 <tactic_blue_3+0x16c>

			interrupted_func_stop(AX_Pogonski);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fa82 	bl	8001024 <interrupted_func_stop>
						tactic_state ++;
 8000b20:	4b2f      	ldr	r3, [pc, #188]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	3301      	adds	r3, #1
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	e017      	b.n	8000b60 <tactic_blue_3+0x19c>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fba3 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000b38:	2064      	movs	r0, #100	@ 0x64
 8000b3a:	f000 fcb3 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fb40 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000b4c:	2096      	movs	r0, #150	@ 0x96
 8000b4e:	f000 fca9 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 8000b52:	4b23      	ldr	r3, [pc, #140]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	3301      	adds	r3, #1
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000b5e:	701a      	strb	r2, [r3, #0]
		}
	case 4:
		sensors_case_timer = SENSOR_JJ;
 8000b60:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <tactic_blue_3+0x224>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <tactic_blue_3+0x228>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d00b      	beq.n	8000b88 <tactic_blue_3+0x1c4>

			interrupted_func_stop(AX_Pogonski);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fa56 	bl	8001024 <interrupted_func_stop>
						tactic_state ++;
 8000b78:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	3301      	adds	r3, #1
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e017      	b.n	8000bb8 <tactic_blue_3+0x1f4>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fb77 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000b90:	2064      	movs	r0, #100	@ 0x64
 8000b92:	f000 fc87 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fb14 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000ba4:	2096      	movs	r0, #150	@ 0x96
 8000ba6:	f000 fc7d 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000bb6:	701a      	strb	r2, [r3, #0]
		}
	case 5:
		sensors_case_timer = SENSOR_JJ;
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <tactic_blue_3+0x224>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <tactic_blue_3+0x228>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d013      	beq.n	8000bf0 <tactic_blue_3+0x22c>

			interrupted_func_stop(AX_Pogonski);
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fa2a 	bl	8001024 <interrupted_func_stop>
						tactic_state ++;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4b01      	ldr	r3, [pc, #4]	@ (8000be0 <tactic_blue_3+0x21c>)
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e07b      	b.n	8000cd8 <tactic_blue_3+0x314>
 8000be0:	2000002c 	.word	0x2000002c
 8000be4:	00015f90 	.word	0x00015f90
 8000be8:	20000034 	.word	0x20000034
 8000bec:	20000035 	.word	0x20000035
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fb43 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000bf8:	2064      	movs	r0, #100	@ 0x64
 8000bfa:	f000 fc53 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fae0 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fad9 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fad2 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff facb 	bl	80001cc <ax_angle_move>
			TajmerDelay(200);
 8000c36:	20c8      	movs	r0, #200	@ 0xc8
 8000c38:	f000 fc34 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Zakretni, LEVOPP, 1000);
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c42:	f240 2146 	movw	r1, #582	@ 0x246
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fac0 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, LEVOPP, 1000);
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c52:	f240 2146 	movw	r1, #582	@ 0x246
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fab8 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, LEVOPP, 1000);
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c62:	f240 2146 	movw	r1, #582	@ 0x246
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fab0 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, LEVOPP, 1000);
 8000c6c:	79bb      	ldrb	r3, [r7, #6]
 8000c6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c72:	f240 2146 	movw	r1, #582	@ 0x246
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff faa8 	bl	80001cc <ax_angle_move>
			TajmerDelay(800);
 8000c7c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000c80:	f000 fc10 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c8a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fa9c 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c9a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fa94 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000caa:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fa8c 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000cb4:	79bb      	ldrb	r3, [r7, #6]
 8000cb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cba:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fa84 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000cc4:	2096      	movs	r0, #150	@ 0x96
 8000cc6:	f000 fbed 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 8000cca:	4ba7      	ldr	r3, [pc, #668]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	4ba4      	ldr	r3, [pc, #656]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000cd6:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		sensors_case_timer = SENSOR_JJ;
 8000cd8:	4ba4      	ldr	r3, [pc, #656]	@ (8000f6c <tactic_blue_3+0x5a8>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000cde:	4ba4      	ldr	r3, [pc, #656]	@ (8000f70 <tactic_blue_3+0x5ac>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00b      	beq.n	8000d00 <tactic_blue_3+0x33c>

			interrupted_func_stop(AX_Pogonski);
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f99a 	bl	8001024 <interrupted_func_stop>
						tactic_state ++;
 8000cf0:	4b9d      	ldr	r3, [pc, #628]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b9b      	ldr	r3, [pc, #620]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000cfc:	701a      	strb	r2, [r3, #0]
 8000cfe:	e017      	b.n	8000d30 <tactic_blue_3+0x36c>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fabb 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000d08:	2064      	movs	r0, #100	@ 0x64
 8000d0a:	f000 fbcb 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fa58 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000d1c:	2096      	movs	r0, #150	@ 0x96
 8000d1e:	f000 fbc1 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 8000d22:	4b91      	ldr	r3, [pc, #580]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	3301      	adds	r3, #1
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	4b8e      	ldr	r3, [pc, #568]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000d2e:	701a      	strb	r2, [r3, #0]
		}
	case 7:
		sensors_case_timer = SENSOR_JJ;
 8000d30:	4b8e      	ldr	r3, [pc, #568]	@ (8000f6c <tactic_blue_3+0x5a8>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000d36:	4b8e      	ldr	r3, [pc, #568]	@ (8000f70 <tactic_blue_3+0x5ac>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d00b      	beq.n	8000d58 <tactic_blue_3+0x394>

			interrupted_func_stop(AX_Pogonski);
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f96e 	bl	8001024 <interrupted_func_stop>
						tactic_state ++;
 8000d48:	4b87      	ldr	r3, [pc, #540]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b85      	ldr	r3, [pc, #532]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	e017      	b.n	8000d88 <tactic_blue_3+0x3c4>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fa8f 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000d60:	2064      	movs	r0, #100	@ 0x64
 8000d62:	f000 fb9f 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fa2c 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000d74:	2096      	movs	r0, #150	@ 0x96
 8000d76:	f000 fb95 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 8000d7a:	4b7b      	ldr	r3, [pc, #492]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	3301      	adds	r3, #1
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b78      	ldr	r3, [pc, #480]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000d86:	701a      	strb	r2, [r3, #0]
		}
	case 8:
		sensors_case_timer = SENSOR_JJ;
 8000d88:	4b78      	ldr	r3, [pc, #480]	@ (8000f6c <tactic_blue_3+0x5a8>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000d8e:	4b78      	ldr	r3, [pc, #480]	@ (8000f70 <tactic_blue_3+0x5ac>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00b      	beq.n	8000db0 <tactic_blue_3+0x3ec>

			interrupted_func_stop(AX_Pogonski);
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f942 	bl	8001024 <interrupted_func_stop>
						tactic_state ++;
 8000da0:	4b71      	ldr	r3, [pc, #452]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	3301      	adds	r3, #1
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b6f      	ldr	r3, [pc, #444]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	e017      	b.n	8000de0 <tactic_blue_3+0x41c>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fa63 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000db8:	2064      	movs	r0, #100	@ 0x64
 8000dba:	f000 fb73 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fa00 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000dcc:	2096      	movs	r0, #150	@ 0x96
 8000dce:	f000 fb69 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 8000dd2:	4b65      	ldr	r3, [pc, #404]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b62      	ldr	r3, [pc, #392]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000dde:	701a      	strb	r2, [r3, #0]
		}
	case 9:
		sensors_case_timer = SENSOR_JJ;
 8000de0:	4b62      	ldr	r3, [pc, #392]	@ (8000f6c <tactic_blue_3+0x5a8>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000de6:	4b62      	ldr	r3, [pc, #392]	@ (8000f70 <tactic_blue_3+0x5ac>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00b      	beq.n	8000e08 <tactic_blue_3+0x444>

			interrupted_func_stop(AX_Pogonski);
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f916 	bl	8001024 <interrupted_func_stop>
						tactic_state ++;
 8000df8:	4b5b      	ldr	r3, [pc, #364]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	3301      	adds	r3, #1
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b59      	ldr	r3, [pc, #356]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	e017      	b.n	8000e38 <tactic_blue_3+0x474>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fa37 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000e10:	2064      	movs	r0, #100	@ 0x64
 8000e12:	f000 fb47 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff f9d4 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000e24:	2096      	movs	r0, #150	@ 0x96
 8000e26:	f000 fb3d 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 8000e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	3301      	adds	r3, #1
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b4c      	ldr	r3, [pc, #304]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000e36:	701a      	strb	r2, [r3, #0]
		}
	case 10:
		sensors_case_timer = SENSOR_JJ;
 8000e38:	4b4c      	ldr	r3, [pc, #304]	@ (8000f6c <tactic_blue_3+0x5a8>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000e3e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f70 <tactic_blue_3+0x5ac>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d00b      	beq.n	8000e60 <tactic_blue_3+0x49c>

			interrupted_func_stop(AX_Pogonski);
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f8ea 	bl	8001024 <interrupted_func_stop>
						tactic_state ++;
 8000e50:	4b45      	ldr	r3, [pc, #276]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	3301      	adds	r3, #1
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4b43      	ldr	r3, [pc, #268]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	e017      	b.n	8000e90 <tactic_blue_3+0x4cc>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fa0b 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000e68:	2064      	movs	r0, #100	@ 0x64
 8000e6a:	f000 fb1b 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff f9a8 	bl	80001cc <ax_angle_move>

			TajmerDelay(250);
 8000e7c:	20fa      	movs	r0, #250	@ 0xfa
 8000e7e:	f000 fb11 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 8000e82:	4b39      	ldr	r3, [pc, #228]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	3301      	adds	r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b36      	ldr	r3, [pc, #216]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000e8e:	701a      	strb	r2, [r3, #0]
		}
	case 11:
		sensors_case_timer = SENSOR_JJ;
 8000e90:	4b36      	ldr	r3, [pc, #216]	@ (8000f6c <tactic_blue_3+0x5a8>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000e96:	4b36      	ldr	r3, [pc, #216]	@ (8000f70 <tactic_blue_3+0x5ac>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d00b      	beq.n	8000eb8 <tactic_blue_3+0x4f4>

			interrupted_func_stop(AX_Pogonski);
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f8be 	bl	8001024 <interrupted_func_stop>
						tactic_state ++;
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	e017      	b.n	8000ee8 <tactic_blue_3+0x524>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff f9df 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000ec0:	2064      	movs	r0, #100	@ 0x64
 8000ec2:	f000 faef 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff f97c 	bl	80001cc <ax_angle_move>

			TajmerDelay(250);
 8000ed4:	20fa      	movs	r0, #250	@ 0xfa
 8000ed6:	f000 fae5 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 8000eda:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000ee6:	701a      	strb	r2, [r3, #0]
		}
	case 12:
		sensors_case_timer = SENSOR_JJ;
 8000ee8:	4b20      	ldr	r3, [pc, #128]	@ (8000f6c <tactic_blue_3+0x5a8>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000eee:	4b20      	ldr	r3, [pc, #128]	@ (8000f70 <tactic_blue_3+0x5ac>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00b      	beq.n	8000f10 <tactic_blue_3+0x54c>

			interrupted_func_stop(AX_Pogonski);
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f892 	bl	8001024 <interrupted_func_stop>
						tactic_state ++;
 8000f00:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	e017      	b.n	8000f40 <tactic_blue_3+0x57c>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff f9b3 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000f18:	2064      	movs	r0, #100	@ 0x64
 8000f1a:	f000 fac3 	bl	80014a4 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff f950 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000f2c:	2096      	movs	r0, #150	@ 0x96
 8000f2e:	f000 fab9 	bl	80014a4 <TajmerDelay>
			tactic_state++;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000f3e:	701a      	strb	r2, [r3, #0]
		}
	case 13:
			sensors_case_timer = SENSOR_JJ;
 8000f40:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <tactic_blue_3+0x5a8>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <tactic_blue_3+0x5ac>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d011      	beq.n	8000f74 <tactic_blue_3+0x5b0>

				interrupted_func_stop(AX_Pogonski);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f866 	bl	8001024 <interrupted_func_stop>
							tactic_state ++;
 8000f58:	4b03      	ldr	r3, [pc, #12]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b01      	ldr	r3, [pc, #4]	@ (8000f68 <tactic_blue_3+0x5a4>)
 8000f64:	701a      	strb	r2, [r3, #0]
 8000f66:	e01d      	b.n	8000fa4 <tactic_blue_3+0x5e0>
 8000f68:	2000002c 	.word	0x2000002c
 8000f6c:	20000034 	.word	0x20000034
 8000f70:	20000035 	.word	0x20000035
			} else {
				ax_wheel_mode(AX_Pogonski);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff f981 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000f7c:	2064      	movs	r0, #100	@ 0x64
 8000f7e:	f000 fa91 	bl	80014a4 <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 1023);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff f91e 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 8000f90:	2096      	movs	r0, #150	@ 0x96
 8000f92:	f000 fa87 	bl	80014a4 <TajmerDelay>
				tactic_state++;
 8000f96:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <tactic_blue_3+0x654>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <tactic_blue_3+0x654>)
 8000fa2:	701a      	strb	r2, [r3, #0]
			}
	case 14:
				sensors_case_timer = SENSOR_JJ;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <tactic_blue_3+0x658>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]

				if (interrupted) {
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <tactic_blue_3+0x65c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00b      	beq.n	8000fcc <tactic_blue_3+0x608>

					interrupted_func_stop(AX_Pogonski);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f834 	bl	8001024 <interrupted_func_stop>
								tactic_state ++;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	@ (8001018 <tactic_blue_3+0x654>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <tactic_blue_3+0x654>)
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e017      	b.n	8000ffc <tactic_blue_3+0x638>
				} else {
					ax_wheel_mode(AX_Pogonski);
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff f955 	bl	800027e <ax_wheel_mode>
					TajmerDelay(100);
 8000fd4:	2064      	movs	r0, #100	@ 0x64
 8000fd6:	f000 fa65 	bl	80014a4 <TajmerDelay>
					ax_angle_move(AX_Pogonski, 0, 1023);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff f8f2 	bl	80001cc <ax_angle_move>

					TajmerDelay(150);
 8000fe8:	2096      	movs	r0, #150	@ 0x96
 8000fea:	f000 fa5b 	bl	80014a4 <TajmerDelay>
					tactic_state++;
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <tactic_blue_3+0x654>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <tactic_blue_3+0x654>)
 8000ffa:	701a      	strb	r2, [r3, #0]
				}
	case 15:
		ax_angle_move(AX_Pogonski, 0, 0);
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff f8e2 	bl	80001cc <ax_angle_move>
		break;
 8001008:	e002      	b.n	8001010 <tactic_blue_3+0x64c>
	default:
		break;
 800100a:	bf00      	nop
 800100c:	e000      	b.n	8001010 <tactic_blue_3+0x64c>
		break;
 800100e:	bf00      	nop
	}
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2000002c 	.word	0x2000002c
 800101c:	20000034 	.word	0x20000034
 8001020:	20000035 	.word	0x20000035

08001024 <interrupted_func_stop>:

static void interrupted_func_stop(uint8_t AX_Pogonski) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	TajmerDelay(100);
 800102e:	2064      	movs	r0, #100	@ 0x64
 8001030:	f000 fa38 	bl	80014a4 <TajmerDelay>
	ax_angle_move(AX_Pogonski, 0, 255);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	22ff      	movs	r2, #255	@ 0xff
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f8c6 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 255);
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	22ff      	movs	r2, #255	@ 0xff
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f8c0 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 255);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	22ff      	movs	r2, #255	@ 0xff
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff f8ba 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 255);
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	22ff      	movs	r2, #255	@ 0xff
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f8b4 	bl	80001cc <ax_angle_move>
	TajmerDelay(100);
 8001064:	2064      	movs	r0, #100	@ 0x64
 8001066:	f000 fa1d 	bl	80014a4 <TajmerDelay>
	ax_angle_move(AX_Pogonski, 0, 127);
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	227f      	movs	r2, #127	@ 0x7f
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff f8ab 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 127);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	227f      	movs	r2, #127	@ 0x7f
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f8a5 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 127);
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	227f      	movs	r2, #127	@ 0x7f
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f89f 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 127);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	227f      	movs	r2, #127	@ 0x7f
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f899 	bl	80001cc <ax_angle_move>
	TajmerDelay(100);
 800109a:	2064      	movs	r0, #100	@ 0x64
 800109c:	f000 fa02 	bl	80014a4 <TajmerDelay>
	ax_angle_move(AX_Pogonski, 0, 0);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f890 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 0);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f88a 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 0);
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f884 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 0);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff f87e 	bl	80001cc <ax_angle_move>
	TajmerDelay(200);
 80010d0:	20c8      	movs	r0, #200	@ 0xc8
 80010d2:	f000 f9e7 	bl	80014a4 <TajmerDelay>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <io>:
static void
portA_init();

void
io ()
 {
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
	portC_init();
 80010e2:	f000 f807 	bl	80010f4 <portC_init>
	portB_init();
 80010e6:	f000 f815 	bl	8001114 <portB_init>
	portA_init();
 80010ea:	f000 f843 	bl	8001174 <portA_init>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <portC_init>:

static void
portC_init()
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (0b1 << 2);
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <portC_init+0x1c>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fc:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <portC_init+0x1c>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000

08001114 <portB_init>:

static void
portB_init()
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (0b1 << 1);
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <portB_init+0x58>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111c:	4a13      	ldr	r2, [pc, #76]	@ (800116c <portB_init+0x58>)
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	64d3      	str	r3, [r2, #76]	@ 0x4c

	GPIOB->MODER &= ~(0b11 << 2 * 3);
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <portB_init+0x5c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a11      	ldr	r2, [pc, #68]	@ (8001170 <portB_init+0x5c>)
 800112a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800112e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << 2 * 3);
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <portB_init+0x5c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0e      	ldr	r2, [pc, #56]	@ (8001170 <portB_init+0x5c>)
 8001136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800113a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(0b1 << 3);
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <portB_init+0x5c>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a0b      	ldr	r2, [pc, #44]	@ (8001170 <portB_init+0x5c>)
 8001142:	f023 0308 	bic.w	r3, r3, #8
 8001146:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (0b11 << 2 * 3);
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <portB_init+0x5c>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	4a08      	ldr	r2, [pc, #32]	@ (8001170 <portB_init+0x5c>)
 800114e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001152:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~(0b11 << 2 * 3);
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <portB_init+0x5c>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <portB_init+0x5c>)
 800115a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800115e:	60d3      	str	r3, [r2, #12]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000
 8001170:	48000400 	.word	0x48000400

08001174 <portA_init>:

static void
portA_init()
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (0b1 << 0);
 8001178:	4b73      	ldr	r3, [pc, #460]	@ (8001348 <portA_init+0x1d4>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117c:	4a72      	ldr	r2, [pc, #456]	@ (8001348 <portA_init+0x1d4>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	64d3      	str	r3, [r2, #76]	@ 0x4c

	GPIOA->MODER &= ~(0b11 << 2 * CINC);
 8001184:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2207      	movs	r2, #7
 800118c:	0052      	lsls	r2, r2, #1
 800118e:	2103      	movs	r1, #3
 8001190:	fa01 f202 	lsl.w	r2, r1, r2
 8001194:	43d2      	mvns	r2, r2
 8001196:	4611      	mov	r1, r2
 8001198:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800119c:	400b      	ands	r3, r1
 800119e:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * CINC); //low speed
 80011a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2207      	movs	r2, #7
 80011a8:	0052      	lsls	r2, r2, #1
 80011aa:	2103      	movs	r1, #3
 80011ac:	fa01 f202 	lsl.w	r2, r1, r2
 80011b0:	43d2      	mvns	r2, r2
 80011b2:	4611      	mov	r1, r2
 80011b4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80011b8:	400b      	ands	r3, r1
 80011ba:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 *CINC);
 80011bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2207      	movs	r2, #7
 80011c4:	0052      	lsls	r2, r2, #1
 80011c6:	2103      	movs	r1, #3
 80011c8:	fa01 f202 	lsl.w	r2, r1, r2
 80011cc:	43d2      	mvns	r2, r2
 80011ce:	4611      	mov	r1, r2
 80011d0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80011d4:	400b      	ands	r3, r1
 80011d6:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2*CINC);
 80011d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2207      	movs	r2, #7
 80011e0:	0052      	lsls	r2, r2, #1
 80011e2:	2102      	movs	r1, #2
 80011e4:	fa01 f202 	lsl.w	r2, r1, r2
 80011e8:	4611      	mov	r1, r2
 80011ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80011ee:	430b      	orrs	r3, r1
 80011f0:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_2);
 80011f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2209      	movs	r2, #9
 80011fa:	0052      	lsls	r2, r2, #1
 80011fc:	2103      	movs	r1, #3
 80011fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001202:	43d2      	mvns	r2, r2
 8001204:	4611      	mov	r1, r2
 8001206:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800120a:	400b      	ands	r3, r1
 800120c:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_2); //low speed
 800120e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2209      	movs	r2, #9
 8001216:	0052      	lsls	r2, r2, #1
 8001218:	2103      	movs	r1, #3
 800121a:	fa01 f202 	lsl.w	r2, r1, r2
 800121e:	43d2      	mvns	r2, r2
 8001220:	4611      	mov	r1, r2
 8001222:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001226:	400b      	ands	r3, r1
 8001228:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_2);
 800122a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2209      	movs	r2, #9
 8001232:	0052      	lsls	r2, r2, #1
 8001234:	2103      	movs	r1, #3
 8001236:	fa01 f202 	lsl.w	r2, r1, r2
 800123a:	43d2      	mvns	r2, r2
 800123c:	4611      	mov	r1, r2
 800123e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001242:	400b      	ands	r3, r1
 8001244:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2 * PREKIDAC_TAKTIKE_2);
 8001246:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2209      	movs	r2, #9
 800124e:	0052      	lsls	r2, r2, #1
 8001250:	2102      	movs	r1, #2
 8001252:	fa01 f202 	lsl.w	r2, r1, r2
 8001256:	4611      	mov	r1, r2
 8001258:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800125c:	430b      	orrs	r3, r1
 800125e:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_3);
 8001260:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	220a      	movs	r2, #10
 8001268:	0052      	lsls	r2, r2, #1
 800126a:	2103      	movs	r1, #3
 800126c:	fa01 f202 	lsl.w	r2, r1, r2
 8001270:	43d2      	mvns	r2, r2
 8001272:	4611      	mov	r1, r2
 8001274:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001278:	400b      	ands	r3, r1
 800127a:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_3); //low speed
 800127c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	220a      	movs	r2, #10
 8001284:	0052      	lsls	r2, r2, #1
 8001286:	2103      	movs	r1, #3
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	43d2      	mvns	r2, r2
 800128e:	4611      	mov	r1, r2
 8001290:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001294:	400b      	ands	r3, r1
 8001296:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_3);
 8001298:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	220a      	movs	r2, #10
 80012a0:	0052      	lsls	r2, r2, #1
 80012a2:	2103      	movs	r1, #3
 80012a4:	fa01 f202 	lsl.w	r2, r1, r2
 80012a8:	43d2      	mvns	r2, r2
 80012aa:	4611      	mov	r1, r2
 80012ac:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80012b0:	400b      	ands	r3, r1
 80012b2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2 * PREKIDAC_TAKTIKE_3);
 80012b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	220a      	movs	r2, #10
 80012bc:	0052      	lsls	r2, r2, #1
 80012be:	2102      	movs	r1, #2
 80012c0:	fa01 f202 	lsl.w	r2, r1, r2
 80012c4:	4611      	mov	r1, r2
 80012c6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80012ca:	430b      	orrs	r3, r1
 80012cc:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_4);
 80012ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	220b      	movs	r2, #11
 80012d6:	0052      	lsls	r2, r2, #1
 80012d8:	2103      	movs	r1, #3
 80012da:	fa01 f202 	lsl.w	r2, r1, r2
 80012de:	43d2      	mvns	r2, r2
 80012e0:	4611      	mov	r1, r2
 80012e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80012e6:	400b      	ands	r3, r1
 80012e8:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_4); //low speed
 80012ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	220b      	movs	r2, #11
 80012f2:	0052      	lsls	r2, r2, #1
 80012f4:	2103      	movs	r1, #3
 80012f6:	fa01 f202 	lsl.w	r2, r1, r2
 80012fa:	43d2      	mvns	r2, r2
 80012fc:	4611      	mov	r1, r2
 80012fe:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001302:	400b      	ands	r3, r1
 8001304:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_4);
 8001306:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	220b      	movs	r2, #11
 800130e:	0052      	lsls	r2, r2, #1
 8001310:	2103      	movs	r1, #3
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	43d2      	mvns	r2, r2
 8001318:	4611      	mov	r1, r2
 800131a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800131e:	400b      	ands	r3, r1
 8001320:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2*PREKIDAC_TAKTIKE_4);
 8001322:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	220b      	movs	r2, #11
 800132a:	0052      	lsls	r2, r2, #1
 800132c:	2102      	movs	r1, #2
 800132e:	fa01 f202 	lsl.w	r2, r1, r2
 8001332:	4611      	mov	r1, r2
 8001334:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001338:	430b      	orrs	r3, r1
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <IO_cinc>:

}

bool
IO_cinc()
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	if(!(GPIOA->IDR & (0b1 << CINC)))
 8001350:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2207      	movs	r2, #7
 8001358:	4611      	mov	r1, r2
 800135a:	2201      	movs	r2, #1
 800135c:	408a      	lsls	r2, r1
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d107      	bne.n	8001374 <IO_cinc+0x28>
		counter++;
 8001364:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <IO_cinc+0x48>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	3301      	adds	r3, #1
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <IO_cinc+0x48>)
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	e002      	b.n	800137a <IO_cinc+0x2e>
	else
		counter=0;
 8001374:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <IO_cinc+0x48>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
	if(counter)
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <IO_cinc+0x48>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <IO_cinc+0x3c>
		return true;
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <IO_cinc+0x3e>
	return false;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	2000002d 	.word	0x2000002d

08001398 <Taktika_SIMA_TRECI_3>:
			tactic_yellow_2(ID_SIMA2_POGONSKI, ID_SIMA2_ZAKRETNI);
}

void
Taktika_SIMA_TRECI_3()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	if(!(GPIOA->IDR & (0b1 << PREKIDAC_TAKTIKE_3)))
 800139c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	220a      	movs	r2, #10
 80013a4:	4611      	mov	r1, r2
 80013a6:	2201      	movs	r2, #1
 80013a8:	408a      	lsls	r2, r1
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d104      	bne.n	80013ba <Taktika_SIMA_TRECI_3+0x22>
          tactic_blue_3(ID_SIMA3_POGONSKI, ID_SIMA3_ZAKRETNI);
 80013b0:	2108      	movs	r1, #8
 80013b2:	200b      	movs	r0, #11
 80013b4:	f7ff fb06 	bl	80009c4 <tactic_blue_3>
		else
           tactic_yellow_3(ID_SIMA3_POGONSKI, ID_SIMA3_ZAKRETNI);
}
 80013b8:	e003      	b.n	80013c2 <Taktika_SIMA_TRECI_3+0x2a>
           tactic_yellow_3(ID_SIMA3_POGONSKI, ID_SIMA3_ZAKRETNI);
 80013ba:	2108      	movs	r1, #8
 80013bc:	200b      	movs	r0, #11
 80013be:	f7fe ffd1 	bl	8000364 <tactic_yellow_3>
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <tajmer_init>:
volatile bool interrupted = false;


void
tajmer_init()
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
 tim2_init();
 80013ca:	f000 f803 	bl	80013d4 <tim2_init>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <tim2_init>:

static void
tim2_init()
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= (0b1 << 0);
 80013da:	4b28      	ldr	r3, [pc, #160]	@ (800147c <tim2_init+0xa8>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	4a27      	ldr	r2, [pc, #156]	@ (800147c <tim2_init+0xa8>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6593      	str	r3, [r2, #88]	@ 0x58

	TIM2-> PSC = 80-1; //80MHz -> 1MHz
 80013e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013ea:	224f      	movs	r2, #79	@ 0x4f
 80013ec:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM2-> ARR = 1000-1; //1MHz -> 1kHz
 80013ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013f6:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CR1 &= ~((0b1 << 1) || (0b1 << 2));
 80013f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= (0b1 << 0);
 8001408:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6153      	str	r3, [r2, #20]

	TIM2->DIER |= (0b1 << 0);
 8001418:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	60d3      	str	r3, [r2, #12]

	while (!(TIM2->SR & (0b1 << 0)));
 8001428:	bf00      	nop
 800142a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f8      	beq.n	800142a <tim2_init+0x56>

	TIM2->SR &= ~(0b1 << 0);
 8001438:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001442:	f023 0301 	bic.w	r3, r3, #1
 8001446:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= (0b1 << 2);
 8001448:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6013      	str	r3, [r2, #0]

	uint8_t const TIM2_PREKID = 28;
 8001458:	231c      	movs	r3, #28
 800145a:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[0] |= (0b1 << TIM2_PREKID);
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <tim2_init+0xac>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	2101      	movs	r1, #1
 8001464:	fa01 f202 	lsl.w	r2, r1, r2
 8001468:	4611      	mov	r1, r2
 800146a:	4a05      	ldr	r2, [pc, #20]	@ (8001480 <tim2_init+0xac>)
 800146c:	430b      	orrs	r3, r1
 800146e:	6013      	str	r3, [r2, #0]

	//TIM2->CR1 |= (0b1 << 0);
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40021000 	.word	0x40021000
 8001480:	e000e100 	.word	0xe000e100

08001484 <timer_start_sys_time>:

void
timer_start_sys_time ()
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  TIM2->CR1 |= (0b1 << 0);	//tek ga ovo ukljucuje
 8001488:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <TajmerDelay>:
    return false;
  flag_delay = true;
  return true;
}

void TajmerDelay(uint32_t ms) {
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	uint32_t PocVreme = sys_time_ms;
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <TajmerDelay+0x30>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
	while (sys_time_ms <= PocVreme + ms) {
 80014b2:	e000      	b.n	80014b6 <TajmerDelay+0x12>
		__NOP();
 80014b4:	bf00      	nop
	while (sys_time_ms <= PocVreme + ms) {
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	441a      	add	r2, r3
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <TajmerDelay+0x30>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d2f7      	bcs.n	80014b4 <TajmerDelay+0x10>
	}

}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000030 	.word	0x20000030

080014d8 <TIM2_IRQHandler>:

void
TIM2_IRQHandler ()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  // poziva se svake milisekunde
  // proveri da li je stvarno TIM2 pozvao rutinu
  if ((TIM2->SR & (0b1 << 0)) == (0b1 << 0))
 80014dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d11b      	bne.n	8001522 <TIM2_IRQHandler+0x4a>
    {
      TIM2->SR &= ~(0b1 << 0);	// da bi sledeci put mogli da detektujemo prekid
 80014ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014f4:	f023 0301 	bic.w	r3, r3, #1
 80014f8:	6113      	str	r3, [r2, #16]

      sys_time_ms++;
 80014fa:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <TIM2_IRQHandler+0x7c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	4a14      	ldr	r2, [pc, #80]	@ (8001554 <TIM2_IRQHandler+0x7c>)
 8001502:	6013      	str	r3, [r2, #0]

      if(sys_time_ms >= 99500) //99500 //9500
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <TIM2_IRQHandler+0x7c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a13      	ldr	r2, [pc, #76]	@ (8001558 <TIM2_IRQHandler+0x80>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d909      	bls.n	8001522 <TIM2_IRQHandler+0x4a>
      {
    	  TajmerDelay(100);
 800150e:	2064      	movs	r0, #100	@ 0x64
 8001510:	f7ff ffc8 	bl	80014a4 <TajmerDelay>
//    	  ax_angle_move(ID_SIMA2_POGONSKI, 0, 0);
    	  ax_angle_move(ID_SIMA3_POGONSKI, 0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	200b      	movs	r0, #11
 800151a:	f7fe fe57 	bl	80001cc <ax_angle_move>
//    	  ax_angle_move(ID_SIMA4_POGONSKI, 0, 0);
    	  while(1);
 800151e:	bf00      	nop
 8001520:	e7fd      	b.n	800151e <TIM2_IRQHandler+0x46>
      }
    }

  switch (sensors_case_timer) {
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <TIM2_IRQHandler+0x84>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <TIM2_IRQHandler+0x66>
 800152c:	2b01      	cmp	r3, #1
 800152e:	d10a      	bne.n	8001546 <TIM2_IRQHandler+0x6e>
	case SENSOR_JJ:
		interrupted = sensor_JedanJedini();
 8001530:	f7fe ff00 	bl	8000334 <sensor_JedanJedini>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <TIM2_IRQHandler+0x88>)
 800153a:	701a      	strb	r2, [r3, #0]
		break;
 800153c:	e007      	b.n	800154e <TIM2_IRQHandler+0x76>
	case SENSORS_OFF:
		  interrupted = false;
 800153e:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <TIM2_IRQHandler+0x88>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
		  break;
 8001544:	e003      	b.n	800154e <TIM2_IRQHandler+0x76>
	default:
		  interrupted = false;
 8001546:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <TIM2_IRQHandler+0x88>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
		break;
 800154c:	bf00      	nop
    }
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000030 	.word	0x20000030
 8001558:	000184ab 	.word	0x000184ab
 800155c:	20000034 	.word	0x20000034
 8001560:	20000035 	.word	0x20000035

08001564 <UART_init>:
static void
UART1_init();

void
UART_init()
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	UART1_init();
 8001568:	f000 f802 	bl	8001570 <UART1_init>
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <UART1_init>:

static void
UART1_init()
{
 8001570:	b490      	push	{r4, r7}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
	//PB6 i PB7 AF7
	RCC->APB2ENR |= (0b1 << 14); //takt na USART1
 8001576:	4b99      	ldr	r3, [pc, #612]	@ (80017dc <UART1_init+0x26c>)
 8001578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800157a:	4a98      	ldr	r2, [pc, #608]	@ (80017dc <UART1_init+0x26c>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001580:	6613      	str	r3, [r2, #96]	@ 0x60
	RCC->AHB2ENR |= (0b1 << 1); //takt za gpioB
 8001582:	4b96      	ldr	r3, [pc, #600]	@ (80017dc <UART1_init+0x26c>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	4a95      	ldr	r2, [pc, #596]	@ (80017dc <UART1_init+0x26c>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	64d3      	str	r3, [r2, #76]	@ 0x4c

	uint8_t const TX_PIN = 6;
 800158e:	2306      	movs	r3, #6
 8001590:	71fb      	strb	r3, [r7, #7]
	uint8_t const RX_PIN = 7;
 8001592:	2307      	movs	r3, #7
 8001594:	71bb      	strb	r3, [r7, #6]

	GPIOB->MODER &= ~(0b11 << TX_PIN * 2);
 8001596:	4b92      	ldr	r3, [pc, #584]	@ (80017e0 <UART1_init+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	79fa      	ldrb	r2, [r7, #7]
 800159c:	0052      	lsls	r2, r2, #1
 800159e:	2103      	movs	r1, #3
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	43d2      	mvns	r2, r2
 80015a6:	4611      	mov	r1, r2
 80015a8:	4a8d      	ldr	r2, [pc, #564]	@ (80017e0 <UART1_init+0x270>)
 80015aa:	400b      	ands	r3, r1
 80015ac:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0b11 << RX_PIN * 2);
 80015ae:	4b8c      	ldr	r3, [pc, #560]	@ (80017e0 <UART1_init+0x270>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	79ba      	ldrb	r2, [r7, #6]
 80015b4:	0052      	lsls	r2, r2, #1
 80015b6:	2103      	movs	r1, #3
 80015b8:	fa01 f202 	lsl.w	r2, r1, r2
 80015bc:	43d2      	mvns	r2, r2
 80015be:	4611      	mov	r1, r2
 80015c0:	4a87      	ldr	r2, [pc, #540]	@ (80017e0 <UART1_init+0x270>)
 80015c2:	400b      	ands	r3, r1
 80015c4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << TX_PIN * 2);
 80015c6:	4b86      	ldr	r3, [pc, #536]	@ (80017e0 <UART1_init+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	79fa      	ldrb	r2, [r7, #7]
 80015cc:	0052      	lsls	r2, r2, #1
 80015ce:	2102      	movs	r1, #2
 80015d0:	fa01 f202 	lsl.w	r2, r1, r2
 80015d4:	4611      	mov	r1, r2
 80015d6:	4a82      	ldr	r2, [pc, #520]	@ (80017e0 <UART1_init+0x270>)
 80015d8:	430b      	orrs	r3, r1
 80015da:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << RX_PIN * 2);
 80015dc:	4b80      	ldr	r3, [pc, #512]	@ (80017e0 <UART1_init+0x270>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	79ba      	ldrb	r2, [r7, #6]
 80015e2:	0052      	lsls	r2, r2, #1
 80015e4:	2102      	movs	r1, #2
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	4611      	mov	r1, r2
 80015ec:	4a7c      	ldr	r2, [pc, #496]	@ (80017e0 <UART1_init+0x270>)
 80015ee:	430b      	orrs	r3, r1
 80015f0:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER |= (0b1 << TX_PIN);
 80015f2:	4b7b      	ldr	r3, [pc, #492]	@ (80017e0 <UART1_init+0x270>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	2101      	movs	r1, #1
 80015fa:	fa01 f202 	lsl.w	r2, r1, r2
 80015fe:	4611      	mov	r1, r2
 8001600:	4a77      	ldr	r2, [pc, #476]	@ (80017e0 <UART1_init+0x270>)
 8001602:	430b      	orrs	r3, r1
 8001604:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(0b11 << TX_PIN*2);
 8001606:	4b76      	ldr	r3, [pc, #472]	@ (80017e0 <UART1_init+0x270>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	79fa      	ldrb	r2, [r7, #7]
 800160c:	0052      	lsls	r2, r2, #1
 800160e:	2103      	movs	r1, #3
 8001610:	fa01 f202 	lsl.w	r2, r1, r2
 8001614:	43d2      	mvns	r2, r2
 8001616:	4611      	mov	r1, r2
 8001618:	4a71      	ldr	r2, [pc, #452]	@ (80017e0 <UART1_init+0x270>)
 800161a:	400b      	ands	r3, r1
 800161c:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0b01 << TX_PIN*2);
 800161e:	4b70      	ldr	r3, [pc, #448]	@ (80017e0 <UART1_init+0x270>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	0052      	lsls	r2, r2, #1
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	4611      	mov	r1, r2
 800162e:	4a6c      	ldr	r2, [pc, #432]	@ (80017e0 <UART1_init+0x270>)
 8001630:	430b      	orrs	r3, r1
 8001632:	60d3      	str	r3, [r2, #12]

	uint8_t const Alt_function = 7;
 8001634:	2307      	movs	r3, #7
 8001636:	717b      	strb	r3, [r7, #5]

	GPIOB->AFR[TX_PIN / 8] &= ~(0b1111 << (TX_PIN % 8) * 4);
 8001638:	4a69      	ldr	r2, [pc, #420]	@ (80017e0 <UART1_init+0x270>)
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	08db      	lsrs	r3, r3, #3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	3308      	adds	r3, #8
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	79fa      	ldrb	r2, [r7, #7]
 8001648:	f002 0207 	and.w	r2, r2, #7
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	210f      	movs	r1, #15
 8001650:	fa01 f202 	lsl.w	r2, r1, r2
 8001654:	43d2      	mvns	r2, r2
 8001656:	4614      	mov	r4, r2
 8001658:	4961      	ldr	r1, [pc, #388]	@ (80017e0 <UART1_init+0x270>)
 800165a:	79fa      	ldrb	r2, [r7, #7]
 800165c:	08d2      	lsrs	r2, r2, #3
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	4610      	mov	r0, r2
 8001662:	ea03 0204 	and.w	r2, r3, r4
 8001666:	f100 0308 	add.w	r3, r0, #8
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[TX_PIN / 8] |= (Alt_function << (TX_PIN % 8) * 4);
 800166e:	4a5c      	ldr	r2, [pc, #368]	@ (80017e0 <UART1_init+0x270>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	08db      	lsrs	r3, r3, #3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	3308      	adds	r3, #8
 8001678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167c:	7979      	ldrb	r1, [r7, #5]
 800167e:	79fa      	ldrb	r2, [r7, #7]
 8001680:	f002 0207 	and.w	r2, r2, #7
 8001684:	0092      	lsls	r2, r2, #2
 8001686:	fa01 f202 	lsl.w	r2, r1, r2
 800168a:	4614      	mov	r4, r2
 800168c:	4954      	ldr	r1, [pc, #336]	@ (80017e0 <UART1_init+0x270>)
 800168e:	79fa      	ldrb	r2, [r7, #7]
 8001690:	08d2      	lsrs	r2, r2, #3
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	4610      	mov	r0, r2
 8001696:	ea43 0204 	orr.w	r2, r3, r4
 800169a:	f100 0308 	add.w	r3, r0, #8
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] &= ~(0b1111 << (RX_PIN % 8) * 4);
 80016a2:	4a4f      	ldr	r2, [pc, #316]	@ (80017e0 <UART1_init+0x270>)
 80016a4:	79bb      	ldrb	r3, [r7, #6]
 80016a6:	08db      	lsrs	r3, r3, #3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	3308      	adds	r3, #8
 80016ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b0:	79ba      	ldrb	r2, [r7, #6]
 80016b2:	f002 0207 	and.w	r2, r2, #7
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	210f      	movs	r1, #15
 80016ba:	fa01 f202 	lsl.w	r2, r1, r2
 80016be:	43d2      	mvns	r2, r2
 80016c0:	4614      	mov	r4, r2
 80016c2:	4947      	ldr	r1, [pc, #284]	@ (80017e0 <UART1_init+0x270>)
 80016c4:	79ba      	ldrb	r2, [r7, #6]
 80016c6:	08d2      	lsrs	r2, r2, #3
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	4610      	mov	r0, r2
 80016cc:	ea03 0204 	and.w	r2, r3, r4
 80016d0:	f100 0308 	add.w	r3, r0, #8
 80016d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] |= (Alt_function << (RX_PIN % 8) * 4);
 80016d8:	4a41      	ldr	r2, [pc, #260]	@ (80017e0 <UART1_init+0x270>)
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	08db      	lsrs	r3, r3, #3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	3308      	adds	r3, #8
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	7979      	ldrb	r1, [r7, #5]
 80016e8:	79ba      	ldrb	r2, [r7, #6]
 80016ea:	f002 0207 	and.w	r2, r2, #7
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	fa01 f202 	lsl.w	r2, r1, r2
 80016f4:	4614      	mov	r4, r2
 80016f6:	493a      	ldr	r1, [pc, #232]	@ (80017e0 <UART1_init+0x270>)
 80016f8:	79ba      	ldrb	r2, [r7, #6]
 80016fa:	08d2      	lsrs	r2, r2, #3
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	4610      	mov	r0, r2
 8001700:	ea43 0204 	orr.w	r2, r3, r4
 8001704:	f100 0308 	add.w	r3, r0, #8
 8001708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

     USART1->CR1 &= ~(0b1 << 12);
 800170c:	4b35      	ldr	r3, [pc, #212]	@ (80017e4 <UART1_init+0x274>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a34      	ldr	r2, [pc, #208]	@ (80017e4 <UART1_init+0x274>)
 8001712:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001716:	6013      	str	r3, [r2, #0]
     USART1->CR1 &= ~(0b1 << 28); //8 bita
 8001718:	4b32      	ldr	r3, [pc, #200]	@ (80017e4 <UART1_init+0x274>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a31      	ldr	r2, [pc, #196]	@ (80017e4 <UART1_init+0x274>)
 800171e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001722:	6013      	str	r3, [r2, #0]
     USART1->CR2 &= ~(0b11 << 12); //1 stop bit
 8001724:	4b2f      	ldr	r3, [pc, #188]	@ (80017e4 <UART1_init+0x274>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	4a2e      	ldr	r2, [pc, #184]	@ (80017e4 <UART1_init+0x274>)
 800172a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800172e:	6053      	str	r3, [r2, #4]

     USART1->BRR = 0; //baud 9600->546.14
 8001730:	4b2c      	ldr	r3, [pc, #176]	@ (80017e4 <UART1_init+0x274>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
     USART1->BRR |= ((546 << 4) | (14 << 0)); //115200->45.57
 8001736:	4b2b      	ldr	r3, [pc, #172]	@ (80017e4 <UART1_init+0x274>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	4a2a      	ldr	r2, [pc, #168]	@ (80017e4 <UART1_init+0x274>)
 800173c:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8001740:	f043 032e 	orr.w	r3, r3, #46	@ 0x2e
 8001744:	60d3      	str	r3, [r2, #12]

     USART1->CR1 |= (0b11 << 2); //tx & rx pin enable
 8001746:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <UART1_init+0x274>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a26      	ldr	r2, [pc, #152]	@ (80017e4 <UART1_init+0x274>)
 800174c:	f043 030c 	orr.w	r3, r3, #12
 8001750:	6013      	str	r3, [r2, #0]

     USART1->CR1 |= (0b1 << 5); //interrupt enable
 8001752:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <UART1_init+0x274>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a23      	ldr	r2, [pc, #140]	@ (80017e4 <UART1_init+0x274>)
 8001758:	f043 0320 	orr.w	r3, r3, #32
 800175c:	6013      	str	r3, [r2, #0]

     USART1->CR2 &= ~(0b1 << 11);
 800175e:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <UART1_init+0x274>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4a20      	ldr	r2, [pc, #128]	@ (80017e4 <UART1_init+0x274>)
 8001764:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001768:	6053      	str	r3, [r2, #4]
     USART1->CR2 &= ~(0b1 << 14);
 800176a:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <UART1_init+0x274>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4a1d      	ldr	r2, [pc, #116]	@ (80017e4 <UART1_init+0x274>)
 8001770:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001774:	6053      	str	r3, [r2, #4]
     USART1->CR3 &= ~(0b1 << 1);
 8001776:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <UART1_init+0x274>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	4a1a      	ldr	r2, [pc, #104]	@ (80017e4 <UART1_init+0x274>)
 800177c:	f023 0302 	bic.w	r3, r3, #2
 8001780:	6093      	str	r3, [r2, #8]
     USART1->CR3 &= ~(0b1 << 5);
 8001782:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <UART1_init+0x274>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	4a17      	ldr	r2, [pc, #92]	@ (80017e4 <UART1_init+0x274>)
 8001788:	f023 0320 	bic.w	r3, r3, #32
 800178c:	6093      	str	r3, [r2, #8]
     USART1->CR3 |= (0b1 << 3);
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <UART1_init+0x274>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <UART1_init+0x274>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	6093      	str	r3, [r2, #8]

    uint8_t  USART1_INTERRUPT = 37;
 800179a:	2325      	movs	r3, #37	@ 0x25
 800179c:	713b      	strb	r3, [r7, #4]
    NVIC->ISER[USART1_INTERRUPT / 32] |= (0b1 <<  USART1_INTERRUPT % 32);
 800179e:	4a12      	ldr	r2, [pc, #72]	@ (80017e8 <UART1_init+0x278>)
 80017a0:	793b      	ldrb	r3, [r7, #4]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	b2d8      	uxtb	r0, r3
 80017a6:	4603      	mov	r3, r0
 80017a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ac:	793a      	ldrb	r2, [r7, #4]
 80017ae:	f002 021f 	and.w	r2, r2, #31
 80017b2:	2101      	movs	r1, #1
 80017b4:	fa01 f202 	lsl.w	r2, r1, r2
 80017b8:	4614      	mov	r4, r2
 80017ba:	4a0b      	ldr	r2, [pc, #44]	@ (80017e8 <UART1_init+0x278>)
 80017bc:	4601      	mov	r1, r0
 80017be:	4323      	orrs	r3, r4
 80017c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

     USART1-> CR1 |= (0b1 << 0); //usart enable
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <UART1_init+0x274>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a06      	ldr	r2, [pc, #24]	@ (80017e4 <UART1_init+0x274>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc90      	pop	{r4, r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	48000400 	.word	0x48000400
 80017e4:	40013800 	.word	0x40013800
 80017e8:	e000e100 	.word	0xe000e100

080017ec <UART_send_byte>:

void
UART_send_byte (uint8_t data)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
   USART1->TDR = data; //ovako se salje, kada je  USART1->dr sa desne strane, onda se ponasa kao recieve registar
 80017f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <UART_send_byte+0x38>)
 80017f8:	79fa      	ldrb	r2, [r7, #7]
 80017fa:	b292      	uxth	r2, r2
 80017fc:	851a      	strh	r2, [r3, #40]	@ 0x28

  while (!( USART1->ISR & (0b1 << 6)))
 80017fe:	bf00      	nop
 8001800:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <UART_send_byte+0x38>)
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f9      	beq.n	8001800 <UART_send_byte+0x14>
	  ;

   USART1->ISR &= ~(0b1 << 6);
 800180c:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <UART_send_byte+0x38>)
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <UART_send_byte+0x38>)
 8001812:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001816:	61d3      	str	r3, [r2, #28]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	40013800 	.word	0x40013800

08001828 <UART_write>:

void
UART_write (uint8_t data)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if (buffer_size != MAX_BUFFER_SIZE)
 8001832:	4b25      	ldr	r3, [pc, #148]	@ (80018c8 <UART_write+0xa0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b20      	cmp	r3, #32
 800183a:	d01c      	beq.n	8001876 <UART_write+0x4e>
    {
      buffer[index_write] = data;
 800183c:	4b23      	ldr	r3, [pc, #140]	@ (80018cc <UART_write+0xa4>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4619      	mov	r1, r3
 8001844:	4a22      	ldr	r2, [pc, #136]	@ (80018d0 <UART_write+0xa8>)
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 800184a:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <UART_write+0xa4>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	3301      	adds	r3, #1
 8001852:	425a      	negs	r2, r3
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	f002 021f 	and.w	r2, r2, #31
 800185c:	bf58      	it	pl
 800185e:	4253      	negpl	r3, r2
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <UART_write+0xa4>)
 8001864:	701a      	strb	r2, [r3, #0]
      buffer_size++;
 8001866:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <UART_write+0xa0>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	3301      	adds	r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <UART_write+0xa0>)
 8001872:	701a      	strb	r2, [r3, #0]
    {
      buffer[index_write] = data;
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
    }
}
 8001874:	e022      	b.n	80018bc <UART_write+0x94>
      buffer[index_write] = data;
 8001876:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <UART_write+0xa4>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	4619      	mov	r1, r3
 800187e:	4a14      	ldr	r2, [pc, #80]	@ (80018d0 <UART_write+0xa8>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <UART_write+0xa4>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	3301      	adds	r3, #1
 800188c:	425a      	negs	r2, r3
 800188e:	f003 031f 	and.w	r3, r3, #31
 8001892:	f002 021f 	and.w	r2, r2, #31
 8001896:	bf58      	it	pl
 8001898:	4253      	negpl	r3, r2
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <UART_write+0xa4>)
 800189e:	701a      	strb	r2, [r3, #0]
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <UART_write+0xac>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	3301      	adds	r3, #1
 80018a8:	425a      	negs	r2, r3
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	f002 021f 	and.w	r2, r2, #31
 80018b2:	bf58      	it	pl
 80018b4:	4253      	negpl	r3, r2
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <UART_write+0xac>)
 80018ba:	701a      	strb	r2, [r3, #0]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	20000058 	.word	0x20000058
 80018cc:	20000059 	.word	0x20000059
 80018d0:	20000038 	.word	0x20000038
 80018d4:	2000005a 	.word	0x2000005a

080018d8 <USART1_IRQHandler>:
    return false;
}

void
USART1_IRQHandler ()
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  if ( USART1->ISR & (0b1 << 5))
 80018dc:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <USART1_IRQHandler+0x24>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	f003 0320 	and.w	r3, r3, #32
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d006      	beq.n	80018f6 <USART1_IRQHandler+0x1e>
    {
      UART_write(USART1->RDR);
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <USART1_IRQHandler+0x24>)
 80018ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff99 	bl	8001828 <UART_write>
    }
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40013800 	.word	0x40013800

08001900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001904:	f000 f8f7 	bl	8001af6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001908:	f000 f80d 	bl	8001926 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  io();
 800190c:	f7ff fbe7 	bl	80010de <io>
  tajmer_init();
 8001910:	f7ff fd59 	bl	80013c6 <tajmer_init>
  UART_init();
 8001914:	f7ff fe26 	bl	8001564 <UART_init>
  sensor_Init();
 8001918:	f7fe fce6 	bl	80002e8 <sensor_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800191c:	b662      	cpsie	i
}
 800191e:	bf00      	nop
  while (1)
  {
    /* USER CODE END WHILE */

//	  Taktika_SIMA_DRUGI_2();
	  Taktika_SIMA_TRECI_3();
 8001920:	f7ff fd3a 	bl	8001398 <Taktika_SIMA_TRECI_3>
 8001924:	e7fc      	b.n	8001920 <main+0x20>

08001926 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b096      	sub	sp, #88	@ 0x58
 800192a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2244      	movs	r2, #68	@ 0x44
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f001 f89d 	bl	8002a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800193a:	463b      	mov	r3, r7
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001948:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800194c:	f000 fa3c 	bl	8001dc8 <HAL_PWREx_ControlVoltageScaling>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001956:	f000 f838 	bl	80019ca <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800195a:	2310      	movs	r3, #16
 800195c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800195e:	2301      	movs	r3, #1
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001966:	2360      	movs	r3, #96	@ 0x60
 8001968:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800196a:	2302      	movs	r3, #2
 800196c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800196e:	2301      	movs	r3, #1
 8001970:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001972:	2301      	movs	r3, #1
 8001974:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001976:	2328      	movs	r3, #40	@ 0x28
 8001978:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800197a:	2307      	movs	r3, #7
 800197c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800197e:	2302      	movs	r3, #2
 8001980:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001982:	2302      	movs	r3, #2
 8001984:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fa72 	bl	8001e74 <HAL_RCC_OscConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001996:	f000 f818 	bl	80019ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199a:	230f      	movs	r3, #15
 800199c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800199e:	2303      	movs	r3, #3
 80019a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019ae:	463b      	mov	r3, r7
 80019b0:	2104      	movs	r1, #4
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fe72 	bl	800269c <HAL_RCC_ClockConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019be:	f000 f804 	bl	80019ca <Error_Handler>
  }
}
 80019c2:	bf00      	nop
 80019c4:	3758      	adds	r7, #88	@ 0x58
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ce:	b672      	cpsid	i
}
 80019d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d2:	bf00      	nop
 80019d4:	e7fd      	b.n	80019d2 <Error_Handler+0x8>
	...

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <HAL_MspInit+0x44>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a1c <HAL_MspInit+0x44>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ea:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <HAL_MspInit+0x44>)
 80019ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <HAL_MspInit+0x44>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fa:	4a08      	ldr	r2, [pc, #32]	@ (8001a1c <HAL_MspInit+0x44>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_MspInit+0x44>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <NMI_Handler+0x4>

08001a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <MemManage_Handler+0x4>

08001a38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <BusFault_Handler+0x4>

08001a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <UsageFault_Handler+0x4>

08001a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a76:	f000 f893 	bl	8001ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <SystemInit+0x20>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <SystemInit+0x20>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001adc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa8:	f7ff ffea 	bl	8001a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aac:	480c      	ldr	r0, [pc, #48]	@ (8001ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aae:	490d      	ldr	r1, [pc, #52]	@ (8001ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae8 <LoopForever+0xe>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8001af0 <LoopForever+0x16>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f000 ffd7 	bl	8002a84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ad6:	f7ff ff13 	bl	8001900 <main>

08001ada <LoopForever>:

LoopForever:
    b LoopForever
 8001ada:	e7fe      	b.n	8001ada <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001adc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ae8:	08002b2c 	.word	0x08002b2c
  ldr r2, =_sbss
 8001aec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001af0:	20000060 	.word	0x20000060

08001af4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC1_IRQHandler>

08001af6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f000 f91f 	bl	8001d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b06:	200f      	movs	r0, #15
 8001b08:	f000 f80e 	bl	8001b28 <HAL_InitTick>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	71fb      	strb	r3, [r7, #7]
 8001b16:	e001      	b.n	8001b1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b18:	f7ff ff5e 	bl	80019d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b34:	4b17      	ldr	r3, [pc, #92]	@ (8001b94 <HAL_InitTick+0x6c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d023      	beq.n	8001b84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b3c:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <HAL_InitTick+0x70>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <HAL_InitTick+0x6c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f91d 	bl	8001d92 <HAL_SYSTICK_Config>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10f      	bne.n	8001b7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b0f      	cmp	r3, #15
 8001b62:	d809      	bhi.n	8001b78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b64:	2200      	movs	r2, #0
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	f000 f8f5 	bl	8001d5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b70:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <HAL_InitTick+0x74>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e007      	b.n	8001b88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	e004      	b.n	8001b88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
 8001b82:	e001      	b.n	8001b88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000000c 	.word	0x2000000c
 8001b98:	20000004 	.word	0x20000004
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_IncTick+0x20>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_IncTick+0x24>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a04      	ldr	r2, [pc, #16]	@ (8001bc4 <HAL_IncTick+0x24>)
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	2000000c 	.word	0x2000000c
 8001bc4:	2000005c 	.word	0x2000005c

08001bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	@ (8001bdc <HAL_GetTick+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	2000005c 	.word	0x2000005c

08001be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c12:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	60d3      	str	r3, [r2, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c2c:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <__NVIC_GetPriorityGrouping+0x18>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	f003 0307 	and.w	r3, r3, #7
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	db0a      	blt.n	8001c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	490c      	ldr	r1, [pc, #48]	@ (8001c90 <__NVIC_SetPriority+0x4c>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	0112      	lsls	r2, r2, #4
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	440b      	add	r3, r1
 8001c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c6c:	e00a      	b.n	8001c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4908      	ldr	r1, [pc, #32]	@ (8001c94 <__NVIC_SetPriority+0x50>)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	3b04      	subs	r3, #4
 8001c7c:	0112      	lsls	r2, r2, #4
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	440b      	add	r3, r1
 8001c82:	761a      	strb	r2, [r3, #24]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000e100 	.word	0xe000e100
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	@ 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f1c3 0307 	rsb	r3, r3, #7
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	bf28      	it	cs
 8001cb6:	2304      	movcs	r3, #4
 8001cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	2b06      	cmp	r3, #6
 8001cc0:	d902      	bls.n	8001cc8 <NVIC_EncodePriority+0x30>
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3b03      	subs	r3, #3
 8001cc6:	e000      	b.n	8001cca <NVIC_EncodePriority+0x32>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	401a      	ands	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	43d9      	mvns	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	4313      	orrs	r3, r2
         );
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3724      	adds	r7, #36	@ 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d10:	d301      	bcc.n	8001d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00f      	b.n	8001d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d16:	4a0a      	ldr	r2, [pc, #40]	@ (8001d40 <SysTick_Config+0x40>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1e:	210f      	movs	r1, #15
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f7ff ff8e 	bl	8001c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <SysTick_Config+0x40>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <SysTick_Config+0x40>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	e000e010 	.word	0xe000e010

08001d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ff47 	bl	8001be0 <__NVIC_SetPriorityGrouping>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6c:	f7ff ff5c 	bl	8001c28 <__NVIC_GetPriorityGrouping>
 8001d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7ff ff8e 	bl	8001c98 <NVIC_EncodePriority>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5d 	bl	8001c44 <__NVIC_SetPriority>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffb0 	bl	8001d00 <SysTick_Config>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001db0:	4b04      	ldr	r3, [pc, #16]	@ (8001dc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40007000 	.word	0x40007000

08001dc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dd6:	d130      	bne.n	8001e3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd8:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001de4:	d038      	beq.n	8001e58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de6:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dee:	4a1e      	ldr	r2, [pc, #120]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001df4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001df6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2232      	movs	r2, #50	@ 0x32
 8001dfc:	fb02 f303 	mul.w	r3, r2, r3
 8001e00:	4a1b      	ldr	r2, [pc, #108]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0c9b      	lsrs	r3, r3, #18
 8001e08:	3301      	adds	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e0c:	e002      	b.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e14:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e20:	d102      	bne.n	8001e28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f2      	bne.n	8001e0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e34:	d110      	bne.n	8001e58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e00f      	b.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e46:	d007      	beq.n	8001e58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e48:	4b07      	ldr	r3, [pc, #28]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e50:	4a05      	ldr	r2, [pc, #20]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	20000004 	.word	0x20000004
 8001e70:	431bde83 	.word	0x431bde83

08001e74 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f000 bc02 	b.w	800268c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e88:	4b96      	ldr	r3, [pc, #600]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e92:	4b94      	ldr	r3, [pc, #592]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80e4 	beq.w	8002072 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x4c>
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	f040 808b 	bne.w	8001fce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	f040 8087 	bne.w	8001fce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ec0:	4b88      	ldr	r3, [pc, #544]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x64>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e3d9      	b.n	800268c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1a      	ldr	r2, [r3, #32]
 8001edc:	4b81      	ldr	r3, [pc, #516]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d004      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x7e>
 8001ee8:	4b7e      	ldr	r3, [pc, #504]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ef0:	e005      	b.n	8001efe <HAL_RCC_OscConfig+0x8a>
 8001ef2:	4b7c      	ldr	r3, [pc, #496]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d223      	bcs.n	8001f4a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fd54 	bl	80029b4 <RCC_SetFlashLatencyFromMSIRange>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e3ba      	b.n	800268c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f16:	4b73      	ldr	r3, [pc, #460]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a72      	ldr	r2, [pc, #456]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f1c:	f043 0308 	orr.w	r3, r3, #8
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b70      	ldr	r3, [pc, #448]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	496d      	ldr	r1, [pc, #436]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f34:	4b6b      	ldr	r3, [pc, #428]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	4968      	ldr	r1, [pc, #416]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
 8001f48:	e025      	b.n	8001f96 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f4a:	4b66      	ldr	r3, [pc, #408]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a65      	ldr	r2, [pc, #404]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f50:	f043 0308 	orr.w	r3, r3, #8
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b63      	ldr	r3, [pc, #396]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4960      	ldr	r1, [pc, #384]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f68:	4b5e      	ldr	r3, [pc, #376]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	495b      	ldr	r1, [pc, #364]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fd14 	bl	80029b4 <RCC_SetFlashLatencyFromMSIRange>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e37a      	b.n	800268c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f96:	f000 fc81 	bl	800289c <HAL_RCC_GetSysClockFreq>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	4b51      	ldr	r3, [pc, #324]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	4950      	ldr	r1, [pc, #320]	@ (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001fa8:	5ccb      	ldrb	r3, [r1, r3]
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb2:	4a4e      	ldr	r2, [pc, #312]	@ (80020ec <HAL_RCC_OscConfig+0x278>)
 8001fb4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fb6:	4b4e      	ldr	r3, [pc, #312]	@ (80020f0 <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fdb4 	bl	8001b28 <HAL_InitTick>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d052      	beq.n	8002070 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	e35e      	b.n	800268c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d032      	beq.n	800203c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fd6:	4b43      	ldr	r3, [pc, #268]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a42      	ldr	r2, [pc, #264]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fe2:	f7ff fdf1 	bl	8001bc8 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fea:	f7ff fded 	bl	8001bc8 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e347      	b.n	800268c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ffc:	4b39      	ldr	r3, [pc, #228]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002008:	4b36      	ldr	r3, [pc, #216]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a35      	ldr	r2, [pc, #212]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 800200e:	f043 0308 	orr.w	r3, r3, #8
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b33      	ldr	r3, [pc, #204]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4930      	ldr	r1, [pc, #192]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002026:	4b2f      	ldr	r3, [pc, #188]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	492b      	ldr	r1, [pc, #172]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
 800203a:	e01a      	b.n	8002072 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800203c:	4b29      	ldr	r3, [pc, #164]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a28      	ldr	r2, [pc, #160]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002048:	f7ff fdbe 	bl	8001bc8 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002050:	f7ff fdba 	bl	8001bc8 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e314      	b.n	800268c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002062:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x1dc>
 800206e:	e000      	b.n	8002072 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002070:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d073      	beq.n	8002166 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2b08      	cmp	r3, #8
 8002082:	d005      	beq.n	8002090 <HAL_RCC_OscConfig+0x21c>
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2b0c      	cmp	r3, #12
 8002088:	d10e      	bne.n	80020a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d10b      	bne.n	80020a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	4b14      	ldr	r3, [pc, #80]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d063      	beq.n	8002164 <HAL_RCC_OscConfig+0x2f0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d15f      	bne.n	8002164 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e2f1      	b.n	800268c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020b0:	d106      	bne.n	80020c0 <HAL_RCC_OscConfig+0x24c>
 80020b2:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a0b      	ldr	r2, [pc, #44]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e025      	b.n	800210c <HAL_RCC_OscConfig+0x298>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020c8:	d114      	bne.n	80020f4 <HAL_RCC_OscConfig+0x280>
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a05      	ldr	r2, [pc, #20]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b03      	ldr	r3, [pc, #12]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a02      	ldr	r2, [pc, #8]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e013      	b.n	800210c <HAL_RCC_OscConfig+0x298>
 80020e4:	40021000 	.word	0x40021000
 80020e8:	08002ae4 	.word	0x08002ae4
 80020ec:	20000004 	.word	0x20000004
 80020f0:	20000008 	.word	0x20000008
 80020f4:	4ba0      	ldr	r3, [pc, #640]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a9f      	ldr	r2, [pc, #636]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 80020fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4b9d      	ldr	r3, [pc, #628]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a9c      	ldr	r2, [pc, #624]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 8002106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800210a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d013      	beq.n	800213c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff fd58 	bl	8001bc8 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff fd54 	bl	8001bc8 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	@ 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e2ae      	b.n	800268c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800212e:	4b92      	ldr	r3, [pc, #584]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x2a8>
 800213a:	e014      	b.n	8002166 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff fd44 	bl	8001bc8 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002144:	f7ff fd40 	bl	8001bc8 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	@ 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e29a      	b.n	800268c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002156:	4b88      	ldr	r3, [pc, #544]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x2d0>
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d060      	beq.n	8002234 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d005      	beq.n	8002184 <HAL_RCC_OscConfig+0x310>
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d119      	bne.n	80021b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d116      	bne.n	80021b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002184:	4b7c      	ldr	r3, [pc, #496]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_RCC_OscConfig+0x328>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e277      	b.n	800268c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219c:	4b76      	ldr	r3, [pc, #472]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	4973      	ldr	r1, [pc, #460]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b0:	e040      	b.n	8002234 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d023      	beq.n	8002202 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a6e      	ldr	r2, [pc, #440]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 80021c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7ff fcff 	bl	8001bc8 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ce:	f7ff fcfb 	bl	8001bc8 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e255      	b.n	800268c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e0:	4b65      	ldr	r3, [pc, #404]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b62      	ldr	r3, [pc, #392]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	061b      	lsls	r3, r3, #24
 80021fa:	495f      	ldr	r1, [pc, #380]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
 8002200:	e018      	b.n	8002234 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002202:	4b5d      	ldr	r3, [pc, #372]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a5c      	ldr	r2, [pc, #368]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 8002208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800220c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7ff fcdb 	bl	8001bc8 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002216:	f7ff fcd7 	bl	8001bc8 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e231      	b.n	800268c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002228:	4b53      	ldr	r3, [pc, #332]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d03c      	beq.n	80022ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01c      	beq.n	8002282 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002248:	4b4b      	ldr	r3, [pc, #300]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800224e:	4a4a      	ldr	r2, [pc, #296]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff fcb6 	bl	8001bc8 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff fcb2 	bl	8001bc8 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e20c      	b.n	800268c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002272:	4b41      	ldr	r3, [pc, #260]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 8002274:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ef      	beq.n	8002260 <HAL_RCC_OscConfig+0x3ec>
 8002280:	e01b      	b.n	80022ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002282:	4b3d      	ldr	r3, [pc, #244]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 8002284:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002288:	4a3b      	ldr	r2, [pc, #236]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002292:	f7ff fc99 	bl	8001bc8 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229a:	f7ff fc95 	bl	8001bc8 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e1ef      	b.n	800268c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ac:	4b32      	ldr	r3, [pc, #200]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 80022ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1ef      	bne.n	800229a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80a6 	beq.w	8002414 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c8:	2300      	movs	r3, #0
 80022ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10d      	bne.n	80022f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	4b27      	ldr	r3, [pc, #156]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022dc:	4a26      	ldr	r2, [pc, #152]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022e4:	4b24      	ldr	r3, [pc, #144]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f0:	2301      	movs	r3, #1
 80022f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f4:	4b21      	ldr	r3, [pc, #132]	@ (800237c <HAL_RCC_OscConfig+0x508>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d118      	bne.n	8002332 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002300:	4b1e      	ldr	r3, [pc, #120]	@ (800237c <HAL_RCC_OscConfig+0x508>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1d      	ldr	r2, [pc, #116]	@ (800237c <HAL_RCC_OscConfig+0x508>)
 8002306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800230a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230c:	f7ff fc5c 	bl	8001bc8 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002314:	f7ff fc58 	bl	8001bc8 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e1b2      	b.n	800268c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002326:	4b15      	ldr	r3, [pc, #84]	@ (800237c <HAL_RCC_OscConfig+0x508>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d108      	bne.n	800234c <HAL_RCC_OscConfig+0x4d8>
 800233a:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002340:	4a0d      	ldr	r2, [pc, #52]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800234a:	e029      	b.n	80023a0 <HAL_RCC_OscConfig+0x52c>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b05      	cmp	r3, #5
 8002352:	d115      	bne.n	8002380 <HAL_RCC_OscConfig+0x50c>
 8002354:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800235a:	4a07      	ldr	r2, [pc, #28]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002364:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236a:	4a03      	ldr	r2, [pc, #12]	@ (8002378 <HAL_RCC_OscConfig+0x504>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002374:	e014      	b.n	80023a0 <HAL_RCC_OscConfig+0x52c>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	40007000 	.word	0x40007000
 8002380:	4b9a      	ldr	r3, [pc, #616]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002386:	4a99      	ldr	r2, [pc, #612]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002390:	4b96      	ldr	r3, [pc, #600]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002396:	4a95      	ldr	r2, [pc, #596]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 8002398:	f023 0304 	bic.w	r3, r3, #4
 800239c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d016      	beq.n	80023d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a8:	f7ff fc0e 	bl	8001bc8 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b0:	f7ff fc0a 	bl	8001bc8 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e162      	b.n	800268c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c6:	4b89      	ldr	r3, [pc, #548]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0ed      	beq.n	80023b0 <HAL_RCC_OscConfig+0x53c>
 80023d4:	e015      	b.n	8002402 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7ff fbf7 	bl	8001bc8 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7ff fbf3 	bl	8001bc8 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e14b      	b.n	800268c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023f4:	4b7d      	ldr	r3, [pc, #500]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1ed      	bne.n	80023de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002402:	7ffb      	ldrb	r3, [r7, #31]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002408:	4b78      	ldr	r3, [pc, #480]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 800240a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240c:	4a77      	ldr	r2, [pc, #476]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 800240e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002412:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	2b00      	cmp	r3, #0
 800241e:	d03c      	beq.n	800249a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01c      	beq.n	8002462 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002428:	4b70      	ldr	r3, [pc, #448]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 800242a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800242e:	4a6f      	ldr	r2, [pc, #444]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002438:	f7ff fbc6 	bl	8001bc8 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002440:	f7ff fbc2 	bl	8001bc8 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e11c      	b.n	800268c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002452:	4b66      	ldr	r3, [pc, #408]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 8002454:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ef      	beq.n	8002440 <HAL_RCC_OscConfig+0x5cc>
 8002460:	e01b      	b.n	800249a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002462:	4b62      	ldr	r3, [pc, #392]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 8002464:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002468:	4a60      	ldr	r2, [pc, #384]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 800246a:	f023 0301 	bic.w	r3, r3, #1
 800246e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002472:	f7ff fba9 	bl	8001bc8 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800247a:	f7ff fba5 	bl	8001bc8 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e0ff      	b.n	800268c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800248c:	4b57      	ldr	r3, [pc, #348]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 800248e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1ef      	bne.n	800247a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80f3 	beq.w	800268a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	f040 80c9 	bne.w	8002640 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024ae:	4b4f      	ldr	r3, [pc, #316]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0203 	and.w	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024be:	429a      	cmp	r2, r3
 80024c0:	d12c      	bne.n	800251c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024cc:	3b01      	subs	r3, #1
 80024ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d123      	bne.n	800251c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d11b      	bne.n	800251c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d113      	bne.n	800251c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fe:	085b      	lsrs	r3, r3, #1
 8002500:	3b01      	subs	r3, #1
 8002502:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d109      	bne.n	800251c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	085b      	lsrs	r3, r3, #1
 8002514:	3b01      	subs	r3, #1
 8002516:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d06b      	beq.n	80025f4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d062      	beq.n	80025e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002522:	4b32      	ldr	r3, [pc, #200]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0ac      	b.n	800268c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002532:	4b2e      	ldr	r3, [pc, #184]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2d      	ldr	r2, [pc, #180]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 8002538:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800253c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800253e:	f7ff fb43 	bl	8001bc8 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002546:	f7ff fb3f 	bl	8001bc8 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e099      	b.n	800268c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002558:	4b24      	ldr	r3, [pc, #144]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f0      	bne.n	8002546 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002564:	4b21      	ldr	r3, [pc, #132]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	4b21      	ldr	r3, [pc, #132]	@ (80025f0 <HAL_RCC_OscConfig+0x77c>)
 800256a:	4013      	ands	r3, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002574:	3a01      	subs	r2, #1
 8002576:	0112      	lsls	r2, r2, #4
 8002578:	4311      	orrs	r1, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800257e:	0212      	lsls	r2, r2, #8
 8002580:	4311      	orrs	r1, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002586:	0852      	lsrs	r2, r2, #1
 8002588:	3a01      	subs	r2, #1
 800258a:	0552      	lsls	r2, r2, #21
 800258c:	4311      	orrs	r1, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002592:	0852      	lsrs	r2, r2, #1
 8002594:	3a01      	subs	r2, #1
 8002596:	0652      	lsls	r2, r2, #25
 8002598:	4311      	orrs	r1, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800259e:	06d2      	lsls	r2, r2, #27
 80025a0:	430a      	orrs	r2, r1
 80025a2:	4912      	ldr	r1, [pc, #72]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025a8:	4b10      	ldr	r3, [pc, #64]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0f      	ldr	r2, [pc, #60]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 80025ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025b4:	4b0d      	ldr	r3, [pc, #52]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4a0c      	ldr	r2, [pc, #48]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 80025ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025c0:	f7ff fb02 	bl	8001bc8 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c8:	f7ff fafe 	bl	8001bc8 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e058      	b.n	800268c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025da:	4b04      	ldr	r3, [pc, #16]	@ (80025ec <HAL_RCC_OscConfig+0x778>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025e6:	e050      	b.n	800268a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e04f      	b.n	800268c <HAL_RCC_OscConfig+0x818>
 80025ec:	40021000 	.word	0x40021000
 80025f0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f4:	4b27      	ldr	r3, [pc, #156]	@ (8002694 <HAL_RCC_OscConfig+0x820>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d144      	bne.n	800268a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002600:	4b24      	ldr	r3, [pc, #144]	@ (8002694 <HAL_RCC_OscConfig+0x820>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a23      	ldr	r2, [pc, #140]	@ (8002694 <HAL_RCC_OscConfig+0x820>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800260a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800260c:	4b21      	ldr	r3, [pc, #132]	@ (8002694 <HAL_RCC_OscConfig+0x820>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a20      	ldr	r2, [pc, #128]	@ (8002694 <HAL_RCC_OscConfig+0x820>)
 8002612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002616:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002618:	f7ff fad6 	bl	8001bc8 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002620:	f7ff fad2 	bl	8001bc8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e02c      	b.n	800268c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002632:	4b18      	ldr	r3, [pc, #96]	@ (8002694 <HAL_RCC_OscConfig+0x820>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x7ac>
 800263e:	e024      	b.n	800268a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b0c      	cmp	r3, #12
 8002644:	d01f      	beq.n	8002686 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <HAL_RCC_OscConfig+0x820>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a12      	ldr	r2, [pc, #72]	@ (8002694 <HAL_RCC_OscConfig+0x820>)
 800264c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7ff fab9 	bl	8001bc8 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265a:	f7ff fab5 	bl	8001bc8 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e00f      	b.n	800268c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800266c:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <HAL_RCC_OscConfig+0x820>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f0      	bne.n	800265a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002678:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <HAL_RCC_OscConfig+0x820>)
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	4905      	ldr	r1, [pc, #20]	@ (8002694 <HAL_RCC_OscConfig+0x820>)
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_RCC_OscConfig+0x824>)
 8002680:	4013      	ands	r3, r2
 8002682:	60cb      	str	r3, [r1, #12]
 8002684:	e001      	b.n	800268a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	feeefffc 	.word	0xfeeefffc

0800269c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0e7      	b.n	8002880 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b0:	4b75      	ldr	r3, [pc, #468]	@ (8002888 <HAL_RCC_ClockConfig+0x1ec>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d910      	bls.n	80026e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b72      	ldr	r3, [pc, #456]	@ (8002888 <HAL_RCC_ClockConfig+0x1ec>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 0207 	bic.w	r2, r3, #7
 80026c6:	4970      	ldr	r1, [pc, #448]	@ (8002888 <HAL_RCC_ClockConfig+0x1ec>)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002888 <HAL_RCC_ClockConfig+0x1ec>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0cf      	b.n	8002880 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d010      	beq.n	800270e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	4b66      	ldr	r3, [pc, #408]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d908      	bls.n	800270e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fc:	4b63      	ldr	r3, [pc, #396]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	4960      	ldr	r1, [pc, #384]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d04c      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b03      	cmp	r3, #3
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002722:	4b5a      	ldr	r3, [pc, #360]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d121      	bne.n	8002772 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0a6      	b.n	8002880 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800273a:	4b54      	ldr	r3, [pc, #336]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d115      	bne.n	8002772 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e09a      	b.n	8002880 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d107      	bne.n	8002762 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002752:	4b4e      	ldr	r3, [pc, #312]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e08e      	b.n	8002880 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002762:	4b4a      	ldr	r3, [pc, #296]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e086      	b.n	8002880 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002772:	4b46      	ldr	r3, [pc, #280]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f023 0203 	bic.w	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4943      	ldr	r1, [pc, #268]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 8002780:	4313      	orrs	r3, r2
 8002782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002784:	f7ff fa20 	bl	8001bc8 <HAL_GetTick>
 8002788:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278c:	f7ff fa1c 	bl	8001bc8 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e06e      	b.n	8002880 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	4b3a      	ldr	r3, [pc, #232]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 020c 	and.w	r2, r3, #12
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d1eb      	bne.n	800278c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d010      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	4b31      	ldr	r3, [pc, #196]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d208      	bcs.n	80027e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d0:	4b2e      	ldr	r3, [pc, #184]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	492b      	ldr	r1, [pc, #172]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e2:	4b29      	ldr	r3, [pc, #164]	@ (8002888 <HAL_RCC_ClockConfig+0x1ec>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d210      	bcs.n	8002812 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f0:	4b25      	ldr	r3, [pc, #148]	@ (8002888 <HAL_RCC_ClockConfig+0x1ec>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f023 0207 	bic.w	r2, r3, #7
 80027f8:	4923      	ldr	r1, [pc, #140]	@ (8002888 <HAL_RCC_ClockConfig+0x1ec>)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002800:	4b21      	ldr	r3, [pc, #132]	@ (8002888 <HAL_RCC_ClockConfig+0x1ec>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d001      	beq.n	8002812 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e036      	b.n	8002880 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281e:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	4918      	ldr	r1, [pc, #96]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 800282c:	4313      	orrs	r3, r2
 800282e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d009      	beq.n	8002850 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283c:	4b13      	ldr	r3, [pc, #76]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4910      	ldr	r1, [pc, #64]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 800284c:	4313      	orrs	r3, r2
 800284e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002850:	f000 f824 	bl	800289c <HAL_RCC_GetSysClockFreq>
 8002854:	4602      	mov	r2, r0
 8002856:	4b0d      	ldr	r3, [pc, #52]	@ (800288c <HAL_RCC_ClockConfig+0x1f0>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	490b      	ldr	r1, [pc, #44]	@ (8002890 <HAL_RCC_ClockConfig+0x1f4>)
 8002862:	5ccb      	ldrb	r3, [r1, r3]
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
 800286c:	4a09      	ldr	r2, [pc, #36]	@ (8002894 <HAL_RCC_ClockConfig+0x1f8>)
 800286e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002870:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <HAL_RCC_ClockConfig+0x1fc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff f957 	bl	8001b28 <HAL_InitTick>
 800287a:	4603      	mov	r3, r0
 800287c:	72fb      	strb	r3, [r7, #11]

  return status;
 800287e:	7afb      	ldrb	r3, [r7, #11]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40022000 	.word	0x40022000
 800288c:	40021000 	.word	0x40021000
 8002890:	08002ae4 	.word	0x08002ae4
 8002894:	20000004 	.word	0x20000004
 8002898:	20000008 	.word	0x20000008

0800289c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	@ 0x24
 80028a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028aa:	4b3e      	ldr	r3, [pc, #248]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b4:	4b3b      	ldr	r3, [pc, #236]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x34>
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d121      	bne.n	800290e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d11e      	bne.n	800290e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028d0:	4b34      	ldr	r3, [pc, #208]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028dc:	4b31      	ldr	r3, [pc, #196]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	e005      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028ec:	4b2d      	ldr	r3, [pc, #180]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028f8:	4a2b      	ldr	r2, [pc, #172]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10d      	bne.n	8002924 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800290c:	e00a      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b04      	cmp	r3, #4
 8002912:	d102      	bne.n	800291a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002914:	4b25      	ldr	r3, [pc, #148]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	e004      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b08      	cmp	r3, #8
 800291e:	d101      	bne.n	8002924 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002920:	4b23      	ldr	r3, [pc, #140]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002922:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d134      	bne.n	8002994 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800292a:	4b1e      	ldr	r3, [pc, #120]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d003      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0xa6>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d003      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0xac>
 8002940:	e005      	b.n	800294e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002942:	4b1a      	ldr	r3, [pc, #104]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002944:	617b      	str	r3, [r7, #20]
      break;
 8002946:	e005      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002948:	4b19      	ldr	r3, [pc, #100]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800294a:	617b      	str	r3, [r7, #20]
      break;
 800294c:	e002      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	617b      	str	r3, [r7, #20]
      break;
 8002952:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002954:	4b13      	ldr	r3, [pc, #76]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	3301      	adds	r3, #1
 8002960:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002962:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	fb03 f202 	mul.w	r2, r3, r2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	fbb2 f3f3 	udiv	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800297a:	4b0a      	ldr	r3, [pc, #40]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	0e5b      	lsrs	r3, r3, #25
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	3301      	adds	r3, #1
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002992:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002994:	69bb      	ldr	r3, [r7, #24]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	@ 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
 80029a8:	08002af4 	.word	0x08002af4
 80029ac:	00f42400 	.word	0x00f42400
 80029b0:	007a1200 	.word	0x007a1200

080029b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029c0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029cc:	f7ff f9ee 	bl	8001dac <HAL_PWREx_GetVoltageRange>
 80029d0:	6178      	str	r0, [r7, #20]
 80029d2:	e014      	b.n	80029fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029d4:	4b25      	ldr	r3, [pc, #148]	@ (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d8:	4a24      	ldr	r2, [pc, #144]	@ (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029de:	6593      	str	r3, [r2, #88]	@ 0x58
 80029e0:	4b22      	ldr	r3, [pc, #136]	@ (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029ec:	f7ff f9de 	bl	8001dac <HAL_PWREx_GetVoltageRange>
 80029f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029f2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a04:	d10b      	bne.n	8002a1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b80      	cmp	r3, #128	@ 0x80
 8002a0a:	d919      	bls.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a10:	d902      	bls.n	8002a18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a12:	2302      	movs	r3, #2
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	e013      	b.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a18:	2301      	movs	r3, #1
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	e010      	b.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b80      	cmp	r3, #128	@ 0x80
 8002a22:	d902      	bls.n	8002a2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a24:	2303      	movs	r3, #3
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	e00a      	b.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b80      	cmp	r3, #128	@ 0x80
 8002a2e:	d102      	bne.n	8002a36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a30:	2302      	movs	r3, #2
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	e004      	b.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b70      	cmp	r3, #112	@ 0x70
 8002a3a:	d101      	bne.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a40:	4b0b      	ldr	r3, [pc, #44]	@ (8002a70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 0207 	bic.w	r2, r3, #7
 8002a48:	4909      	ldr	r1, [pc, #36]	@ (8002a70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a50:	4b07      	ldr	r3, [pc, #28]	@ (8002a70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d001      	beq.n	8002a62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40022000 	.word	0x40022000

08002a74 <memset>:
 8002a74:	4402      	add	r2, r0
 8002a76:	4603      	mov	r3, r0
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d100      	bne.n	8002a7e <memset+0xa>
 8002a7c:	4770      	bx	lr
 8002a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a82:	e7f9      	b.n	8002a78 <memset+0x4>

08002a84 <__libc_init_array>:
 8002a84:	b570      	push	{r4, r5, r6, lr}
 8002a86:	4d0d      	ldr	r5, [pc, #52]	@ (8002abc <__libc_init_array+0x38>)
 8002a88:	4c0d      	ldr	r4, [pc, #52]	@ (8002ac0 <__libc_init_array+0x3c>)
 8002a8a:	1b64      	subs	r4, r4, r5
 8002a8c:	10a4      	asrs	r4, r4, #2
 8002a8e:	2600      	movs	r6, #0
 8002a90:	42a6      	cmp	r6, r4
 8002a92:	d109      	bne.n	8002aa8 <__libc_init_array+0x24>
 8002a94:	4d0b      	ldr	r5, [pc, #44]	@ (8002ac4 <__libc_init_array+0x40>)
 8002a96:	4c0c      	ldr	r4, [pc, #48]	@ (8002ac8 <__libc_init_array+0x44>)
 8002a98:	f000 f818 	bl	8002acc <_init>
 8002a9c:	1b64      	subs	r4, r4, r5
 8002a9e:	10a4      	asrs	r4, r4, #2
 8002aa0:	2600      	movs	r6, #0
 8002aa2:	42a6      	cmp	r6, r4
 8002aa4:	d105      	bne.n	8002ab2 <__libc_init_array+0x2e>
 8002aa6:	bd70      	pop	{r4, r5, r6, pc}
 8002aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aac:	4798      	blx	r3
 8002aae:	3601      	adds	r6, #1
 8002ab0:	e7ee      	b.n	8002a90 <__libc_init_array+0xc>
 8002ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab6:	4798      	blx	r3
 8002ab8:	3601      	adds	r6, #1
 8002aba:	e7f2      	b.n	8002aa2 <__libc_init_array+0x1e>
 8002abc:	08002b24 	.word	0x08002b24
 8002ac0:	08002b24 	.word	0x08002b24
 8002ac4:	08002b24 	.word	0x08002b24
 8002ac8:	08002b28 	.word	0x08002b28

08002acc <_init>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	bf00      	nop
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr

08002ad8 <_fini>:
 8002ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ada:	bf00      	nop
 8002adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ade:	bc08      	pop	{r3}
 8002ae0:	469e      	mov	lr, r3
 8002ae2:	4770      	bx	lr
