
Simeon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021b8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002344  08002344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002384  08002384  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002384  08002384  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002384  08002384  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002384  08002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002388  08002388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800238c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000010  0800239c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  0800239c  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005357  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001597  00000000  00000000  000253da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000670  00000000  00000000  00026978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004a5  00000000  00000000  00026fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ebd5  00000000  00000000  0002748d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e36  00000000  00000000  00046062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5fc0  00000000  00000000  0004ee98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001674  00000000  00000000  00104e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001064cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800232c 	.word	0x0800232c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	0800232c 	.word	0x0800232c

080001cc <ax_angle_move>:
update_crc (unsigned short crc_accum, unsigned char *data_blk_ptr,
	    unsigned short data_blk_size);

void
ax_angle_move (uint8_t id, uint16_t angle, uint16_t speed)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	460b      	mov	r3, r1
 80001d8:	80bb      	strh	r3, [r7, #4]
 80001da:	4613      	mov	r3, r2
 80001dc:	807b      	strh	r3, [r7, #2]
	uint8_t angle_low, angle_high, speed_low, speed_high;
	  angle_low = angle & 0xff;
 80001de:	88bb      	ldrh	r3, [r7, #4]
 80001e0:	77bb      	strb	r3, [r7, #30]
	  angle_high = angle >> 8;
 80001e2:	88bb      	ldrh	r3, [r7, #4]
 80001e4:	0a1b      	lsrs	r3, r3, #8
 80001e6:	b29b      	uxth	r3, r3
 80001e8:	777b      	strb	r3, [r7, #29]
	  speed_low = speed & 0xff;
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	773b      	strb	r3, [r7, #28]
	  speed_high = speed >> 8;
 80001ee:	887b      	ldrh	r3, [r7, #2]
 80001f0:	0a1b      	lsrs	r3, r3, #8
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	76fb      	strb	r3, [r7, #27]

	  uint16_t checksum_local = id + 7 + 3 + 0x1e + angle_low + angle_high
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	b29a      	uxth	r2, r3
 80001fa:	7fbb      	ldrb	r3, [r7, #30]
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	4413      	add	r3, r2
 8000200:	b29a      	uxth	r2, r3
 8000202:	7f7b      	ldrb	r3, [r7, #29]
 8000204:	b29b      	uxth	r3, r3
 8000206:	4413      	add	r3, r2
 8000208:	b29a      	uxth	r2, r3
	      + speed_low + speed_high;
 800020a:	7f3b      	ldrb	r3, [r7, #28]
 800020c:	b29b      	uxth	r3, r3
 800020e:	4413      	add	r3, r2
 8000210:	b29a      	uxth	r2, r3
 8000212:	7efb      	ldrb	r3, [r7, #27]
 8000214:	b29b      	uxth	r3, r3
 8000216:	4413      	add	r3, r2
 8000218:	b29b      	uxth	r3, r3
	  uint16_t checksum_local = id + 7 + 3 + 0x1e + angle_low + angle_high
 800021a:	3328      	adds	r3, #40	; 0x28
 800021c:	833b      	strh	r3, [r7, #24]
	  uint8_t checksum = (uint8_t) (~checksum_local);
 800021e:	8b3b      	ldrh	r3, [r7, #24]
 8000220:	b2db      	uxtb	r3, r3
 8000222:	43db      	mvns	r3, r3
 8000224:	75fb      	strb	r3, [r7, #23]
	  uint8_t ax_move[] =
 8000226:	23ff      	movs	r3, #255	; 0xff
 8000228:	733b      	strb	r3, [r7, #12]
 800022a:	23ff      	movs	r3, #255	; 0xff
 800022c:	737b      	strb	r3, [r7, #13]
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	73bb      	strb	r3, [r7, #14]
 8000232:	2307      	movs	r3, #7
 8000234:	73fb      	strb	r3, [r7, #15]
 8000236:	2303      	movs	r3, #3
 8000238:	743b      	strb	r3, [r7, #16]
 800023a:	231e      	movs	r3, #30
 800023c:	747b      	strb	r3, [r7, #17]
 800023e:	7fbb      	ldrb	r3, [r7, #30]
 8000240:	74bb      	strb	r3, [r7, #18]
 8000242:	7f7b      	ldrb	r3, [r7, #29]
 8000244:	74fb      	strb	r3, [r7, #19]
 8000246:	7f3b      	ldrb	r3, [r7, #28]
 8000248:	753b      	strb	r3, [r7, #20]
 800024a:	7efb      	ldrb	r3, [r7, #27]
 800024c:	757b      	strb	r3, [r7, #21]
 800024e:	7dfb      	ldrb	r3, [r7, #23]
 8000250:	75bb      	strb	r3, [r7, #22]
	    { 0xff, 0xff, id, 0x07, 0x03, 0x1E, angle_low, angle_high, speed_low,
		speed_high, checksum };

  for (uint8_t i = 0; i < 11; i++)
 8000252:	2300      	movs	r3, #0
 8000254:	77fb      	strb	r3, [r7, #31]
 8000256:	e00a      	b.n	800026e <ax_angle_move+0xa2>
    {
      UART_send_byte(ax_move[i]);
 8000258:	7ffb      	ldrb	r3, [r7, #31]
 800025a:	3320      	adds	r3, #32
 800025c:	443b      	add	r3, r7
 800025e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fef8 	bl	8001058 <UART_send_byte>
  for (uint8_t i = 0; i < 11; i++)
 8000268:	7ffb      	ldrb	r3, [r7, #31]
 800026a:	3301      	adds	r3, #1
 800026c:	77fb      	strb	r3, [r7, #31]
 800026e:	7ffb      	ldrb	r3, [r7, #31]
 8000270:	2b0a      	cmp	r3, #10
 8000272:	d9f1      	bls.n	8000258 <ax_angle_move+0x8c>
    }
}
 8000274:	bf00      	nop
 8000276:	bf00      	nop
 8000278:	3720      	adds	r7, #32
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <ax_wheel_mode>:

void
ax_wheel_mode(uint8_t id)
{
 800027e:	b580      	push	{r7, lr}
 8000280:	b086      	sub	sp, #24
 8000282:	af00      	add	r7, sp, #0
 8000284:	4603      	mov	r3, r0
 8000286:	71fb      	strb	r3, [r7, #7]
	// 0-1023 CCW
	// 1024-2047 CW

	uint16_t checksum_local = id + 5 + 3 + 8;
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	b29b      	uxth	r3, r3
 800028c:	3310      	adds	r3, #16
 800028e:	82bb      	strh	r3, [r7, #20]
	uint8_t checksum = (uint8_t) (~checksum_local);
 8000290:	8abb      	ldrh	r3, [r7, #20]
 8000292:	b2db      	uxtb	r3, r3
 8000294:	43db      	mvns	r3, r3
 8000296:	74fb      	strb	r3, [r7, #19]
	uint8_t ax_move[] =
 8000298:	23ff      	movs	r3, #255	; 0xff
 800029a:	723b      	strb	r3, [r7, #8]
 800029c:	23ff      	movs	r3, #255	; 0xff
 800029e:	727b      	strb	r3, [r7, #9]
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	72bb      	strb	r3, [r7, #10]
 80002a4:	2305      	movs	r3, #5
 80002a6:	72fb      	strb	r3, [r7, #11]
 80002a8:	2303      	movs	r3, #3
 80002aa:	733b      	strb	r3, [r7, #12]
 80002ac:	2308      	movs	r3, #8
 80002ae:	737b      	strb	r3, [r7, #13]
 80002b0:	2300      	movs	r3, #0
 80002b2:	73bb      	strb	r3, [r7, #14]
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]
 80002b8:	7cfb      	ldrb	r3, [r7, #19]
 80002ba:	743b      	strb	r3, [r7, #16]
			{ 0xff, 0xff, id, 0x05, 0x03, 0x08, 0x00, 0x00, checksum };

	for (uint8_t i = 0; i < 9; i++)
 80002bc:	2300      	movs	r3, #0
 80002be:	75fb      	strb	r3, [r7, #23]
 80002c0:	e00a      	b.n	80002d8 <ax_wheel_mode+0x5a>
			    {
			      UART_send_byte(ax_move[i]);
 80002c2:	7dfb      	ldrb	r3, [r7, #23]
 80002c4:	3318      	adds	r3, #24
 80002c6:	443b      	add	r3, r7
 80002c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fec3 	bl	8001058 <UART_send_byte>
	for (uint8_t i = 0; i < 9; i++)
 80002d2:	7dfb      	ldrb	r3, [r7, #23]
 80002d4:	3301      	adds	r3, #1
 80002d6:	75fb      	strb	r3, [r7, #23]
 80002d8:	7dfb      	ldrb	r3, [r7, #23]
 80002da:	2b08      	cmp	r3, #8
 80002dc:	d9f1      	bls.n	80002c2 <ax_wheel_mode+0x44>
			    }
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	3718      	adds	r7, #24
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <sensor_Init>:
//portC
uint8_t infra_1 = 1;

void
sensor_Init()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
sensor_IO_init();
 80002ec:	f000 f802 	bl	80002f4 <sensor_IO_init>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <sensor_IO_init>:

void
sensor_IO_init()
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (0b1 << 1); //takt za gpioB
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <sensor_IO_init+0x34>)
 80002fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fc:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <sensor_IO_init+0x34>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB-> MODER &= ~(0b11 << 2* infra_1);  //PB1
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <sensor_IO_init+0x38>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a09      	ldr	r2, [pc, #36]	; (8000330 <sensor_IO_init+0x3c>)
 800030a:	7812      	ldrb	r2, [r2, #0]
 800030c:	0052      	lsls	r2, r2, #1
 800030e:	2103      	movs	r1, #3
 8000310:	fa01 f202 	lsl.w	r2, r1, r2
 8000314:	43d2      	mvns	r2, r2
 8000316:	4611      	mov	r1, r2
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <sensor_IO_init+0x38>)
 800031a:	400b      	ands	r3, r1
 800031c:	6013      	str	r3, [r2, #0]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40021000 	.word	0x40021000
 800032c:	48000400 	.word	0x48000400
 8000330:	20000000 	.word	0x20000000

08000334 <sensor_JedanJedini>:

bool
sensor_JedanJedini()
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
	if(GPIOB->IDR & (0b1<<infra_1))
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <sensor_JedanJedini+0x28>)
 800033a:	691b      	ldr	r3, [r3, #16]
 800033c:	4a08      	ldr	r2, [pc, #32]	; (8000360 <sensor_JedanJedini+0x2c>)
 800033e:	7812      	ldrb	r2, [r2, #0]
 8000340:	4611      	mov	r1, r2
 8000342:	2201      	movs	r2, #1
 8000344:	408a      	lsls	r2, r1
 8000346:	4013      	ands	r3, r2
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <sensor_JedanJedini+0x1c>
		return true;
 800034c:	2301      	movs	r3, #1
 800034e:	e000      	b.n	8000352 <sensor_JedanJedini+0x1e>
	return false;
 8000350:	2300      	movs	r3, #0
}
 8000352:	4618      	mov	r0, r3
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	48000400 	.word	0x48000400
 8000360:	20000000 	.word	0x20000000

08000364 <tactic_blue_2>:
		default:
			break;
	}
}

void tactic_blue_2(uint8_t AX_Pogonski, uint8_t AX_Zakretni) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	460a      	mov	r2, r1
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	4613      	mov	r3, r2
 8000372:	71bb      	strb	r3, [r7, #6]
	switch (tactic_state) {
 8000374:	4bbc      	ldr	r3, [pc, #752]	; (8000668 <tactic_blue_2+0x304>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b0d      	cmp	r3, #13
 800037c:	f200 828a 	bhi.w	8000894 <tactic_blue_2+0x530>
 8000380:	a201      	add	r2, pc, #4	; (adr r2, 8000388 <tactic_blue_2+0x24>)
 8000382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000386:	bf00      	nop
 8000388:	080003c1 	.word	0x080003c1
 800038c:	080003dd 	.word	0x080003dd
 8000390:	08000493 	.word	0x08000493
 8000394:	080004f1 	.word	0x080004f1
 8000398:	0800054f 	.word	0x0800054f
 800039c:	080005ad 	.word	0x080005ad
 80003a0:	0800060b 	.word	0x0800060b
 80003a4:	08000675 	.word	0x08000675
 80003a8:	080006d1 	.word	0x080006d1
 80003ac:	0800072d 	.word	0x0800072d
 80003b0:	08000789 	.word	0x08000789
 80003b4:	080007e5 	.word	0x080007e5
 80003b8:	08000835 	.word	0x08000835
 80003bc:	08000887 	.word	0x08000887
	case 0:
		if (IO_cinc()) {
 80003c0:	f000 fc2c 	bl	8000c1c <IO_cinc>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	f000 8266 	beq.w	8000898 <tactic_blue_2+0x534>
			tactic_state++;
 80003cc:	4ba6      	ldr	r3, [pc, #664]	; (8000668 <tactic_blue_2+0x304>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	3301      	adds	r3, #1
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	4ba4      	ldr	r3, [pc, #656]	; (8000668 <tactic_blue_2+0x304>)
 80003d8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80003da:	e25d      	b.n	8000898 <tactic_blue_2+0x534>

	case 1:
		TajmerDelay(200);
 80003dc:	20c8      	movs	r0, #200	; 0xc8
 80003de:	f000 fca9 	bl	8000d34 <TajmerDelay>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80003e2:	79bb      	ldrb	r3, [r7, #6]
 80003e4:	22c8      	movs	r2, #200	; 0xc8
 80003e6:	f240 213a 	movw	r1, #570	; 0x23a
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff feee 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	22c8      	movs	r2, #200	; 0xc8
 80003f4:	f240 213a 	movw	r1, #570	; 0x23a
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff fee7 	bl	80001cc <ax_angle_move>
		TajmerDelay(500);
 80003fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000402:	f000 fc97 	bl	8000d34 <TajmerDelay>
		ax_angle_move(AX_Zakretni, DESNOPP1, 200);
 8000406:	79bb      	ldrb	r3, [r7, #6]
 8000408:	22c8      	movs	r2, #200	; 0xc8
 800040a:	f240 2119 	movw	r1, #537	; 0x219
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff fedc 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, DESNOPP1, 200);
 8000414:	79bb      	ldrb	r3, [r7, #6]
 8000416:	22c8      	movs	r2, #200	; 0xc8
 8000418:	f240 2119 	movw	r1, #537	; 0x219
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff fed5 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, DESNOPP1, 200);
 8000422:	79bb      	ldrb	r3, [r7, #6]
 8000424:	22c8      	movs	r2, #200	; 0xc8
 8000426:	f240 2119 	movw	r1, #537	; 0x219
 800042a:	4618      	mov	r0, r3
 800042c:	f7ff fece 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, DESNOPP1, 200);
 8000430:	79bb      	ldrb	r3, [r7, #6]
 8000432:	22c8      	movs	r2, #200	; 0xc8
 8000434:	f240 2119 	movw	r1, #537	; 0x219
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff fec7 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 800043e:	20c8      	movs	r0, #200	; 0xc8
 8000440:	f000 fc78 	bl	8000d34 <TajmerDelay>
		ax_wheel_mode(AX_Pogonski);
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff ff19 	bl	800027e <ax_wheel_mode>
		TajmerDelay(200);
 800044c:	20c8      	movs	r0, #200	; 0xc8
 800044e:	f000 fc71 	bl	8000d34 <TajmerDelay>
		ax_angle_move(AX_Pogonski, 0, 1023);
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff feb6 	bl	80001cc <ax_angle_move>
		TajmerDelay(250);
 8000460:	20fa      	movs	r0, #250	; 0xfa
 8000462:	f000 fc67 	bl	8000d34 <TajmerDelay>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 8000466:	79bb      	ldrb	r3, [r7, #6]
 8000468:	22c8      	movs	r2, #200	; 0xc8
 800046a:	f240 213a 	movw	r1, #570	; 0x23a
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff feac 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 8000474:	79bb      	ldrb	r3, [r7, #6]
 8000476:	22c8      	movs	r2, #200	; 0xc8
 8000478:	f240 213a 	movw	r1, #570	; 0x23a
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff fea5 	bl	80001cc <ax_angle_move>

		tactic_state++;
 8000482:	4b79      	ldr	r3, [pc, #484]	; (8000668 <tactic_blue_2+0x304>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	3301      	adds	r3, #1
 800048a:	b2da      	uxtb	r2, r3
 800048c:	4b76      	ldr	r3, [pc, #472]	; (8000668 <tactic_blue_2+0x304>)
 800048e:	701a      	strb	r2, [r3, #0]
		break;
 8000490:	e203      	b.n	800089a <tactic_blue_2+0x536>

	case 2:
		sensors_case_timer = SENSOR_JJ;
 8000492:	4b76      	ldr	r3, [pc, #472]	; (800066c <tactic_blue_2+0x308>)
 8000494:	2201      	movs	r2, #1
 8000496:	701a      	strb	r2, [r3, #0]

		if(interrupted)
 8000498:	4b75      	ldr	r3, [pc, #468]	; (8000670 <tactic_blue_2+0x30c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	b2db      	uxtb	r3, r3
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d00d      	beq.n	80004be <tactic_blue_2+0x15a>
		{

			interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 80004a2:	79ba      	ldrb	r2, [r7, #6]
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	4611      	mov	r1, r2
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 fa17 	bl	80008dc <interrupted_func_left_sideway>
			tactic_state+=8;
 80004ae:	4b6e      	ldr	r3, [pc, #440]	; (8000668 <tactic_blue_2+0x304>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	3308      	adds	r3, #8
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	4b6b      	ldr	r3, [pc, #428]	; (8000668 <tactic_blue_2+0x304>)
 80004ba:	701a      	strb	r2, [r3, #0]

			TajmerDelay(150);
			tactic_state++;
		}

		break;
 80004bc:	e1ed      	b.n	800089a <tactic_blue_2+0x536>
			ax_wheel_mode(AX_Pogonski);
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff fedc 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80004c6:	2064      	movs	r0, #100	; 0x64
 80004c8:	f000 fc34 	bl	8000d34 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80004d2:	2100      	movs	r1, #0
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff fe79 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 80004da:	2096      	movs	r0, #150	; 0x96
 80004dc:	f000 fc2a 	bl	8000d34 <TajmerDelay>
			tactic_state++;
 80004e0:	4b61      	ldr	r3, [pc, #388]	; (8000668 <tactic_blue_2+0x304>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	3301      	adds	r3, #1
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	4b5f      	ldr	r3, [pc, #380]	; (8000668 <tactic_blue_2+0x304>)
 80004ec:	701a      	strb	r2, [r3, #0]
		break;
 80004ee:	e1d4      	b.n	800089a <tactic_blue_2+0x536>
	case 3:
		sensors_case_timer = SENSOR_JJ;
 80004f0:	4b5e      	ldr	r3, [pc, #376]	; (800066c <tactic_blue_2+0x308>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]


		if (interrupted) {
 80004f6:	4b5e      	ldr	r3, [pc, #376]	; (8000670 <tactic_blue_2+0x30c>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d00d      	beq.n	800051c <tactic_blue_2+0x1b8>
			interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 8000500:	79ba      	ldrb	r2, [r7, #6]
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	4611      	mov	r1, r2
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f9e8 	bl	80008dc <interrupted_func_left_sideway>
			tactic_state+=7;
 800050c:	4b56      	ldr	r3, [pc, #344]	; (8000668 <tactic_blue_2+0x304>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	3307      	adds	r3, #7
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4b54      	ldr	r3, [pc, #336]	; (8000668 <tactic_blue_2+0x304>)
 8000518:	701a      	strb	r2, [r3, #0]
			ax_angle_move(AX_Pogonski, 0, 1023);

			TajmerDelay(150);
			tactic_state++;
		}
		break;
 800051a:	e1be      	b.n	800089a <tactic_blue_2+0x536>
			ax_wheel_mode(AX_Pogonski);
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff fead 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000524:	2064      	movs	r0, #100	; 0x64
 8000526:	f000 fc05 	bl	8000d34 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe4a 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 8000538:	2096      	movs	r0, #150	; 0x96
 800053a:	f000 fbfb 	bl	8000d34 <TajmerDelay>
			tactic_state++;
 800053e:	4b4a      	ldr	r3, [pc, #296]	; (8000668 <tactic_blue_2+0x304>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b2db      	uxtb	r3, r3
 8000544:	3301      	adds	r3, #1
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b47      	ldr	r3, [pc, #284]	; (8000668 <tactic_blue_2+0x304>)
 800054a:	701a      	strb	r2, [r3, #0]
		break;
 800054c:	e1a5      	b.n	800089a <tactic_blue_2+0x536>
	case 4:
		sensors_case_timer = SENSOR_JJ;
 800054e:	4b47      	ldr	r3, [pc, #284]	; (800066c <tactic_blue_2+0x308>)
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]


		if (interrupted) {
 8000554:	4b46      	ldr	r3, [pc, #280]	; (8000670 <tactic_blue_2+0x30c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d00d      	beq.n	800057a <tactic_blue_2+0x216>
			interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 800055e:	79ba      	ldrb	r2, [r7, #6]
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	4611      	mov	r1, r2
 8000564:	4618      	mov	r0, r3
 8000566:	f000 f9b9 	bl	80008dc <interrupted_func_left_sideway>
			tactic_state+=6;
 800056a:	4b3f      	ldr	r3, [pc, #252]	; (8000668 <tactic_blue_2+0x304>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	3306      	adds	r3, #6
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b3c      	ldr	r3, [pc, #240]	; (8000668 <tactic_blue_2+0x304>)
 8000576:	701a      	strb	r2, [r3, #0]
			ax_angle_move(AX_Pogonski, 0, 1023);

			TajmerDelay(150);
			tactic_state++;
		}
		break;
 8000578:	e18f      	b.n	800089a <tactic_blue_2+0x536>
			ax_wheel_mode(AX_Pogonski);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff fe7e 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000582:	2064      	movs	r0, #100	; 0x64
 8000584:	f000 fbd6 	bl	8000d34 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe1b 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 8000596:	2096      	movs	r0, #150	; 0x96
 8000598:	f000 fbcc 	bl	8000d34 <TajmerDelay>
			tactic_state++;
 800059c:	4b32      	ldr	r3, [pc, #200]	; (8000668 <tactic_blue_2+0x304>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	3301      	adds	r3, #1
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b30      	ldr	r3, [pc, #192]	; (8000668 <tactic_blue_2+0x304>)
 80005a8:	701a      	strb	r2, [r3, #0]
		break;
 80005aa:	e176      	b.n	800089a <tactic_blue_2+0x536>
	case 5:
		sensors_case_timer = SENSOR_JJ;
 80005ac:	4b2f      	ldr	r3, [pc, #188]	; (800066c <tactic_blue_2+0x308>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]


		if (interrupted) {
 80005b2:	4b2f      	ldr	r3, [pc, #188]	; (8000670 <tactic_blue_2+0x30c>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00d      	beq.n	80005d8 <tactic_blue_2+0x274>
			interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 80005bc:	79ba      	ldrb	r2, [r7, #6]
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	4611      	mov	r1, r2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f98a 	bl	80008dc <interrupted_func_left_sideway>
			tactic_state+=5;
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <tactic_blue_2+0x304>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	3305      	adds	r3, #5
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b25      	ldr	r3, [pc, #148]	; (8000668 <tactic_blue_2+0x304>)
 80005d4:	701a      	strb	r2, [r3, #0]


			TajmerDelay(150);
			tactic_state++;
		}
		break;
 80005d6:	e160      	b.n	800089a <tactic_blue_2+0x536>
			ax_wheel_mode(AX_Pogonski);
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe4f 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80005e0:	2064      	movs	r0, #100	; 0x64
 80005e2:	f000 fba7 	bl	8000d34 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fdec 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 80005f4:	2096      	movs	r0, #150	; 0x96
 80005f6:	f000 fb9d 	bl	8000d34 <TajmerDelay>
			tactic_state++;
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <tactic_blue_2+0x304>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	3301      	adds	r3, #1
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <tactic_blue_2+0x304>)
 8000606:	701a      	strb	r2, [r3, #0]
		break;
 8000608:	e147      	b.n	800089a <tactic_blue_2+0x536>
	case 6:
		sensors_case_timer = SENSOR_JJ;
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <tactic_blue_2+0x308>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <tactic_blue_2+0x30c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00d      	beq.n	8000636 <tactic_blue_2+0x2d2>
			interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 800061a:	79ba      	ldrb	r2, [r7, #6]
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	4611      	mov	r1, r2
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f95b 	bl	80008dc <interrupted_func_left_sideway>
			tactic_state+=4;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <tactic_blue_2+0x304>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	3304      	adds	r3, #4
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <tactic_blue_2+0x304>)
 8000632:	701a      	strb	r2, [r3, #0]
			ax_angle_move(AX_Pogonski, 0, 1023);

			TajmerDelay(150);
			tactic_state++;
		}
		break;
 8000634:	e131      	b.n	800089a <tactic_blue_2+0x536>
			ax_wheel_mode(AX_Pogonski);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fe20 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 800063e:	2064      	movs	r0, #100	; 0x64
 8000640:	f000 fb78 	bl	8000d34 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fdbd 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 8000652:	2096      	movs	r0, #150	; 0x96
 8000654:	f000 fb6e 	bl	8000d34 <TajmerDelay>
			tactic_state++;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <tactic_blue_2+0x304>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	3301      	adds	r3, #1
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b01      	ldr	r3, [pc, #4]	; (8000668 <tactic_blue_2+0x304>)
 8000664:	701a      	strb	r2, [r3, #0]
		break;
 8000666:	e118      	b.n	800089a <tactic_blue_2+0x536>
 8000668:	2000002c 	.word	0x2000002c
 800066c:	20000034 	.word	0x20000034
 8000670:	20000035 	.word	0x20000035
	case 7:
		sensors_case_timer = SENSOR_JJ;
 8000674:	4b8b      	ldr	r3, [pc, #556]	; (80008a4 <tactic_blue_2+0x540>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 800067a:	4b8b      	ldr	r3, [pc, #556]	; (80008a8 <tactic_blue_2+0x544>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00d      	beq.n	80006a0 <tactic_blue_2+0x33c>
			interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 8000684:	79ba      	ldrb	r2, [r7, #6]
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	4611      	mov	r1, r2
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f926 	bl	80008dc <interrupted_func_left_sideway>
			tactic_state+=3;
 8000690:	4b86      	ldr	r3, [pc, #536]	; (80008ac <tactic_blue_2+0x548>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	3303      	adds	r3, #3
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b84      	ldr	r3, [pc, #528]	; (80008ac <tactic_blue_2+0x548>)
 800069c:	701a      	strb	r2, [r3, #0]
 800069e:	e017      	b.n	80006d0 <tactic_blue_2+0x36c>

		} else {
			ax_wheel_mode(AX_Pogonski);
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fdeb 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80006a8:	2064      	movs	r0, #100	; 0x64
 80006aa:	f000 fb43 	bl	8000d34 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fd88 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 80006bc:	2096      	movs	r0, #150	; 0x96
 80006be:	f000 fb39 	bl	8000d34 <TajmerDelay>
			tactic_state++;
 80006c2:	4b7a      	ldr	r3, [pc, #488]	; (80008ac <tactic_blue_2+0x548>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	3301      	adds	r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b77      	ldr	r3, [pc, #476]	; (80008ac <tactic_blue_2+0x548>)
 80006ce:	701a      	strb	r2, [r3, #0]
		}
	case 8:
			sensors_case_timer = SENSOR_JJ;
 80006d0:	4b74      	ldr	r3, [pc, #464]	; (80008a4 <tactic_blue_2+0x540>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 80006d6:	4b74      	ldr	r3, [pc, #464]	; (80008a8 <tactic_blue_2+0x544>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d00d      	beq.n	80006fc <tactic_blue_2+0x398>
				interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 80006e0:	79ba      	ldrb	r2, [r7, #6]
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f8f8 	bl	80008dc <interrupted_func_left_sideway>
				tactic_state+=2;
 80006ec:	4b6f      	ldr	r3, [pc, #444]	; (80008ac <tactic_blue_2+0x548>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	3302      	adds	r3, #2
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b6d      	ldr	r3, [pc, #436]	; (80008ac <tactic_blue_2+0x548>)
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	e017      	b.n	800072c <tactic_blue_2+0x3c8>

			} else {
				ax_wheel_mode(AX_Pogonski);
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fdbd 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000704:	2064      	movs	r0, #100	; 0x64
 8000706:	f000 fb15 	bl	8000d34 <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 1023);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff fd5a 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 8000718:	2096      	movs	r0, #150	; 0x96
 800071a:	f000 fb0b 	bl	8000d34 <TajmerDelay>
				tactic_state++;
 800071e:	4b63      	ldr	r3, [pc, #396]	; (80008ac <tactic_blue_2+0x548>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	3301      	adds	r3, #1
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b60      	ldr	r3, [pc, #384]	; (80008ac <tactic_blue_2+0x548>)
 800072a:	701a      	strb	r2, [r3, #0]
			}
	case 9:
			sensors_case_timer = SENSOR_JJ;
 800072c:	4b5d      	ldr	r3, [pc, #372]	; (80008a4 <tactic_blue_2+0x540>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 8000732:	4b5d      	ldr	r3, [pc, #372]	; (80008a8 <tactic_blue_2+0x544>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00d      	beq.n	8000758 <tactic_blue_2+0x3f4>
				interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 800073c:	79ba      	ldrb	r2, [r7, #6]
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f000 f8ca 	bl	80008dc <interrupted_func_left_sideway>
				tactic_state+=2;
 8000748:	4b58      	ldr	r3, [pc, #352]	; (80008ac <tactic_blue_2+0x548>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	3302      	adds	r3, #2
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b56      	ldr	r3, [pc, #344]	; (80008ac <tactic_blue_2+0x548>)
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e017      	b.n	8000788 <tactic_blue_2+0x424>
			} else {
				ax_wheel_mode(AX_Pogonski);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fd8f 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000760:	2064      	movs	r0, #100	; 0x64
 8000762:	f000 fae7 	bl	8000d34 <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 511);
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	f240 12ff 	movw	r2, #511	; 0x1ff
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fd2c 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 8000774:	2096      	movs	r0, #150	; 0x96
 8000776:	f000 fadd 	bl	8000d34 <TajmerDelay>
				tactic_state++;
 800077a:	4b4c      	ldr	r3, [pc, #304]	; (80008ac <tactic_blue_2+0x548>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	3301      	adds	r3, #1
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b49      	ldr	r3, [pc, #292]	; (80008ac <tactic_blue_2+0x548>)
 8000786:	701a      	strb	r2, [r3, #0]
			}
	case 10:
			sensors_case_timer = SENSOR_JJ;
 8000788:	4b46      	ldr	r3, [pc, #280]	; (80008a4 <tactic_blue_2+0x540>)
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 800078e:	4b46      	ldr	r3, [pc, #280]	; (80008a8 <tactic_blue_2+0x544>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00d      	beq.n	80007b4 <tactic_blue_2+0x450>
				interrupted_func_left_sideway(AX_Pogonski, AX_Zakretni);
 8000798:	79ba      	ldrb	r2, [r7, #6]
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f89c 	bl	80008dc <interrupted_func_left_sideway>
				tactic_state+=2;
 80007a4:	4b41      	ldr	r3, [pc, #260]	; (80008ac <tactic_blue_2+0x548>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	3302      	adds	r3, #2
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <tactic_blue_2+0x548>)
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e017      	b.n	80007e4 <tactic_blue_2+0x480>
			} else {
				ax_wheel_mode(AX_Pogonski);
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fd61 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 80007bc:	2064      	movs	r0, #100	; 0x64
 80007be:	f000 fab9 	bl	8000d34 <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 511);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fcfe 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 80007d0:	2096      	movs	r0, #150	; 0x96
 80007d2:	f000 faaf 	bl	8000d34 <TajmerDelay>
				tactic_state++;
 80007d6:	4b35      	ldr	r3, [pc, #212]	; (80008ac <tactic_blue_2+0x548>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	3301      	adds	r3, #1
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b32      	ldr	r3, [pc, #200]	; (80008ac <tactic_blue_2+0x548>)
 80007e2:	701a      	strb	r2, [r3, #0]
			}
	case 11:
			sensors_case_timer = SENSOR_JJ;
 80007e4:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <tactic_blue_2+0x540>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 80007ea:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <tactic_blue_2+0x544>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d007      	beq.n	8000804 <tactic_blue_2+0x4a0>
				tactic_state = 11;
 80007f4:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <tactic_blue_2+0x548>)
 80007f6:	220b      	movs	r2, #11
 80007f8:	701a      	strb	r2, [r3, #0]
				interrupted_func_stop(AX_Pogonski);
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f857 	bl	80008b0 <interrupted_func_stop>
 8000802:	e017      	b.n	8000834 <tactic_blue_2+0x4d0>


			} else {
				ax_wheel_mode(AX_Pogonski);
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fd39 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 800080c:	2064      	movs	r0, #100	; 0x64
 800080e:	f000 fa91 	bl	8000d34 <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 511);
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fcd6 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 8000820:	2096      	movs	r0, #150	; 0x96
 8000822:	f000 fa87 	bl	8000d34 <TajmerDelay>
				tactic_state++;
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <tactic_blue_2+0x548>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	3301      	adds	r3, #1
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <tactic_blue_2+0x548>)
 8000832:	701a      	strb	r2, [r3, #0]
			}
	case 12:
			sensors_case_timer = SENSOR_JJ;
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <tactic_blue_2+0x540>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <tactic_blue_2+0x544>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d007      	beq.n	8000854 <tactic_blue_2+0x4f0>
				tactic_state = 12;
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <tactic_blue_2+0x548>)
 8000846:	220c      	movs	r2, #12
 8000848:	701a      	strb	r2, [r3, #0]
				interrupted_func_stop(AX_Pogonski);
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	4618      	mov	r0, r3
 800084e:	f000 f82f 	bl	80008b0 <interrupted_func_stop>
				ax_angle_move(AX_Pogonski, 0, 511);

				TajmerDelay(150);
				tactic_state++;
			}
		break;
 8000852:	e022      	b.n	800089a <tactic_blue_2+0x536>
				ax_wheel_mode(AX_Pogonski);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fd11 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 800085c:	2064      	movs	r0, #100	; 0x64
 800085e:	f000 fa69 	bl	8000d34 <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 511);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fcae 	bl	80001cc <ax_angle_move>
				TajmerDelay(150);
 8000870:	2096      	movs	r0, #150	; 0x96
 8000872:	f000 fa5f 	bl	8000d34 <TajmerDelay>
				tactic_state++;
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <tactic_blue_2+0x548>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	3301      	adds	r3, #1
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <tactic_blue_2+0x548>)
 8000882:	701a      	strb	r2, [r3, #0]
		break;
 8000884:	e009      	b.n	800089a <tactic_blue_2+0x536>
	case 13:
		ax_angle_move(AX_Pogonski, 0, 0);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fc9d 	bl	80001cc <ax_angle_move>
		break;
 8000892:	e002      	b.n	800089a <tactic_blue_2+0x536>
	default:
		break;
 8000894:	bf00      	nop
 8000896:	e000      	b.n	800089a <tactic_blue_2+0x536>
		break;
 8000898:	bf00      	nop
	}
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000034 	.word	0x20000034
 80008a8:	20000035 	.word	0x20000035
 80008ac:	2000002c 	.word	0x2000002c

080008b0 <interrupted_func_stop>:
		}
}

static void
interrupted_func_stop (uint8_t AX_Pogonski)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	TajmerDelay(200);
 80008ba:	20c8      	movs	r0, #200	; 0xc8
 80008bc:	f000 fa3a 	bl	8000d34 <TajmerDelay>
    ax_angle_move(AX_Pogonski, 0, 0);
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fc80 	bl	80001cc <ax_angle_move>
    TajmerDelay(500);
 80008cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d0:	f000 fa30 	bl	8000d34 <TajmerDelay>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <interrupted_func_left_sideway>:
	TajmerDelay(200);
}

static void
interrupted_func_left_sideway(uint8_t AX_Pogonski, uint8_t AX_Zakretni)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	460a      	mov	r2, r1
 80008e6:	71fb      	strb	r3, [r7, #7]
 80008e8:	4613      	mov	r3, r2
 80008ea:	71bb      	strb	r3, [r7, #6]
		ax_angle_move(ID_SIMA2_POGONSKI, 0, 767);
 80008ec:	f240 22ff 	movw	r2, #767	; 0x2ff
 80008f0:	2100      	movs	r1, #0
 80008f2:	2005      	movs	r0, #5
 80008f4:	f7ff fc6a 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 80008f8:	20c8      	movs	r0, #200	; 0xc8
 80008fa:	f000 fa1b 	bl	8000d34 <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 80008fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000902:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000906:	2006      	movs	r0, #6
 8000908:	f7ff fc60 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 800090c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000910:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000914:	2006      	movs	r0, #6
 8000916:	f7ff fc59 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 800091a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800091e:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000922:	2006      	movs	r0, #6
 8000924:	f7ff fc52 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800092c:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000930:	2006      	movs	r0, #6
 8000932:	f7ff fc4b 	bl	80001cc <ax_angle_move>
		TajmerDelay(250);
 8000936:	20fa      	movs	r0, #250	; 0xfa
 8000938:	f000 f9fc 	bl	8000d34 <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 800093c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000940:	f240 213a 	movw	r1, #570	; 0x23a
 8000944:	2006      	movs	r0, #6
 8000946:	f7ff fc41 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 800094a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800094e:	f240 213a 	movw	r1, #570	; 0x23a
 8000952:	2006      	movs	r0, #6
 8000954:	f7ff fc3a 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000958:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800095c:	f240 213a 	movw	r1, #570	; 0x23a
 8000960:	2006      	movs	r0, #6
 8000962:	f7ff fc33 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000966:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800096a:	f240 213a 	movw	r1, #570	; 0x23a
 800096e:	2006      	movs	r0, #6
 8000970:	f7ff fc2c 	bl	80001cc <ax_angle_move>
		TajmerDelay(400);
 8000974:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000978:	f000 f9dc 	bl	8000d34 <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 800097c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000980:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000984:	2006      	movs	r0, #6
 8000986:	f7ff fc21 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 800098a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800098e:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000992:	2006      	movs	r0, #6
 8000994:	f7ff fc1a 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 8000998:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800099c:	f240 11b7 	movw	r1, #439	; 0x1b7
 80009a0:	2006      	movs	r0, #6
 80009a2:	f7ff fc13 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 80009a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009aa:	f240 11b7 	movw	r1, #439	; 0x1b7
 80009ae:	2006      	movs	r0, #6
 80009b0:	f7ff fc0c 	bl	80001cc <ax_angle_move>
		TajmerDelay(250);
 80009b4:	20fa      	movs	r0, #250	; 0xfa
 80009b6:	f000 f9bd 	bl	8000d34 <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80009ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009be:	f240 213a 	movw	r1, #570	; 0x23a
 80009c2:	2006      	movs	r0, #6
 80009c4:	f7ff fc02 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80009c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009cc:	f240 213a 	movw	r1, #570	; 0x23a
 80009d0:	2006      	movs	r0, #6
 80009d2:	f7ff fbfb 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80009d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009da:	f240 213a 	movw	r1, #570	; 0x23a
 80009de:	2006      	movs	r0, #6
 80009e0:	f7ff fbf4 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80009e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009e8:	f240 213a 	movw	r1, #570	; 0x23a
 80009ec:	2006      	movs	r0, #6
 80009ee:	f7ff fbed 	bl	80001cc <ax_angle_move>
		TajmerDelay(1000);
 80009f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f6:	f000 f99d 	bl	8000d34 <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 80009fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009fe:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000a02:	2006      	movs	r0, #6
 8000a04:	f7ff fbe2 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 8000a08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a0c:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000a10:	2006      	movs	r0, #6
 8000a12:	f7ff fbdb 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 8000a16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a1a:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000a1e:	2006      	movs	r0, #6
 8000a20:	f7ff fbd4 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 8000a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a28:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000a2c:	2006      	movs	r0, #6
 8000a2e:	f7ff fbcd 	bl	80001cc <ax_angle_move>
		TajmerDelay(250);
 8000a32:	20fa      	movs	r0, #250	; 0xfa
 8000a34:	f000 f97e 	bl	8000d34 <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000a38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a3c:	f240 213a 	movw	r1, #570	; 0x23a
 8000a40:	2006      	movs	r0, #6
 8000a42:	f7ff fbc3 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000a46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a4a:	f240 213a 	movw	r1, #570	; 0x23a
 8000a4e:	2006      	movs	r0, #6
 8000a50:	f7ff fbbc 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000a54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a58:	f240 213a 	movw	r1, #570	; 0x23a
 8000a5c:	2006      	movs	r0, #6
 8000a5e:	f7ff fbb5 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000a62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a66:	f240 213a 	movw	r1, #570	; 0x23a
 8000a6a:	2006      	movs	r0, #6
 8000a6c:	f7ff fbae 	bl	80001cc <ax_angle_move>
		TajmerDelay(1200);
 8000a70:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000a74:	f000 f95e 	bl	8000d34 <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a7c:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000a80:	2006      	movs	r0, #6
 8000a82:	f7ff fba3 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000a86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a8a:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000a8e:	2006      	movs	r0, #6
 8000a90:	f7ff fb9c 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000a94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a98:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000a9c:	2006      	movs	r0, #6
 8000a9e:	f7ff fb95 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aa6:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000aaa:	2006      	movs	r0, #6
 8000aac:	f7ff fb8e 	bl	80001cc <ax_angle_move>
		TajmerDelay(250);
 8000ab0:	20fa      	movs	r0, #250	; 0xfa
 8000ab2:	f000 f93f 	bl	8000d34 <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000ab6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aba:	f240 213a 	movw	r1, #570	; 0x23a
 8000abe:	2006      	movs	r0, #6
 8000ac0:	f7ff fb84 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000ac4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ac8:	f240 213a 	movw	r1, #570	; 0x23a
 8000acc:	2006      	movs	r0, #6
 8000ace:	f7ff fb7d 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000ad2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ad6:	f240 213a 	movw	r1, #570	; 0x23a
 8000ada:	2006      	movs	r0, #6
 8000adc:	f7ff fb76 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ae4:	f240 213a 	movw	r1, #570	; 0x23a
 8000ae8:	2006      	movs	r0, #6
 8000aea:	f7ff fb6f 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 8000aee:	20c8      	movs	r0, #200	; 0xc8
 8000af0:	f000 f920 	bl	8000d34 <TajmerDelay>
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <io>:
static void
portA_init();

void
io ()
 {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	portC_init();
 8000b00:	f000 f806 	bl	8000b10 <portC_init>
	portB_init();
 8000b04:	f000 f814 	bl	8000b30 <portB_init>
	portA_init();
 8000b08:	f000 f842 	bl	8000b90 <portA_init>
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <portC_init>:

static void
portC_init()
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (0b1 << 2);
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <portC_init+0x1c>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <portC_init+0x1c>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000

08000b30 <portB_init>:

static void
portB_init()
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (0b1 << 1);
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <portB_init+0x58>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b38:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <portB_init+0x58>)
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB->MODER &= ~(0b11 << 2 * 3);
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <portB_init+0x5c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <portB_init+0x5c>)
 8000b46:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000b4a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << 2 * 3);
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <portB_init+0x5c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <portB_init+0x5c>)
 8000b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b56:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(0b1 << 3);
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <portB_init+0x5c>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <portB_init+0x5c>)
 8000b5e:	f023 0308 	bic.w	r3, r3, #8
 8000b62:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (0b11 << 2 * 3);
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <portB_init+0x5c>)
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <portB_init+0x5c>)
 8000b6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b6e:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~(0b11 << 2 * 3);
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <portB_init+0x5c>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <portB_init+0x5c>)
 8000b76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	48000400 	.word	0x48000400

08000b90 <portA_init>:

static void
portA_init()
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (0b1 << 0);
 8000b94:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <portA_init+0x88>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b98:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <portA_init+0x88>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOA->MODER &= ~(0b11 << 2 * CINC);
 8000ba0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2207      	movs	r2, #7
 8000ba8:	0052      	lsls	r2, r2, #1
 8000baa:	2103      	movs	r1, #3
 8000bac:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb0:	43d2      	mvns	r2, r2
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bb8:	400b      	ands	r3, r1
 8000bba:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * CINC); //low speed
 8000bbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	2207      	movs	r2, #7
 8000bc4:	0052      	lsls	r2, r2, #1
 8000bc6:	2103      	movs	r1, #3
 8000bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bcc:	43d2      	mvns	r2, r2
 8000bce:	4611      	mov	r1, r2
 8000bd0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bd4:	400b      	ands	r3, r1
 8000bd6:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 *CINC);
 8000bd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	2207      	movs	r2, #7
 8000be0:	0052      	lsls	r2, r2, #1
 8000be2:	2103      	movs	r1, #3
 8000be4:	fa01 f202 	lsl.w	r2, r1, r2
 8000be8:	43d2      	mvns	r2, r2
 8000bea:	4611      	mov	r1, r2
 8000bec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bf0:	400b      	ands	r3, r1
 8000bf2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2*CINC);
 8000bf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	0052      	lsls	r2, r2, #1
 8000bfe:	2102      	movs	r1, #2
 8000c00:	fa01 f202 	lsl.w	r2, r1, r2
 8000c04:	4611      	mov	r1, r2
 8000c06:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c0a:	430b      	orrs	r3, r1
 8000c0c:	60d3      	str	r3, [r2, #12]
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000

08000c1c <IO_cinc>:

}

bool
IO_cinc()
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
	if(!(GPIOA->IDR & (0b1 << CINC)))
 8000c20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	2207      	movs	r2, #7
 8000c28:	4611      	mov	r1, r2
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	408a      	lsls	r2, r1
 8000c2e:	4013      	ands	r3, r2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d107      	bne.n	8000c44 <IO_cinc+0x28>
		counter++;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <IO_cinc+0x48>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <IO_cinc+0x48>)
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	e002      	b.n	8000c4a <IO_cinc+0x2e>
	else
		counter=0;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <IO_cinc+0x48>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
	if(counter)
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <IO_cinc+0x48>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <IO_cinc+0x3c>
		return true;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e000      	b.n	8000c5a <IO_cinc+0x3e>
	return false;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	2000002d 	.word	0x2000002d

08000c68 <tajmer_init>:
volatile bool interrupted = false;


void
tajmer_init()
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
 tim2_init();
 8000c6c:	f000 f802 	bl	8000c74 <tim2_init>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <tim2_init>:

static void
tim2_init()
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= (0b1 << 0);
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <tim2_init+0xb8>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	4a2b      	ldr	r2, [pc, #172]	; (8000d2c <tim2_init+0xb8>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6593      	str	r3, [r2, #88]	; 0x58

	TIM2-> PSC = 80-1; //80MHz -> 1MHz
 8000c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c8a:	224f      	movs	r2, #79	; 0x4f
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28

	TIM2-> ARR = 1000-1; //1MHz -> 1kHz
 8000c8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 &= ~((0b1 << 1) || (0b1 << 2));
 8000c98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca2:	f023 0301 	bic.w	r3, r3, #1
 8000ca6:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= (0b1 << 0);
 8000ca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6153      	str	r3, [r2, #20]

	TIM2->DIER |= (0b1 << 0);
 8000cb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	60d3      	str	r3, [r2, #12]

	while (!(TIM2->SR & (0b1 << 0)));
 8000cc8:	bf00      	nop
 8000cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0f8      	beq.n	8000cca <tim2_init+0x56>

	TIM2->SR &= ~(0b1 << 0);
 8000cd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ce2:	f023 0301 	bic.w	r3, r3, #1
 8000ce6:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= (0b1 << 2);
 8000ce8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	6013      	str	r3, [r2, #0]

	uint8_t const TIM2_PREKID = 28;
 8000cf8:	231c      	movs	r3, #28
 8000cfa:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[0] |= (0b1 << TIM2_PREKID);
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <tim2_init+0xbc>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	79fa      	ldrb	r2, [r7, #7]
 8000d02:	2101      	movs	r1, #1
 8000d04:	fa01 f202 	lsl.w	r2, r1, r2
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <tim2_init+0xbc>)
 8000d0c:	430b      	orrs	r3, r1
 8000d0e:	6013      	str	r3, [r2, #0]

	TIM2->CR1 |= (0b1 << 0);
 8000d10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <TajmerDelay>:
    return false;
  flag_delay = true;
  return true;
}

void TajmerDelay(uint32_t ms) {
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	uint32_t PocVreme = sys_time_ms;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <TajmerDelay+0x30>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
	while (sys_time_ms <= PocVreme + ms) {
 8000d42:	e000      	b.n	8000d46 <TajmerDelay+0x12>
		__NOP();
 8000d44:	bf00      	nop
	while (sys_time_ms <= PocVreme + ms) {
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	441a      	add	r2, r3
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <TajmerDelay+0x30>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d2f7      	bcs.n	8000d44 <TajmerDelay+0x10>
	}

}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000030 	.word	0x20000030

08000d68 <TIM2_IRQHandler>:

void
TIM2_IRQHandler ()
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  // poziva se svake milisekunde
  // proveri da li je stvarno TIM2 pozvao rutinu
  if ((TIM2->SR & (0b1 << 0)) == (0b1 << 0))
 8000d6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d10c      	bne.n	8000d94 <TIM2_IRQHandler+0x2c>
    {
      TIM2->SR &= ~(0b1 << 0);	// da bi sledeci put mogli da detektujemo prekid
 8000d7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d84:	f023 0301 	bic.w	r3, r3, #1
 8000d88:	6113      	str	r3, [r2, #16]

      sys_time_ms++;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <TIM2_IRQHandler+0x5c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <TIM2_IRQHandler+0x5c>)
 8000d92:	6013      	str	r3, [r2, #0]
    }

  switch (sensors_case_timer) {
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <TIM2_IRQHandler+0x60>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d008      	beq.n	8000db0 <TIM2_IRQHandler+0x48>
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10a      	bne.n	8000db8 <TIM2_IRQHandler+0x50>
	case SENSOR_JJ:
		interrupted = sensor_JedanJedini();
 8000da2:	f7ff fac7 	bl	8000334 <sensor_JedanJedini>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <TIM2_IRQHandler+0x64>)
 8000dac:	701a      	strb	r2, [r3, #0]
		break;
 8000dae:	e007      	b.n	8000dc0 <TIM2_IRQHandler+0x58>
	case SENSORS_OFF:
		  interrupted = false;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <TIM2_IRQHandler+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
		  break;
 8000db6:	e003      	b.n	8000dc0 <TIM2_IRQHandler+0x58>
	default:
		  interrupted = false;
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <TIM2_IRQHandler+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
		break;
 8000dbe:	bf00      	nop
    }
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000030 	.word	0x20000030
 8000dc8:	20000034 	.word	0x20000034
 8000dcc:	20000035 	.word	0x20000035

08000dd0 <UART_init>:
static void
UART1_init();

void
UART_init()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	UART1_init();
 8000dd4:	f000 f802 	bl	8000ddc <UART1_init>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <UART1_init>:

static void
UART1_init()
{
 8000ddc:	b490      	push	{r4, r7}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
	//PB6 i PB7 AF7
	RCC->APB2ENR |= (0b1 << 14); //takt na USART1
 8000de2:	4b99      	ldr	r3, [pc, #612]	; (8001048 <UART1_init+0x26c>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	4a98      	ldr	r2, [pc, #608]	; (8001048 <UART1_init+0x26c>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dec:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->AHB2ENR |= (0b1 << 1); //takt za gpioB
 8000dee:	4b96      	ldr	r3, [pc, #600]	; (8001048 <UART1_init+0x26c>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a95      	ldr	r2, [pc, #596]	; (8001048 <UART1_init+0x26c>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c

	uint8_t const TX_PIN = 6;
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	71fb      	strb	r3, [r7, #7]
	uint8_t const RX_PIN = 7;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	71bb      	strb	r3, [r7, #6]

	GPIOB->MODER &= ~(0b11 << TX_PIN * 2);
 8000e02:	4b92      	ldr	r3, [pc, #584]	; (800104c <UART1_init+0x270>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	79fa      	ldrb	r2, [r7, #7]
 8000e08:	0052      	lsls	r2, r2, #1
 8000e0a:	2103      	movs	r1, #3
 8000e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e10:	43d2      	mvns	r2, r2
 8000e12:	4611      	mov	r1, r2
 8000e14:	4a8d      	ldr	r2, [pc, #564]	; (800104c <UART1_init+0x270>)
 8000e16:	400b      	ands	r3, r1
 8000e18:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0b11 << RX_PIN * 2);
 8000e1a:	4b8c      	ldr	r3, [pc, #560]	; (800104c <UART1_init+0x270>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	79ba      	ldrb	r2, [r7, #6]
 8000e20:	0052      	lsls	r2, r2, #1
 8000e22:	2103      	movs	r1, #3
 8000e24:	fa01 f202 	lsl.w	r2, r1, r2
 8000e28:	43d2      	mvns	r2, r2
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4a87      	ldr	r2, [pc, #540]	; (800104c <UART1_init+0x270>)
 8000e2e:	400b      	ands	r3, r1
 8000e30:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << TX_PIN * 2);
 8000e32:	4b86      	ldr	r3, [pc, #536]	; (800104c <UART1_init+0x270>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	79fa      	ldrb	r2, [r7, #7]
 8000e38:	0052      	lsls	r2, r2, #1
 8000e3a:	2102      	movs	r1, #2
 8000e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e40:	4611      	mov	r1, r2
 8000e42:	4a82      	ldr	r2, [pc, #520]	; (800104c <UART1_init+0x270>)
 8000e44:	430b      	orrs	r3, r1
 8000e46:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << RX_PIN * 2);
 8000e48:	4b80      	ldr	r3, [pc, #512]	; (800104c <UART1_init+0x270>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	79ba      	ldrb	r2, [r7, #6]
 8000e4e:	0052      	lsls	r2, r2, #1
 8000e50:	2102      	movs	r1, #2
 8000e52:	fa01 f202 	lsl.w	r2, r1, r2
 8000e56:	4611      	mov	r1, r2
 8000e58:	4a7c      	ldr	r2, [pc, #496]	; (800104c <UART1_init+0x270>)
 8000e5a:	430b      	orrs	r3, r1
 8000e5c:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER |= (0b1 << TX_PIN);
 8000e5e:	4b7b      	ldr	r3, [pc, #492]	; (800104c <UART1_init+0x270>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	79fa      	ldrb	r2, [r7, #7]
 8000e64:	2101      	movs	r1, #1
 8000e66:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4a77      	ldr	r2, [pc, #476]	; (800104c <UART1_init+0x270>)
 8000e6e:	430b      	orrs	r3, r1
 8000e70:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(0b11 << TX_PIN*2);
 8000e72:	4b76      	ldr	r3, [pc, #472]	; (800104c <UART1_init+0x270>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	0052      	lsls	r2, r2, #1
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e80:	43d2      	mvns	r2, r2
 8000e82:	4611      	mov	r1, r2
 8000e84:	4a71      	ldr	r2, [pc, #452]	; (800104c <UART1_init+0x270>)
 8000e86:	400b      	ands	r3, r1
 8000e88:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0b01 << TX_PIN*2);
 8000e8a:	4b70      	ldr	r3, [pc, #448]	; (800104c <UART1_init+0x270>)
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	79fa      	ldrb	r2, [r7, #7]
 8000e90:	0052      	lsls	r2, r2, #1
 8000e92:	2101      	movs	r1, #1
 8000e94:	fa01 f202 	lsl.w	r2, r1, r2
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4a6c      	ldr	r2, [pc, #432]	; (800104c <UART1_init+0x270>)
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	60d3      	str	r3, [r2, #12]

	uint8_t const Alt_function = 7;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	717b      	strb	r3, [r7, #5]

	GPIOB->AFR[TX_PIN / 8] &= ~(0b1111 << (TX_PIN % 8) * 4);
 8000ea4:	4a69      	ldr	r2, [pc, #420]	; (800104c <UART1_init+0x270>)
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	08db      	lsrs	r3, r3, #3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	3308      	adds	r3, #8
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	79fa      	ldrb	r2, [r7, #7]
 8000eb4:	f002 0207 	and.w	r2, r2, #7
 8000eb8:	0092      	lsls	r2, r2, #2
 8000eba:	210f      	movs	r1, #15
 8000ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec0:	43d2      	mvns	r2, r2
 8000ec2:	4614      	mov	r4, r2
 8000ec4:	4961      	ldr	r1, [pc, #388]	; (800104c <UART1_init+0x270>)
 8000ec6:	79fa      	ldrb	r2, [r7, #7]
 8000ec8:	08d2      	lsrs	r2, r2, #3
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	4610      	mov	r0, r2
 8000ece:	ea03 0204 	and.w	r2, r3, r4
 8000ed2:	f100 0308 	add.w	r3, r0, #8
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[TX_PIN / 8] |= (Alt_function << (TX_PIN % 8) * 4);
 8000eda:	4a5c      	ldr	r2, [pc, #368]	; (800104c <UART1_init+0x270>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	08db      	lsrs	r3, r3, #3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	3308      	adds	r3, #8
 8000ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee8:	7979      	ldrb	r1, [r7, #5]
 8000eea:	79fa      	ldrb	r2, [r7, #7]
 8000eec:	f002 0207 	and.w	r2, r2, #7
 8000ef0:	0092      	lsls	r2, r2, #2
 8000ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef6:	4614      	mov	r4, r2
 8000ef8:	4954      	ldr	r1, [pc, #336]	; (800104c <UART1_init+0x270>)
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	08d2      	lsrs	r2, r2, #3
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	4610      	mov	r0, r2
 8000f02:	ea43 0204 	orr.w	r2, r3, r4
 8000f06:	f100 0308 	add.w	r3, r0, #8
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] &= ~(0b1111 << (RX_PIN % 8) * 4);
 8000f0e:	4a4f      	ldr	r2, [pc, #316]	; (800104c <UART1_init+0x270>)
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	08db      	lsrs	r3, r3, #3
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	3308      	adds	r3, #8
 8000f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1c:	79ba      	ldrb	r2, [r7, #6]
 8000f1e:	f002 0207 	and.w	r2, r2, #7
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	210f      	movs	r1, #15
 8000f26:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2a:	43d2      	mvns	r2, r2
 8000f2c:	4614      	mov	r4, r2
 8000f2e:	4947      	ldr	r1, [pc, #284]	; (800104c <UART1_init+0x270>)
 8000f30:	79ba      	ldrb	r2, [r7, #6]
 8000f32:	08d2      	lsrs	r2, r2, #3
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	4610      	mov	r0, r2
 8000f38:	ea03 0204 	and.w	r2, r3, r4
 8000f3c:	f100 0308 	add.w	r3, r0, #8
 8000f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] |= (Alt_function << (RX_PIN % 8) * 4);
 8000f44:	4a41      	ldr	r2, [pc, #260]	; (800104c <UART1_init+0x270>)
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	08db      	lsrs	r3, r3, #3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	3308      	adds	r3, #8
 8000f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f52:	7979      	ldrb	r1, [r7, #5]
 8000f54:	79ba      	ldrb	r2, [r7, #6]
 8000f56:	f002 0207 	and.w	r2, r2, #7
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f60:	4614      	mov	r4, r2
 8000f62:	493a      	ldr	r1, [pc, #232]	; (800104c <UART1_init+0x270>)
 8000f64:	79ba      	ldrb	r2, [r7, #6]
 8000f66:	08d2      	lsrs	r2, r2, #3
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	ea43 0204 	orr.w	r2, r3, r4
 8000f70:	f100 0308 	add.w	r3, r0, #8
 8000f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

     USART1->CR1 &= ~(0b1 << 12);
 8000f78:	4b35      	ldr	r3, [pc, #212]	; (8001050 <UART1_init+0x274>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a34      	ldr	r2, [pc, #208]	; (8001050 <UART1_init+0x274>)
 8000f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f82:	6013      	str	r3, [r2, #0]
     USART1->CR1 &= ~(0b1 << 28); //8 bita
 8000f84:	4b32      	ldr	r3, [pc, #200]	; (8001050 <UART1_init+0x274>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a31      	ldr	r2, [pc, #196]	; (8001050 <UART1_init+0x274>)
 8000f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	6013      	str	r3, [r2, #0]
     USART1->CR2 &= ~(0b11 << 12); //1 stop bit
 8000f90:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <UART1_init+0x274>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	4a2e      	ldr	r2, [pc, #184]	; (8001050 <UART1_init+0x274>)
 8000f96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f9a:	6053      	str	r3, [r2, #4]

     USART1->BRR = 0; //baud 9600
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <UART1_init+0x274>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
     USART1->BRR |= ((546 << 4) | (14 << 0));
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <UART1_init+0x274>)
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	4a2a      	ldr	r2, [pc, #168]	; (8001050 <UART1_init+0x274>)
 8000fa8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8000fac:	f043 032e 	orr.w	r3, r3, #46	; 0x2e
 8000fb0:	60d3      	str	r3, [r2, #12]

     USART1->CR1 |= (0b11 << 2); //tx & rx pin enable
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <UART1_init+0x274>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a26      	ldr	r2, [pc, #152]	; (8001050 <UART1_init+0x274>)
 8000fb8:	f043 030c 	orr.w	r3, r3, #12
 8000fbc:	6013      	str	r3, [r2, #0]

     USART1->CR1 |= (0b1 << 5); //interrupt enable
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <UART1_init+0x274>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a23      	ldr	r2, [pc, #140]	; (8001050 <UART1_init+0x274>)
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	6013      	str	r3, [r2, #0]

     USART1->CR2 &= ~(0b1 << 11);
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <UART1_init+0x274>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4a20      	ldr	r2, [pc, #128]	; (8001050 <UART1_init+0x274>)
 8000fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fd4:	6053      	str	r3, [r2, #4]
     USART1->CR2 &= ~(0b1 << 14);
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <UART1_init+0x274>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <UART1_init+0x274>)
 8000fdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fe0:	6053      	str	r3, [r2, #4]
     USART1->CR3 &= ~(0b1 << 1);
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <UART1_init+0x274>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	4a1a      	ldr	r2, [pc, #104]	; (8001050 <UART1_init+0x274>)
 8000fe8:	f023 0302 	bic.w	r3, r3, #2
 8000fec:	6093      	str	r3, [r2, #8]
     USART1->CR3 &= ~(0b1 << 5);
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <UART1_init+0x274>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	4a17      	ldr	r2, [pc, #92]	; (8001050 <UART1_init+0x274>)
 8000ff4:	f023 0320 	bic.w	r3, r3, #32
 8000ff8:	6093      	str	r3, [r2, #8]
     USART1->CR3 |= (0b1 << 3);
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <UART1_init+0x274>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	4a14      	ldr	r2, [pc, #80]	; (8001050 <UART1_init+0x274>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6093      	str	r3, [r2, #8]

    uint8_t  USART1_INTERRUPT = 37;
 8001006:	2325      	movs	r3, #37	; 0x25
 8001008:	713b      	strb	r3, [r7, #4]
    NVIC->ISER[USART1_INTERRUPT / 32] |= (0b1 <<  USART1_INTERRUPT % 32);
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <UART1_init+0x278>)
 800100c:	793b      	ldrb	r3, [r7, #4]
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	b2d8      	uxtb	r0, r3
 8001012:	4603      	mov	r3, r0
 8001014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001018:	793a      	ldrb	r2, [r7, #4]
 800101a:	f002 021f 	and.w	r2, r2, #31
 800101e:	2101      	movs	r1, #1
 8001020:	fa01 f202 	lsl.w	r2, r1, r2
 8001024:	4614      	mov	r4, r2
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <UART1_init+0x278>)
 8001028:	4601      	mov	r1, r0
 800102a:	4323      	orrs	r3, r4
 800102c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

     USART1-> CR1 |= (0b1 << 0); //usart enable
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <UART1_init+0x274>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <UART1_init+0x274>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bc90      	pop	{r4, r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
 800104c:	48000400 	.word	0x48000400
 8001050:	40013800 	.word	0x40013800
 8001054:	e000e100 	.word	0xe000e100

08001058 <UART_send_byte>:

void
UART_send_byte (uint8_t data)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
   USART1->TDR = data; //ovako se salje, kada je  USART1->dr sa desne strane, onda se ponasa kao recieve registar
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <UART_send_byte+0x38>)
 8001064:	79fa      	ldrb	r2, [r7, #7]
 8001066:	b292      	uxth	r2, r2
 8001068:	851a      	strh	r2, [r3, #40]	; 0x28

  while (!( USART1->ISR & (0b1 << 6)))
 800106a:	bf00      	nop
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <UART_send_byte+0x38>)
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f9      	beq.n	800106c <UART_send_byte+0x14>
	  ;

   USART1->ISR &= ~(0b1 << 6);
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <UART_send_byte+0x38>)
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <UART_send_byte+0x38>)
 800107e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001082:	61d3      	str	r3, [r2, #28]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40013800 	.word	0x40013800

08001094 <UART_write>:

void
UART_write (uint8_t data)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if (buffer_size != MAX_BUFFER_SIZE)
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <UART_write+0xa0>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b20      	cmp	r3, #32
 80010a6:	d01c      	beq.n	80010e2 <UART_write+0x4e>
    {
      buffer[index_write] = data;
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <UART_write+0xa4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4619      	mov	r1, r3
 80010b0:	4a22      	ldr	r2, [pc, #136]	; (800113c <UART_write+0xa8>)
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <UART_write+0xa4>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	3301      	adds	r3, #1
 80010be:	425a      	negs	r2, r3
 80010c0:	f003 031f 	and.w	r3, r3, #31
 80010c4:	f002 021f 	and.w	r2, r2, #31
 80010c8:	bf58      	it	pl
 80010ca:	4253      	negpl	r3, r2
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <UART_write+0xa4>)
 80010d0:	701a      	strb	r2, [r3, #0]
      buffer_size++;
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <UART_write+0xa0>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	3301      	adds	r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <UART_write+0xa0>)
 80010de:	701a      	strb	r2, [r3, #0]
    {
      buffer[index_write] = data;
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
    }
}
 80010e0:	e022      	b.n	8001128 <UART_write+0x94>
      buffer[index_write] = data;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <UART_write+0xa4>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4619      	mov	r1, r3
 80010ea:	4a14      	ldr	r2, [pc, #80]	; (800113c <UART_write+0xa8>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <UART_write+0xa4>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	3301      	adds	r3, #1
 80010f8:	425a      	negs	r2, r3
 80010fa:	f003 031f 	and.w	r3, r3, #31
 80010fe:	f002 021f 	and.w	r2, r2, #31
 8001102:	bf58      	it	pl
 8001104:	4253      	negpl	r3, r2
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <UART_write+0xa4>)
 800110a:	701a      	strb	r2, [r3, #0]
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <UART_write+0xac>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	3301      	adds	r3, #1
 8001114:	425a      	negs	r2, r3
 8001116:	f003 031f 	and.w	r3, r3, #31
 800111a:	f002 021f 	and.w	r2, r2, #31
 800111e:	bf58      	it	pl
 8001120:	4253      	negpl	r3, r2
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <UART_write+0xac>)
 8001126:	701a      	strb	r2, [r3, #0]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	20000058 	.word	0x20000058
 8001138:	20000059 	.word	0x20000059
 800113c:	20000038 	.word	0x20000038
 8001140:	2000005a 	.word	0x2000005a

08001144 <USART1_IRQHandler>:
    return false;
}

void
USART1_IRQHandler ()
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  if ( USART1->ISR & (0b1 << 5))
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <USART1_IRQHandler+0x24>)
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	f003 0320 	and.w	r3, r3, #32
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <USART1_IRQHandler+0x1e>
    {
      UART_write(USART1->RDR);
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <USART1_IRQHandler+0x24>)
 8001156:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001158:	b29b      	uxth	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff99 	bl	8001094 <UART_write>
    }
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40013800 	.word	0x40013800

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001170:	f000 f8f1 	bl	8001356 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001174:	f000 f80f 	bl	8001196 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  io();
 8001178:	f7ff fcc0 	bl	8000afc <io>
  tajmer_init();
 800117c:	f7ff fd74 	bl	8000c68 <tajmer_init>
  UART_init();
 8001180:	f7ff fe26 	bl	8000dd0 <UART_init>
  sensor_Init();
 8001184:	f7ff f8b0 	bl	80002e8 <sensor_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001188:	b662      	cpsie	i
}
 800118a:	bf00      	nop

  while (1)
  {
    /* USER CODE END WHILE */

	  tactic_blue_2(ID_SIMA2_POGONSKI, ID_SIMA2_ZAKRETNI);
 800118c:	2106      	movs	r1, #6
 800118e:	2005      	movs	r0, #5
 8001190:	f7ff f8e8 	bl	8000364 <tactic_blue_2>
 8001194:	e7fa      	b.n	800118c <main+0x20>

08001196 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b096      	sub	sp, #88	; 0x58
 800119a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2244      	movs	r2, #68	; 0x44
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 f895 	bl	80022d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011aa:	463b      	mov	r3, r7
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011bc:	f000 fa34 	bl	8001628 <HAL_PWREx_ControlVoltageScaling>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011c6:	f000 f838 	bl	800123a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011ca:	2310      	movs	r3, #16
 80011cc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011ce:	2301      	movs	r3, #1
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011d6:	2360      	movs	r3, #96	; 0x60
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011da:	2302      	movs	r3, #2
 80011dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011de:	2301      	movs	r3, #1
 80011e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80011e6:	2328      	movs	r3, #40	; 0x28
 80011e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011ea:	2307      	movs	r3, #7
 80011ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011f2:	2302      	movs	r3, #2
 80011f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fa6a 	bl	80016d4 <HAL_RCC_OscConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001206:	f000 f818 	bl	800123a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120a:	230f      	movs	r3, #15
 800120c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120e:	2303      	movs	r3, #3
 8001210:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800121e:	463b      	mov	r3, r7
 8001220:	2104      	movs	r1, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fe6a 	bl	8001efc <HAL_RCC_ClockConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800122e:	f000 f804 	bl	800123a <Error_Handler>
  }
}
 8001232:	bf00      	nop
 8001234:	3758      	adds	r7, #88	; 0x58
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123e:	b672      	cpsid	i
}
 8001240:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001242:	e7fe      	b.n	8001242 <Error_Handler+0x8>

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_MspInit+0x44>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <HAL_MspInit+0x44>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6613      	str	r3, [r2, #96]	; 0x60
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_MspInit+0x44>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_MspInit+0x44>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_MspInit+0x44>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	6593      	str	r3, [r2, #88]	; 0x58
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_MspInit+0x44>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000

0800128c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <NMI_Handler+0x4>

08001292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <HardFault_Handler+0x4>

08001298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <MemManage_Handler+0x4>

0800129e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <BusFault_Handler+0x4>

080012a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <UsageFault_Handler+0x4>

080012aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d8:	f000 f892 	bl	8001400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <SystemInit+0x20>)
 80012e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <SystemInit+0x20>)
 80012ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800133c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001308:	f7ff ffea 	bl	80012e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <LoopForever+0x6>)
  ldr r1, =_edata
 800130e:	490d      	ldr	r1, [pc, #52]	; (8001344 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001310:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <LoopForever+0xe>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001314:	e002      	b.n	800131c <LoopCopyDataInit>

08001316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131a:	3304      	adds	r3, #4

0800131c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800131c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001320:	d3f9      	bcc.n	8001316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001324:	4c0a      	ldr	r4, [pc, #40]	; (8001350 <LoopForever+0x16>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001328:	e001      	b.n	800132e <LoopFillZerobss>

0800132a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800132c:	3204      	adds	r2, #4

0800132e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001330:	d3fb      	bcc.n	800132a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001332:	f000 ffd7 	bl	80022e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001336:	f7ff ff19 	bl	800116c <main>

0800133a <LoopForever>:

LoopForever:
    b LoopForever
 800133a:	e7fe      	b.n	800133a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800133c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001344:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001348:	0800238c 	.word	0x0800238c
  ldr r2, =_sbss
 800134c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001350:	20000060 	.word	0x20000060

08001354 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001354:	e7fe      	b.n	8001354 <ADC1_IRQHandler>

08001356 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 f91f 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001366:	200f      	movs	r0, #15
 8001368:	f000 f80e 	bl	8001388 <HAL_InitTick>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	71fb      	strb	r3, [r7, #7]
 8001376:	e001      	b.n	800137c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001378:	f7ff ff64 	bl	8001244 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800137c:	79fb      	ldrb	r3, [r7, #7]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_InitTick+0x6c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d023      	beq.n	80013e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <HAL_InitTick+0x70>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_InitTick+0x6c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f91d 	bl	80015f2 <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10f      	bne.n	80013de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d809      	bhi.n	80013d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f000 f8f5 	bl	80015ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_InitTick+0x74>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e007      	b.n	80013e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e004      	b.n	80013e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	e001      	b.n	80013e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000000c 	.word	0x2000000c
 80013f8:	20000004 	.word	0x20000004
 80013fc:	20000008 	.word	0x20000008

08001400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x20>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_IncTick+0x24>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_IncTick+0x24>)
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2000000c 	.word	0x2000000c
 8001424:	2000005c 	.word	0x2000005c

08001428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return uwTick;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <HAL_GetTick+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000005c 	.word	0x2000005c

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff47 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff5c 	bl	8001488 <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff8e 	bl	80014f8 <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5d 	bl	80014a4 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffb0 	bl	8001560 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <HAL_PWREx_GetVoltageRange+0x18>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40007000 	.word	0x40007000

08001628 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001636:	d130      	bne.n	800169a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001644:	d038      	beq.n	80016b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800164e:	4a1e      	ldr	r2, [pc, #120]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001650:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001654:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2232      	movs	r2, #50	; 0x32
 800165c:	fb02 f303 	mul.w	r3, r2, r3
 8001660:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0c9b      	lsrs	r3, r3, #18
 8001668:	3301      	adds	r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800166c:	e002      	b.n	8001674 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3b01      	subs	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001680:	d102      	bne.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f2      	bne.n	800166e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001694:	d110      	bne.n	80016b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e00f      	b.n	80016ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a6:	d007      	beq.n	80016b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016b0:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40007000 	.word	0x40007000
 80016cc:	20000004 	.word	0x20000004
 80016d0:	431bde83 	.word	0x431bde83

080016d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f000 bc02 	b.w	8001eec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e8:	4b96      	ldr	r3, [pc, #600]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f2:	4b94      	ldr	r3, [pc, #592]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80e4 	beq.w	80018d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d007      	beq.n	8001720 <HAL_RCC_OscConfig+0x4c>
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2b0c      	cmp	r3, #12
 8001714:	f040 808b 	bne.w	800182e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2b01      	cmp	r3, #1
 800171c:	f040 8087 	bne.w	800182e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001720:	4b88      	ldr	r3, [pc, #544]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_OscConfig+0x64>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e3d9      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1a      	ldr	r2, [r3, #32]
 800173c:	4b81      	ldr	r3, [pc, #516]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <HAL_RCC_OscConfig+0x7e>
 8001748:	4b7e      	ldr	r3, [pc, #504]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001750:	e005      	b.n	800175e <HAL_RCC_OscConfig+0x8a>
 8001752:	4b7c      	ldr	r3, [pc, #496]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 8001754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800175e:	4293      	cmp	r3, r2
 8001760:	d223      	bcs.n	80017aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fd54 	bl	8002214 <RCC_SetFlashLatencyFromMSIRange>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e3ba      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001776:	4b73      	ldr	r3, [pc, #460]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a72      	ldr	r2, [pc, #456]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b70      	ldr	r3, [pc, #448]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	496d      	ldr	r1, [pc, #436]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 8001790:	4313      	orrs	r3, r2
 8001792:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001794:	4b6b      	ldr	r3, [pc, #428]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	4968      	ldr	r1, [pc, #416]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
 80017a8:	e025      	b.n	80017f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017aa:	4b66      	ldr	r3, [pc, #408]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a65      	ldr	r2, [pc, #404]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 80017b0:	f043 0308 	orr.w	r3, r3, #8
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b63      	ldr	r3, [pc, #396]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4960      	ldr	r1, [pc, #384]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c8:	4b5e      	ldr	r3, [pc, #376]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	495b      	ldr	r1, [pc, #364]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fd14 	bl	8002214 <RCC_SetFlashLatencyFromMSIRange>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e37a      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017f6:	f000 fc81 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 80017fa:	4602      	mov	r2, r0
 80017fc:	4b51      	ldr	r3, [pc, #324]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	4950      	ldr	r1, [pc, #320]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 8001808:	5ccb      	ldrb	r3, [r1, r3]
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	fa22 f303 	lsr.w	r3, r2, r3
 8001812:	4a4e      	ldr	r2, [pc, #312]	; (800194c <HAL_RCC_OscConfig+0x278>)
 8001814:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001816:	4b4e      	ldr	r3, [pc, #312]	; (8001950 <HAL_RCC_OscConfig+0x27c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fdb4 	bl	8001388 <HAL_InitTick>
 8001820:	4603      	mov	r3, r0
 8001822:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d052      	beq.n	80018d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	e35e      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d032      	beq.n	800189c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001836:	4b43      	ldr	r3, [pc, #268]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a42      	ldr	r2, [pc, #264]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001842:	f7ff fdf1 	bl	8001428 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800184a:	f7ff fded 	bl	8001428 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e347      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800185c:	4b39      	ldr	r3, [pc, #228]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001868:	4b36      	ldr	r3, [pc, #216]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a35      	ldr	r2, [pc, #212]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 800186e:	f043 0308 	orr.w	r3, r3, #8
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b33      	ldr	r3, [pc, #204]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4930      	ldr	r1, [pc, #192]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001886:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	492b      	ldr	r1, [pc, #172]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
 800189a:	e01a      	b.n	80018d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800189c:	4b29      	ldr	r3, [pc, #164]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a28      	ldr	r2, [pc, #160]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fdbe 	bl	8001428 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b0:	f7ff fdba 	bl	8001428 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e314      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x1dc>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d073      	beq.n	80019c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_OscConfig+0x21c>
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d10e      	bne.n	8001908 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d10b      	bne.n	8001908 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d063      	beq.n	80019c4 <HAL_RCC_OscConfig+0x2f0>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d15f      	bne.n	80019c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e2f1      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001910:	d106      	bne.n	8001920 <HAL_RCC_OscConfig+0x24c>
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e025      	b.n	800196c <HAL_RCC_OscConfig+0x298>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001928:	d114      	bne.n	8001954 <HAL_RCC_OscConfig+0x280>
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a02      	ldr	r2, [pc, #8]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e013      	b.n	800196c <HAL_RCC_OscConfig+0x298>
 8001944:	40021000 	.word	0x40021000
 8001948:	08002344 	.word	0x08002344
 800194c:	20000004 	.word	0x20000004
 8001950:	20000008 	.word	0x20000008
 8001954:	4ba0      	ldr	r3, [pc, #640]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a9f      	ldr	r2, [pc, #636]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 800195a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b9d      	ldr	r3, [pc, #628]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a9c      	ldr	r2, [pc, #624]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d013      	beq.n	800199c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff fd58 	bl	8001428 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff fd54 	bl	8001428 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	; 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e2ae      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198e:	4b92      	ldr	r3, [pc, #584]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x2a8>
 800199a:	e014      	b.n	80019c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff fd44 	bl	8001428 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fd40 	bl	8001428 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e29a      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019b6:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x2d0>
 80019c2:	e000      	b.n	80019c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d060      	beq.n	8001a94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_OscConfig+0x310>
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	d119      	bne.n	8001a12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d116      	bne.n	8001a12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e4:	4b7c      	ldr	r3, [pc, #496]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_OscConfig+0x328>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e277      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b76      	ldr	r3, [pc, #472]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	061b      	lsls	r3, r3, #24
 8001a0a:	4973      	ldr	r1, [pc, #460]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a10:	e040      	b.n	8001a94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d023      	beq.n	8001a62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a1a:	4b6f      	ldr	r3, [pc, #444]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a6e      	ldr	r2, [pc, #440]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7ff fcff 	bl	8001428 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2e:	f7ff fcfb 	bl	8001428 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e255      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a40:	4b65      	ldr	r3, [pc, #404]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4c:	4b62      	ldr	r3, [pc, #392]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	061b      	lsls	r3, r3, #24
 8001a5a:	495f      	ldr	r1, [pc, #380]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
 8001a60:	e018      	b.n	8001a94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a62:	4b5d      	ldr	r3, [pc, #372]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a5c      	ldr	r2, [pc, #368]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fcdb 	bl	8001428 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a76:	f7ff fcd7 	bl	8001428 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e231      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a88:	4b53      	ldr	r3, [pc, #332]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f0      	bne.n	8001a76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d03c      	beq.n	8001b1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d01c      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa8:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aae:	4a4a      	ldr	r2, [pc, #296]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab8:	f7ff fcb6 	bl	8001428 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fcb2 	bl	8001428 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e20c      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad2:	4b41      	ldr	r3, [pc, #260]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0ef      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x3ec>
 8001ae0:	e01b      	b.n	8001b1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae8:	4a3b      	ldr	r2, [pc, #236]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af2:	f7ff fc99 	bl	8001428 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afa:	f7ff fc95 	bl	8001428 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e1ef      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b0c:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1ef      	bne.n	8001afa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 80a6 	beq.w	8001c74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10d      	bne.n	8001b54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b38:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3c:	4a26      	ldr	r2, [pc, #152]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b42:	6593      	str	r3, [r2, #88]	; 0x58
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b50:	2301      	movs	r3, #1
 8001b52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b54:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <HAL_RCC_OscConfig+0x508>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d118      	bne.n	8001b92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <HAL_RCC_OscConfig+0x508>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <HAL_RCC_OscConfig+0x508>)
 8001b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6c:	f7ff fc5c 	bl	8001428 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b74:	f7ff fc58 	bl	8001428 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e1b2      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_RCC_OscConfig+0x508>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d108      	bne.n	8001bac <HAL_RCC_OscConfig+0x4d8>
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001baa:	e029      	b.n	8001c00 <HAL_RCC_OscConfig+0x52c>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b05      	cmp	r3, #5
 8001bb2:	d115      	bne.n	8001be0 <HAL_RCC_OscConfig+0x50c>
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bca:	4a03      	ldr	r2, [pc, #12]	; (8001bd8 <HAL_RCC_OscConfig+0x504>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd4:	e014      	b.n	8001c00 <HAL_RCC_OscConfig+0x52c>
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	4b9a      	ldr	r3, [pc, #616]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be6:	4a99      	ldr	r2, [pc, #612]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf0:	4b96      	ldr	r3, [pc, #600]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	4a95      	ldr	r2, [pc, #596]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001bf8:	f023 0304 	bic.w	r3, r3, #4
 8001bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d016      	beq.n	8001c36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c08:	f7ff fc0e 	bl	8001428 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c10:	f7ff fc0a 	bl	8001428 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e162      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c26:	4b89      	ldr	r3, [pc, #548]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0ed      	beq.n	8001c10 <HAL_RCC_OscConfig+0x53c>
 8001c34:	e015      	b.n	8001c62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c36:	f7ff fbf7 	bl	8001428 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7ff fbf3 	bl	8001428 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e14b      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c54:	4b7d      	ldr	r3, [pc, #500]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1ed      	bne.n	8001c3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c62:	7ffb      	ldrb	r3, [r7, #31]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d105      	bne.n	8001c74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c68:	4b78      	ldr	r3, [pc, #480]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	4a77      	ldr	r2, [pc, #476]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d03c      	beq.n	8001cfa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01c      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c88:	4b70      	ldr	r3, [pc, #448]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c8e:	4a6f      	ldr	r2, [pc, #444]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7ff fbc6 	bl	8001428 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ca0:	f7ff fbc2 	bl	8001428 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e11c      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cb2:	4b66      	ldr	r3, [pc, #408]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0ef      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x5cc>
 8001cc0:	e01b      	b.n	8001cfa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cc2:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cc8:	4a60      	ldr	r2, [pc, #384]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd2:	f7ff fba9 	bl	8001428 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cda:	f7ff fba5 	bl	8001428 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e0ff      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cec:	4b57      	ldr	r3, [pc, #348]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ef      	bne.n	8001cda <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80f3 	beq.w	8001eea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	f040 80c9 	bne.w	8001ea0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d0e:	4b4f      	ldr	r3, [pc, #316]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f003 0203 	and.w	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d12c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d123      	bne.n	8001d7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d11b      	bne.n	8001d7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d113      	bne.n	8001d7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5e:	085b      	lsrs	r3, r3, #1
 8001d60:	3b01      	subs	r3, #1
 8001d62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d109      	bne.n	8001d7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	085b      	lsrs	r3, r3, #1
 8001d74:	3b01      	subs	r3, #1
 8001d76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d06b      	beq.n	8001e54 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d062      	beq.n	8001e48 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d82:	4b32      	ldr	r3, [pc, #200]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0ac      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d92:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a2d      	ldr	r2, [pc, #180]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001d98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d9e:	f7ff fb43 	bl	8001428 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da6:	f7ff fb3f 	bl	8001428 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e099      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_RCC_OscConfig+0x77c>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dd4:	3a01      	subs	r2, #1
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	4311      	orrs	r1, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dde:	0212      	lsls	r2, r2, #8
 8001de0:	4311      	orrs	r1, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001de6:	0852      	lsrs	r2, r2, #1
 8001de8:	3a01      	subs	r2, #1
 8001dea:	0552      	lsls	r2, r2, #21
 8001dec:	4311      	orrs	r1, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001df2:	0852      	lsrs	r2, r2, #1
 8001df4:	3a01      	subs	r2, #1
 8001df6:	0652      	lsls	r2, r2, #25
 8001df8:	4311      	orrs	r1, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dfe:	06d2      	lsls	r2, r2, #27
 8001e00:	430a      	orrs	r2, r1
 8001e02:	4912      	ldr	r1, [pc, #72]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e20:	f7ff fb02 	bl	8001428 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7ff fafe 	bl	8001428 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e058      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <HAL_RCC_OscConfig+0x778>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e46:	e050      	b.n	8001eea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e04f      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <HAL_RCC_OscConfig+0x820>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d144      	bne.n	8001eea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e60:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <HAL_RCC_OscConfig+0x820>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a23      	ldr	r2, [pc, #140]	; (8001ef4 <HAL_RCC_OscConfig+0x820>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e6c:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <HAL_RCC_OscConfig+0x820>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a20      	ldr	r2, [pc, #128]	; (8001ef4 <HAL_RCC_OscConfig+0x820>)
 8001e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e78:	f7ff fad6 	bl	8001428 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff fad2 	bl	8001428 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e02c      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e92:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <HAL_RCC_OscConfig+0x820>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x7ac>
 8001e9e:	e024      	b.n	8001eea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d01f      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea6:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_RCC_OscConfig+0x820>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <HAL_RCC_OscConfig+0x820>)
 8001eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fab9 	bl	8001428 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eba:	f7ff fab5 	bl	8001428 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e00f      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_RCC_OscConfig+0x820>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f0      	bne.n	8001eba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_RCC_OscConfig+0x820>)
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	4905      	ldr	r1, [pc, #20]	; (8001ef4 <HAL_RCC_OscConfig+0x820>)
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_RCC_OscConfig+0x824>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60cb      	str	r3, [r1, #12]
 8001ee4:	e001      	b.n	8001eea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	feeefffc 	.word	0xfeeefffc

08001efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0e7      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f10:	4b75      	ldr	r3, [pc, #468]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d910      	bls.n	8001f40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b72      	ldr	r3, [pc, #456]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 0207 	bic.w	r2, r3, #7
 8001f26:	4970      	ldr	r1, [pc, #448]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b6e      	ldr	r3, [pc, #440]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0cf      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d010      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	4b66      	ldr	r3, [pc, #408]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d908      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5c:	4b63      	ldr	r3, [pc, #396]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4960      	ldr	r1, [pc, #384]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d04c      	beq.n	8002014 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f82:	4b5a      	ldr	r3, [pc, #360]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d121      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0a6      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f9a:	4b54      	ldr	r3, [pc, #336]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d115      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e09a      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fb2:	4b4e      	ldr	r3, [pc, #312]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d109      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e08e      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc2:	4b4a      	ldr	r3, [pc, #296]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e086      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fd2:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f023 0203 	bic.w	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	4943      	ldr	r1, [pc, #268]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe4:	f7ff fa20 	bl	8001428 <HAL_GetTick>
 8001fe8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fec:	f7ff fa1c 	bl	8001428 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e06e      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	4b3a      	ldr	r3, [pc, #232]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 020c 	and.w	r2, r3, #12
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	429a      	cmp	r2, r3
 8002012:	d1eb      	bne.n	8001fec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d010      	beq.n	8002042 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	4b31      	ldr	r3, [pc, #196]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800202c:	429a      	cmp	r2, r3
 800202e:	d208      	bcs.n	8002042 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002030:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	492b      	ldr	r1, [pc, #172]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 800203e:	4313      	orrs	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002042:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d210      	bcs.n	8002072 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002050:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f023 0207 	bic.w	r2, r3, #7
 8002058:	4923      	ldr	r1, [pc, #140]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002060:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d001      	beq.n	8002072 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e036      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b00      	cmp	r3, #0
 800207c:	d008      	beq.n	8002090 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207e:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	4918      	ldr	r1, [pc, #96]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	4313      	orrs	r3, r2
 800208e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d009      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4910      	ldr	r1, [pc, #64]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020b0:	f000 f824 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	490b      	ldr	r1, [pc, #44]	; (80020f0 <HAL_RCC_ClockConfig+0x1f4>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
 80020cc:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 80020ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_ClockConfig+0x1fc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff f957 	bl	8001388 <HAL_InitTick>
 80020da:	4603      	mov	r3, r0
 80020dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80020de:	7afb      	ldrb	r3, [r7, #11]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40022000 	.word	0x40022000
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08002344 	.word	0x08002344
 80020f4:	20000004 	.word	0x20000004
 80020f8:	20000008 	.word	0x20000008

080020fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210a:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002114:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x34>
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d121      	bne.n	800216e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d11e      	bne.n	800216e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002130:	4b34      	ldr	r3, [pc, #208]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d107      	bne.n	800214c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800213c:	4b31      	ldr	r3, [pc, #196]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 800213e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	e005      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800214c:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002158:	4a2b      	ldr	r2, [pc, #172]	; (8002208 <HAL_RCC_GetSysClockFreq+0x10c>)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002160:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10d      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b04      	cmp	r3, #4
 8002172:	d102      	bne.n	800217a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002174:	4b25      	ldr	r3, [pc, #148]	; (800220c <HAL_RCC_GetSysClockFreq+0x110>)
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	e004      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	2b08      	cmp	r3, #8
 800217e:	d101      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002180:	4b23      	ldr	r3, [pc, #140]	; (8002210 <HAL_RCC_GetSysClockFreq+0x114>)
 8002182:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d134      	bne.n	80021f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d003      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d003      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0xac>
 80021a0:	e005      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021a2:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_RCC_GetSysClockFreq+0x110>)
 80021a4:	617b      	str	r3, [r7, #20]
      break;
 80021a6:	e005      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_RCC_GetSysClockFreq+0x114>)
 80021aa:	617b      	str	r3, [r7, #20]
      break;
 80021ac:	e002      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	617b      	str	r3, [r7, #20]
      break;
 80021b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	3301      	adds	r3, #1
 80021c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	fb03 f202 	mul.w	r2, r3, r2
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	0e5b      	lsrs	r3, r3, #25
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	3301      	adds	r3, #1
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021f4:	69bb      	ldr	r3, [r7, #24]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	; 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	08002354 	.word	0x08002354
 800220c:	00f42400 	.word	0x00f42400
 8002210:	007a1200 	.word	0x007a1200

08002214 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002220:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800222c:	f7ff f9ee 	bl	800160c <HAL_PWREx_GetVoltageRange>
 8002230:	6178      	str	r0, [r7, #20]
 8002232:	e014      	b.n	800225e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	4a24      	ldr	r2, [pc, #144]	; (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223e:	6593      	str	r3, [r2, #88]	; 0x58
 8002240:	4b22      	ldr	r3, [pc, #136]	; (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800224c:	f7ff f9de 	bl	800160c <HAL_PWREx_GetVoltageRange>
 8002250:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002264:	d10b      	bne.n	800227e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b80      	cmp	r3, #128	; 0x80
 800226a:	d919      	bls.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2ba0      	cmp	r3, #160	; 0xa0
 8002270:	d902      	bls.n	8002278 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002272:	2302      	movs	r3, #2
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	e013      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002278:	2301      	movs	r3, #1
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	e010      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b80      	cmp	r3, #128	; 0x80
 8002282:	d902      	bls.n	800228a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002284:	2303      	movs	r3, #3
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	e00a      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b80      	cmp	r3, #128	; 0x80
 800228e:	d102      	bne.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002290:	2302      	movs	r3, #2
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	e004      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b70      	cmp	r3, #112	; 0x70
 800229a:	d101      	bne.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800229c:	2301      	movs	r3, #1
 800229e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 0207 	bic.w	r2, r3, #7
 80022a8:	4909      	ldr	r1, [pc, #36]	; (80022d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d001      	beq.n	80022c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40022000 	.word	0x40022000

080022d4 <memset>:
 80022d4:	4402      	add	r2, r0
 80022d6:	4603      	mov	r3, r0
 80022d8:	4293      	cmp	r3, r2
 80022da:	d100      	bne.n	80022de <memset+0xa>
 80022dc:	4770      	bx	lr
 80022de:	f803 1b01 	strb.w	r1, [r3], #1
 80022e2:	e7f9      	b.n	80022d8 <memset+0x4>

080022e4 <__libc_init_array>:
 80022e4:	b570      	push	{r4, r5, r6, lr}
 80022e6:	4d0d      	ldr	r5, [pc, #52]	; (800231c <__libc_init_array+0x38>)
 80022e8:	4c0d      	ldr	r4, [pc, #52]	; (8002320 <__libc_init_array+0x3c>)
 80022ea:	1b64      	subs	r4, r4, r5
 80022ec:	10a4      	asrs	r4, r4, #2
 80022ee:	2600      	movs	r6, #0
 80022f0:	42a6      	cmp	r6, r4
 80022f2:	d109      	bne.n	8002308 <__libc_init_array+0x24>
 80022f4:	4d0b      	ldr	r5, [pc, #44]	; (8002324 <__libc_init_array+0x40>)
 80022f6:	4c0c      	ldr	r4, [pc, #48]	; (8002328 <__libc_init_array+0x44>)
 80022f8:	f000 f818 	bl	800232c <_init>
 80022fc:	1b64      	subs	r4, r4, r5
 80022fe:	10a4      	asrs	r4, r4, #2
 8002300:	2600      	movs	r6, #0
 8002302:	42a6      	cmp	r6, r4
 8002304:	d105      	bne.n	8002312 <__libc_init_array+0x2e>
 8002306:	bd70      	pop	{r4, r5, r6, pc}
 8002308:	f855 3b04 	ldr.w	r3, [r5], #4
 800230c:	4798      	blx	r3
 800230e:	3601      	adds	r6, #1
 8002310:	e7ee      	b.n	80022f0 <__libc_init_array+0xc>
 8002312:	f855 3b04 	ldr.w	r3, [r5], #4
 8002316:	4798      	blx	r3
 8002318:	3601      	adds	r6, #1
 800231a:	e7f2      	b.n	8002302 <__libc_init_array+0x1e>
 800231c:	08002384 	.word	0x08002384
 8002320:	08002384 	.word	0x08002384
 8002324:	08002384 	.word	0x08002384
 8002328:	08002388 	.word	0x08002388

0800232c <_init>:
 800232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232e:	bf00      	nop
 8002330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002332:	bc08      	pop	{r3}
 8002334:	469e      	mov	lr, r3
 8002336:	4770      	bx	lr

08002338 <_fini>:
 8002338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233a:	bf00      	nop
 800233c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233e:	bc08      	pop	{r3}
 8002340:	469e      	mov	lr, r3
 8002342:	4770      	bx	lr
