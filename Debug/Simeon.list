
Simeon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d78  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f04  08002f04  00003f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f44  08002f44  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002f44  08002f44  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f44  08002f44  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f44  08002f44  00003f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f48  08002f48  00003f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002f4c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000010  08002f5c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08002f5c  00004060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005555  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001613  00000000  00000000  00009595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0000aba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004e1  00000000  00000000  0000b260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec6e  00000000  00000000  0000b741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000095af  00000000  00000000  0002a3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6179  00000000  00000000  0003395e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9ad7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017a0  00000000  00000000  000e9b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000eb2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002eec 	.word	0x08002eec

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08002eec 	.word	0x08002eec

080001cc <ax_angle_move>:
update_crc (unsigned short crc_accum, unsigned char *data_blk_ptr,
	    unsigned short data_blk_size);

void
ax_angle_move (uint8_t id, uint16_t angle, uint16_t speed)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	460b      	mov	r3, r1
 80001d8:	80bb      	strh	r3, [r7, #4]
 80001da:	4613      	mov	r3, r2
 80001dc:	807b      	strh	r3, [r7, #2]
	uint8_t angle_low, angle_high, speed_low, speed_high;
	  angle_low = angle & 0xff;
 80001de:	88bb      	ldrh	r3, [r7, #4]
 80001e0:	77bb      	strb	r3, [r7, #30]
	  angle_high = angle >> 8;
 80001e2:	88bb      	ldrh	r3, [r7, #4]
 80001e4:	0a1b      	lsrs	r3, r3, #8
 80001e6:	b29b      	uxth	r3, r3
 80001e8:	777b      	strb	r3, [r7, #29]
	  speed_low = speed & 0xff;
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	773b      	strb	r3, [r7, #28]
	  speed_high = speed >> 8;
 80001ee:	887b      	ldrh	r3, [r7, #2]
 80001f0:	0a1b      	lsrs	r3, r3, #8
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	76fb      	strb	r3, [r7, #27]

	  uint16_t checksum_local = id + 7 + 3 + 0x1e + angle_low + angle_high
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	b29a      	uxth	r2, r3
 80001fa:	7fbb      	ldrb	r3, [r7, #30]
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	4413      	add	r3, r2
 8000200:	b29a      	uxth	r2, r3
 8000202:	7f7b      	ldrb	r3, [r7, #29]
 8000204:	b29b      	uxth	r3, r3
 8000206:	4413      	add	r3, r2
 8000208:	b29a      	uxth	r2, r3
	      + speed_low + speed_high;
 800020a:	7f3b      	ldrb	r3, [r7, #28]
 800020c:	b29b      	uxth	r3, r3
 800020e:	4413      	add	r3, r2
 8000210:	b29a      	uxth	r2, r3
 8000212:	7efb      	ldrb	r3, [r7, #27]
 8000214:	b29b      	uxth	r3, r3
 8000216:	4413      	add	r3, r2
 8000218:	b29b      	uxth	r3, r3
	  uint16_t checksum_local = id + 7 + 3 + 0x1e + angle_low + angle_high
 800021a:	3328      	adds	r3, #40	@ 0x28
 800021c:	833b      	strh	r3, [r7, #24]
	  uint8_t checksum = (uint8_t) (~checksum_local);
 800021e:	8b3b      	ldrh	r3, [r7, #24]
 8000220:	b2db      	uxtb	r3, r3
 8000222:	43db      	mvns	r3, r3
 8000224:	75fb      	strb	r3, [r7, #23]
	  uint8_t ax_move[] =
 8000226:	23ff      	movs	r3, #255	@ 0xff
 8000228:	733b      	strb	r3, [r7, #12]
 800022a:	23ff      	movs	r3, #255	@ 0xff
 800022c:	737b      	strb	r3, [r7, #13]
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	73bb      	strb	r3, [r7, #14]
 8000232:	2307      	movs	r3, #7
 8000234:	73fb      	strb	r3, [r7, #15]
 8000236:	2303      	movs	r3, #3
 8000238:	743b      	strb	r3, [r7, #16]
 800023a:	231e      	movs	r3, #30
 800023c:	747b      	strb	r3, [r7, #17]
 800023e:	7fbb      	ldrb	r3, [r7, #30]
 8000240:	74bb      	strb	r3, [r7, #18]
 8000242:	7f7b      	ldrb	r3, [r7, #29]
 8000244:	74fb      	strb	r3, [r7, #19]
 8000246:	7f3b      	ldrb	r3, [r7, #28]
 8000248:	753b      	strb	r3, [r7, #20]
 800024a:	7efb      	ldrb	r3, [r7, #27]
 800024c:	757b      	strb	r3, [r7, #21]
 800024e:	7dfb      	ldrb	r3, [r7, #23]
 8000250:	75bb      	strb	r3, [r7, #22]
	    { 0xff, 0xff, id, 0x07, 0x03, 0x1E, angle_low, angle_high, speed_low,
		speed_high, checksum };

  for (uint8_t i = 0; i < 11; i++)
 8000252:	2300      	movs	r3, #0
 8000254:	77fb      	strb	r3, [r7, #31]
 8000256:	e00a      	b.n	800026e <ax_angle_move+0xa2>
    {
      UART_send_byte(ax_move[i]);
 8000258:	7ffb      	ldrb	r3, [r7, #31]
 800025a:	3320      	adds	r3, #32
 800025c:	443b      	add	r3, r7
 800025e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fcd2 	bl	8001c0c <UART_send_byte>
  for (uint8_t i = 0; i < 11; i++)
 8000268:	7ffb      	ldrb	r3, [r7, #31]
 800026a:	3301      	adds	r3, #1
 800026c:	77fb      	strb	r3, [r7, #31]
 800026e:	7ffb      	ldrb	r3, [r7, #31]
 8000270:	2b0a      	cmp	r3, #10
 8000272:	d9f1      	bls.n	8000258 <ax_angle_move+0x8c>
    }
}
 8000274:	bf00      	nop
 8000276:	bf00      	nop
 8000278:	3720      	adds	r7, #32
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <ax_wheel_mode>:

void
ax_wheel_mode(uint8_t id)
{
 800027e:	b580      	push	{r7, lr}
 8000280:	b086      	sub	sp, #24
 8000282:	af00      	add	r7, sp, #0
 8000284:	4603      	mov	r3, r0
 8000286:	71fb      	strb	r3, [r7, #7]
	// 0-1023 CCW
	// 1024-2047 CW

	uint16_t checksum_local = id + 5 + 3 + 8;
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	b29b      	uxth	r3, r3
 800028c:	3310      	adds	r3, #16
 800028e:	82bb      	strh	r3, [r7, #20]
	uint8_t checksum = (uint8_t) (~checksum_local);
 8000290:	8abb      	ldrh	r3, [r7, #20]
 8000292:	b2db      	uxtb	r3, r3
 8000294:	43db      	mvns	r3, r3
 8000296:	74fb      	strb	r3, [r7, #19]
	uint8_t ax_move[] =
 8000298:	23ff      	movs	r3, #255	@ 0xff
 800029a:	723b      	strb	r3, [r7, #8]
 800029c:	23ff      	movs	r3, #255	@ 0xff
 800029e:	727b      	strb	r3, [r7, #9]
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	72bb      	strb	r3, [r7, #10]
 80002a4:	2305      	movs	r3, #5
 80002a6:	72fb      	strb	r3, [r7, #11]
 80002a8:	2303      	movs	r3, #3
 80002aa:	733b      	strb	r3, [r7, #12]
 80002ac:	2308      	movs	r3, #8
 80002ae:	737b      	strb	r3, [r7, #13]
 80002b0:	2300      	movs	r3, #0
 80002b2:	73bb      	strb	r3, [r7, #14]
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]
 80002b8:	7cfb      	ldrb	r3, [r7, #19]
 80002ba:	743b      	strb	r3, [r7, #16]
			{ 0xff, 0xff, id, 0x05, 0x03, 0x08, 0x00, 0x00, checksum };

	for (uint8_t i = 0; i < 9; i++)
 80002bc:	2300      	movs	r3, #0
 80002be:	75fb      	strb	r3, [r7, #23]
 80002c0:	e00a      	b.n	80002d8 <ax_wheel_mode+0x5a>
			    {
			      UART_send_byte(ax_move[i]);
 80002c2:	7dfb      	ldrb	r3, [r7, #23]
 80002c4:	3318      	adds	r3, #24
 80002c6:	443b      	add	r3, r7
 80002c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f001 fc9d 	bl	8001c0c <UART_send_byte>
	for (uint8_t i = 0; i < 9; i++)
 80002d2:	7dfb      	ldrb	r3, [r7, #23]
 80002d4:	3301      	adds	r3, #1
 80002d6:	75fb      	strb	r3, [r7, #23]
 80002d8:	7dfb      	ldrb	r3, [r7, #23]
 80002da:	2b08      	cmp	r3, #8
 80002dc:	d9f1      	bls.n	80002c2 <ax_wheel_mode+0x44>
			    }
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	3718      	adds	r7, #24
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <sensor_Init>:
//portC
uint8_t infra_1 = 1;

void
sensor_Init()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
sensor_IO_init();
 80002ec:	f000 f802 	bl	80002f4 <sensor_IO_init>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <sensor_IO_init>:

void
sensor_IO_init()
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (0b1 << 1); //takt za gpioB
 80002f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000328 <sensor_IO_init+0x34>)
 80002fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000328 <sensor_IO_init+0x34>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	64d3      	str	r3, [r2, #76]	@ 0x4c

	GPIOB-> MODER &= ~(0b11 << 2* infra_1);  //PB1
 8000304:	4b09      	ldr	r3, [pc, #36]	@ (800032c <sensor_IO_init+0x38>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a09      	ldr	r2, [pc, #36]	@ (8000330 <sensor_IO_init+0x3c>)
 800030a:	7812      	ldrb	r2, [r2, #0]
 800030c:	0052      	lsls	r2, r2, #1
 800030e:	2103      	movs	r1, #3
 8000310:	fa01 f202 	lsl.w	r2, r1, r2
 8000314:	43d2      	mvns	r2, r2
 8000316:	4611      	mov	r1, r2
 8000318:	4a04      	ldr	r2, [pc, #16]	@ (800032c <sensor_IO_init+0x38>)
 800031a:	400b      	ands	r3, r1
 800031c:	6013      	str	r3, [r2, #0]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40021000 	.word	0x40021000
 800032c:	48000400 	.word	0x48000400
 8000330:	20000000 	.word	0x20000000

08000334 <sensor_JedanJedini>:

bool
sensor_JedanJedini()
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
	if(GPIOB->IDR & (0b1<<infra_1))
 8000338:	4b08      	ldr	r3, [pc, #32]	@ (800035c <sensor_JedanJedini+0x28>)
 800033a:	691b      	ldr	r3, [r3, #16]
 800033c:	4a08      	ldr	r2, [pc, #32]	@ (8000360 <sensor_JedanJedini+0x2c>)
 800033e:	7812      	ldrb	r2, [r2, #0]
 8000340:	4611      	mov	r1, r2
 8000342:	2201      	movs	r2, #1
 8000344:	408a      	lsls	r2, r1
 8000346:	4013      	ands	r3, r2
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <sensor_JedanJedini+0x1c>
		return true;
 800034c:	2301      	movs	r3, #1
 800034e:	e000      	b.n	8000352 <sensor_JedanJedini+0x1e>
	return false;
 8000350:	2300      	movs	r3, #0
}
 8000352:	4618      	mov	r0, r3
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	48000400 	.word	0x48000400
 8000360:	20000000 	.word	0x20000000

08000364 <tactic_yellow_3>:
	default:
		break;
	}
}

void tactic_yellow_3(uint8_t AX_Pogonski, uint8_t AX_Zakretni) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	460a      	mov	r2, r1
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	4613      	mov	r3, r2
 8000372:	71bb      	strb	r3, [r7, #6]
	switch (tactic_state) {
 8000374:	4bbe      	ldr	r3, [pc, #760]	@ (8000670 <tactic_yellow_3+0x30c>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b0e      	cmp	r3, #14
 800037c:	f200 82d7 	bhi.w	800092e <tactic_yellow_3+0x5ca>
 8000380:	a201      	add	r2, pc, #4	@ (adr r2, 8000388 <tactic_yellow_3+0x24>)
 8000382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000386:	bf00      	nop
 8000388:	080003c5 	.word	0x080003c5
 800038c:	080003e5 	.word	0x080003e5
 8000390:	0800044d 	.word	0x0800044d
 8000394:	0800049d 	.word	0x0800049d
 8000398:	080004ed 	.word	0x080004ed
 800039c:	0800053d 	.word	0x0800053d
 80003a0:	08000645 	.word	0x08000645
 80003a4:	080006ad 	.word	0x080006ad
 80003a8:	08000709 	.word	0x08000709
 80003ac:	08000765 	.word	0x08000765
 80003b0:	080007c1 	.word	0x080007c1
 80003b4:	08000819 	.word	0x08000819
 80003b8:	08000871 	.word	0x08000871
 80003bc:	080008c9 	.word	0x080008c9
 80003c0:	08000921 	.word	0x08000921
	case 0:
		if (IO_cinc()) {
 80003c4:	f001 f9d4 	bl	8001770 <IO_cinc>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f000 82b1 	beq.w	8000932 <tactic_yellow_3+0x5ce>
			timer_start_sys_time();
 80003d0:	f001 fa6a 	bl	80018a8 <timer_start_sys_time>
			tactic_state++;
 80003d4:	4ba6      	ldr	r3, [pc, #664]	@ (8000670 <tactic_yellow_3+0x30c>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	3301      	adds	r3, #1
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	4ba4      	ldr	r3, [pc, #656]	@ (8000670 <tactic_yellow_3+0x30c>)
 80003e0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80003e2:	e2a6      	b.n	8000932 <tactic_yellow_3+0x5ce>

	case 1:
		TajmerDelay(200); //90000
 80003e4:	20c8      	movs	r0, #200	@ 0xc8
 80003e6:	f001 fa6f 	bl	80018c8 <TajmerDelay>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80003ea:	79bb      	ldrb	r3, [r7, #6]
 80003ec:	22c8      	movs	r2, #200	@ 0xc8
 80003ee:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff feea 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80003f8:	79bb      	ldrb	r3, [r7, #6]
 80003fa:	22c8      	movs	r2, #200	@ 0xc8
 80003fc:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000400:	4618      	mov	r0, r3
 8000402:	f7ff fee3 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 8000406:	20c8      	movs	r0, #200	@ 0xc8
 8000408:	f001 fa5e 	bl	80018c8 <TajmerDelay>
		ax_wheel_mode(AX_Pogonski);
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ff35 	bl	800027e <ax_wheel_mode>
		TajmerDelay(200);
 8000414:	20c8      	movs	r0, #200	@ 0xc8
 8000416:	f001 fa57 	bl	80018c8 <TajmerDelay>
		ax_angle_move(AX_Pogonski, 0, 512);
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff fed2 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 8000428:	20c8      	movs	r0, #200	@ 0xc8
 800042a:	f001 fa4d 	bl	80018c8 <TajmerDelay>
		ax_angle_move(AX_Pogonski, 0, 767);
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff fec8 	bl	80001cc <ax_angle_move>

		tactic_state++;
 800043c:	4b8c      	ldr	r3, [pc, #560]	@ (8000670 <tactic_yellow_3+0x30c>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	3301      	adds	r3, #1
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4b8a      	ldr	r3, [pc, #552]	@ (8000670 <tactic_yellow_3+0x30c>)
 8000448:	701a      	strb	r2, [r3, #0]
		break;
 800044a:	e273      	b.n	8000934 <tactic_yellow_3+0x5d0>

	case 2:
		sensors_case_timer = SENSOR_JJ;
 800044c:	4b89      	ldr	r3, [pc, #548]	@ (8000674 <tactic_yellow_3+0x310>)
 800044e:	2201      	movs	r2, #1
 8000450:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000452:	4b89      	ldr	r3, [pc, #548]	@ (8000678 <tactic_yellow_3+0x314>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	2b00      	cmp	r3, #0
 800045a:	d007      	beq.n	800046c <tactic_yellow_3+0x108>

			interrupted_func_stop(AX_Pogonski);
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	4618      	mov	r0, r3
 8000460:	f000 fd6c 	bl	8000f3c <interrupted_func_stop>
			tactic_state = 2;
 8000464:	4b82      	ldr	r3, [pc, #520]	@ (8000670 <tactic_yellow_3+0x30c>)
 8000466:	2202      	movs	r2, #2
 8000468:	701a      	strb	r2, [r3, #0]
 800046a:	e017      	b.n	800049c <tactic_yellow_3+0x138>
		} else {
			ax_wheel_mode(AX_Pogonski);
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff05 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000474:	2064      	movs	r0, #100	@ 0x64
 8000476:	f001 fa27 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff fea2 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000488:	2096      	movs	r0, #150	@ 0x96
 800048a:	f001 fa1d 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 800048e:	4b78      	ldr	r3, [pc, #480]	@ (8000670 <tactic_yellow_3+0x30c>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	b2db      	uxtb	r3, r3
 8000494:	3301      	adds	r3, #1
 8000496:	b2da      	uxtb	r2, r3
 8000498:	4b75      	ldr	r3, [pc, #468]	@ (8000670 <tactic_yellow_3+0x30c>)
 800049a:	701a      	strb	r2, [r3, #0]
		}
	case 3:
		sensors_case_timer = SENSOR_JJ;
 800049c:	4b75      	ldr	r3, [pc, #468]	@ (8000674 <tactic_yellow_3+0x310>)
 800049e:	2201      	movs	r2, #1
 80004a0:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 80004a2:	4b75      	ldr	r3, [pc, #468]	@ (8000678 <tactic_yellow_3+0x314>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d007      	beq.n	80004bc <tactic_yellow_3+0x158>

			interrupted_func_stop(AX_Pogonski);
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 fd44 	bl	8000f3c <interrupted_func_stop>
			tactic_state = 3;
 80004b4:	4b6e      	ldr	r3, [pc, #440]	@ (8000670 <tactic_yellow_3+0x30c>)
 80004b6:	2203      	movs	r2, #3
 80004b8:	701a      	strb	r2, [r3, #0]
 80004ba:	e017      	b.n	80004ec <tactic_yellow_3+0x188>
		} else {
			ax_wheel_mode(AX_Pogonski);
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff fedd 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80004c4:	2064      	movs	r0, #100	@ 0x64
 80004c6:	f001 f9ff 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff fe7a 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 80004d8:	2096      	movs	r0, #150	@ 0x96
 80004da:	f001 f9f5 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 80004de:	4b64      	ldr	r3, [pc, #400]	@ (8000670 <tactic_yellow_3+0x30c>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	3301      	adds	r3, #1
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	4b61      	ldr	r3, [pc, #388]	@ (8000670 <tactic_yellow_3+0x30c>)
 80004ea:	701a      	strb	r2, [r3, #0]
		}
	case 4:
		sensors_case_timer = SENSOR_JJ;
 80004ec:	4b61      	ldr	r3, [pc, #388]	@ (8000674 <tactic_yellow_3+0x310>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 80004f2:	4b61      	ldr	r3, [pc, #388]	@ (8000678 <tactic_yellow_3+0x314>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d007      	beq.n	800050c <tactic_yellow_3+0x1a8>

			interrupted_func_stop(AX_Pogonski);
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fd1c 	bl	8000f3c <interrupted_func_stop>
			tactic_state = 4;
 8000504:	4b5a      	ldr	r3, [pc, #360]	@ (8000670 <tactic_yellow_3+0x30c>)
 8000506:	2204      	movs	r2, #4
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	e017      	b.n	800053c <tactic_yellow_3+0x1d8>
		} else {
			ax_wheel_mode(AX_Pogonski);
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff feb5 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000514:	2064      	movs	r0, #100	@ 0x64
 8000516:	f001 f9d7 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fe52 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000528:	2096      	movs	r0, #150	@ 0x96
 800052a:	f001 f9cd 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 800052e:	4b50      	ldr	r3, [pc, #320]	@ (8000670 <tactic_yellow_3+0x30c>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	3301      	adds	r3, #1
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b4d      	ldr	r3, [pc, #308]	@ (8000670 <tactic_yellow_3+0x30c>)
 800053a:	701a      	strb	r2, [r3, #0]
		}
	case 5:
		sensors_case_timer = SENSOR_JJ;
 800053c:	4b4d      	ldr	r3, [pc, #308]	@ (8000674 <tactic_yellow_3+0x310>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000542:	4b4d      	ldr	r3, [pc, #308]	@ (8000678 <tactic_yellow_3+0x314>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	d007      	beq.n	800055c <tactic_yellow_3+0x1f8>

			interrupted_func_stop(AX_Pogonski);
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fcf4 	bl	8000f3c <interrupted_func_stop>
			tactic_state = 5;
 8000554:	4b46      	ldr	r3, [pc, #280]	@ (8000670 <tactic_yellow_3+0x30c>)
 8000556:	2205      	movs	r2, #5
 8000558:	701a      	strb	r2, [r3, #0]
 800055a:	e073      	b.n	8000644 <tactic_yellow_3+0x2e0>
		} else {
			ax_wheel_mode(AX_Pogonski);
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fe8d 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000564:	2064      	movs	r0, #100	@ 0x64
 8000566:	f001 f9af 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 767);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff fe2a 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff fe23 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fe1c 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff fe15 	bl	80001cc <ax_angle_move>
			TajmerDelay(200);
 80005a2:	20c8      	movs	r0, #200	@ 0xc8
 80005a4:	f001 f990 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Zakretni, DESNOPP, 1000);
 80005a8:	79bb      	ldrb	r3, [r7, #6]
 80005aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005ae:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fe0a 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, DESNOPP, 1000);
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005be:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe02 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, DESNOPP, 1000);
 80005c8:	79bb      	ldrb	r3, [r7, #6]
 80005ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005ce:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fdfa 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, DESNOPP, 1000);
 80005d8:	79bb      	ldrb	r3, [r7, #6]
 80005da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005de:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fdf2 	bl	80001cc <ax_angle_move>
			TajmerDelay(400);
 80005e8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80005ec:	f001 f96c 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80005f0:	79bb      	ldrb	r3, [r7, #6]
 80005f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005f6:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fde6 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000606:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fdde 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000610:	79bb      	ldrb	r3, [r7, #6]
 8000612:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000616:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff fdd6 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000626:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fdce 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000630:	2096      	movs	r0, #150	@ 0x96
 8000632:	f001 f949 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <tactic_yellow_3+0x30c>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	3301      	adds	r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <tactic_yellow_3+0x30c>)
 8000642:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		sensors_case_timer = SENSOR_JJ;
 8000644:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <tactic_yellow_3+0x310>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 800064a:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <tactic_yellow_3+0x314>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d013      	beq.n	800067c <tactic_yellow_3+0x318>

			interrupted_func_left_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000654:	79ba      	ldrb	r2, [r7, #6]
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4611      	mov	r1, r2
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fe21 	bl	80012a2 <interrupted_func_left_forward_sideway>
			tactic_state +=5;
 8000660:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <tactic_yellow_3+0x30c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	3305      	adds	r3, #5
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b01      	ldr	r3, [pc, #4]	@ (8000670 <tactic_yellow_3+0x30c>)
 800066c:	701a      	strb	r2, [r3, #0]
 800066e:	e01d      	b.n	80006ac <tactic_yellow_3+0x348>
 8000670:	2000002c 	.word	0x2000002c
 8000674:	20000034 	.word	0x20000034
 8000678:	20000035 	.word	0x20000035
		} else {
			ax_wheel_mode(AX_Pogonski);
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fdfd 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000684:	2064      	movs	r0, #100	@ 0x64
 8000686:	f001 f91f 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fd9a 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000698:	2096      	movs	r0, #150	@ 0x96
 800069a:	f001 f915 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 800069e:	4ba7      	ldr	r3, [pc, #668]	@ (800093c <tactic_yellow_3+0x5d8>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	3301      	adds	r3, #1
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4ba4      	ldr	r3, [pc, #656]	@ (800093c <tactic_yellow_3+0x5d8>)
 80006aa:	701a      	strb	r2, [r3, #0]
		}
	case 7:
		sensors_case_timer = SENSOR_JJ;
 80006ac:	4ba4      	ldr	r3, [pc, #656]	@ (8000940 <tactic_yellow_3+0x5dc>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 80006b2:	4ba4      	ldr	r3, [pc, #656]	@ (8000944 <tactic_yellow_3+0x5e0>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00d      	beq.n	80006d8 <tactic_yellow_3+0x374>

			interrupted_func_left_forward_sideway(AX_Pogonski, AX_Zakretni);
 80006bc:	79ba      	ldrb	r2, [r7, #6]
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4611      	mov	r1, r2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fded 	bl	80012a2 <interrupted_func_left_forward_sideway>
			tactic_state +=4;
 80006c8:	4b9c      	ldr	r3, [pc, #624]	@ (800093c <tactic_yellow_3+0x5d8>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	3304      	adds	r3, #4
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b9a      	ldr	r3, [pc, #616]	@ (800093c <tactic_yellow_3+0x5d8>)
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	e017      	b.n	8000708 <tactic_yellow_3+0x3a4>
		} else {
			ax_wheel_mode(AX_Pogonski);
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fdcf 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80006e0:	2064      	movs	r0, #100	@ 0x64
 80006e2:	f001 f8f1 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd6c 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 80006f4:	2096      	movs	r0, #150	@ 0x96
 80006f6:	f001 f8e7 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 80006fa:	4b90      	ldr	r3, [pc, #576]	@ (800093c <tactic_yellow_3+0x5d8>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3301      	adds	r3, #1
 8000702:	b2da      	uxtb	r2, r3
 8000704:	4b8d      	ldr	r3, [pc, #564]	@ (800093c <tactic_yellow_3+0x5d8>)
 8000706:	701a      	strb	r2, [r3, #0]
		}
	case 8:
		sensors_case_timer = SENSOR_JJ;
 8000708:	4b8d      	ldr	r3, [pc, #564]	@ (8000940 <tactic_yellow_3+0x5dc>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 800070e:	4b8d      	ldr	r3, [pc, #564]	@ (8000944 <tactic_yellow_3+0x5e0>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00d      	beq.n	8000734 <tactic_yellow_3+0x3d0>

			interrupted_func_left_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000718:	79ba      	ldrb	r2, [r7, #6]
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fdbf 	bl	80012a2 <interrupted_func_left_forward_sideway>
			tactic_state +=3;
 8000724:	4b85      	ldr	r3, [pc, #532]	@ (800093c <tactic_yellow_3+0x5d8>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	3303      	adds	r3, #3
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b83      	ldr	r3, [pc, #524]	@ (800093c <tactic_yellow_3+0x5d8>)
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	e017      	b.n	8000764 <tactic_yellow_3+0x400>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fda1 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 800073c:	2064      	movs	r0, #100	@ 0x64
 800073e:	f001 f8c3 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fd3e 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000750:	2096      	movs	r0, #150	@ 0x96
 8000752:	f001 f8b9 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 8000756:	4b79      	ldr	r3, [pc, #484]	@ (800093c <tactic_yellow_3+0x5d8>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	3301      	adds	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b76      	ldr	r3, [pc, #472]	@ (800093c <tactic_yellow_3+0x5d8>)
 8000762:	701a      	strb	r2, [r3, #0]
		}
	case 9:
		sensors_case_timer = SENSOR_JJ;
 8000764:	4b76      	ldr	r3, [pc, #472]	@ (8000940 <tactic_yellow_3+0x5dc>)
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 800076a:	4b76      	ldr	r3, [pc, #472]	@ (8000944 <tactic_yellow_3+0x5e0>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00d      	beq.n	8000790 <tactic_yellow_3+0x42c>

			interrupted_func_left_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fd91 	bl	80012a2 <interrupted_func_left_forward_sideway>
			tactic_state +=2;
 8000780:	4b6e      	ldr	r3, [pc, #440]	@ (800093c <tactic_yellow_3+0x5d8>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	3302      	adds	r3, #2
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b6c      	ldr	r3, [pc, #432]	@ (800093c <tactic_yellow_3+0x5d8>)
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	e017      	b.n	80007c0 <tactic_yellow_3+0x45c>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fd73 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000798:	2064      	movs	r0, #100	@ 0x64
 800079a:	f001 f895 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fd10 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 80007ac:	2096      	movs	r0, #150	@ 0x96
 80007ae:	f001 f88b 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 80007b2:	4b62      	ldr	r3, [pc, #392]	@ (800093c <tactic_yellow_3+0x5d8>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	3301      	adds	r3, #1
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b5f      	ldr	r3, [pc, #380]	@ (800093c <tactic_yellow_3+0x5d8>)
 80007be:	701a      	strb	r2, [r3, #0]
		}
	case 10:
		sensors_case_timer = SENSOR_JJ;
 80007c0:	4b5f      	ldr	r3, [pc, #380]	@ (8000940 <tactic_yellow_3+0x5dc>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 80007c6:	4b5f      	ldr	r3, [pc, #380]	@ (8000944 <tactic_yellow_3+0x5e0>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00b      	beq.n	80007e8 <tactic_yellow_3+0x484>

			interrupted_func_stop(AX_Pogonski);
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fbb2 	bl	8000f3c <interrupted_func_stop>
			tactic_state ++;
 80007d8:	4b58      	ldr	r3, [pc, #352]	@ (800093c <tactic_yellow_3+0x5d8>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	3301      	adds	r3, #1
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b56      	ldr	r3, [pc, #344]	@ (800093c <tactic_yellow_3+0x5d8>)
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	e017      	b.n	8000818 <tactic_yellow_3+0x4b4>
		} else {
			ax_wheel_mode(AX_Pogonski);
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fd47 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80007f0:	2064      	movs	r0, #100	@ 0x64
 80007f2:	f001 f869 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fce4 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000804:	2096      	movs	r0, #150	@ 0x96
 8000806:	f001 f85f 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <tactic_yellow_3+0x5d8>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	3301      	adds	r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b49      	ldr	r3, [pc, #292]	@ (800093c <tactic_yellow_3+0x5d8>)
 8000816:	701a      	strb	r2, [r3, #0]
		}
	case 11:
		sensors_case_timer = SENSOR_JJ;
 8000818:	4b49      	ldr	r3, [pc, #292]	@ (8000940 <tactic_yellow_3+0x5dc>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 800081e:	4b49      	ldr	r3, [pc, #292]	@ (8000944 <tactic_yellow_3+0x5e0>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00b      	beq.n	8000840 <tactic_yellow_3+0x4dc>

			interrupted_func_stop(AX_Pogonski);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fb86 	bl	8000f3c <interrupted_func_stop>
			tactic_state ++;
 8000830:	4b42      	ldr	r3, [pc, #264]	@ (800093c <tactic_yellow_3+0x5d8>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	3301      	adds	r3, #1
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <tactic_yellow_3+0x5d8>)
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	e017      	b.n	8000870 <tactic_yellow_3+0x50c>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fd1b 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000848:	2064      	movs	r0, #100	@ 0x64
 800084a:	f001 f83d 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fcb8 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 800085c:	2096      	movs	r0, #150	@ 0x96
 800085e:	f001 f833 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 8000862:	4b36      	ldr	r3, [pc, #216]	@ (800093c <tactic_yellow_3+0x5d8>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	3301      	adds	r3, #1
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b33      	ldr	r3, [pc, #204]	@ (800093c <tactic_yellow_3+0x5d8>)
 800086e:	701a      	strb	r2, [r3, #0]
		}
	case 12:
		sensors_case_timer = SENSOR_JJ;
 8000870:	4b33      	ldr	r3, [pc, #204]	@ (8000940 <tactic_yellow_3+0x5dc>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000876:	4b33      	ldr	r3, [pc, #204]	@ (8000944 <tactic_yellow_3+0x5e0>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00b      	beq.n	8000898 <tactic_yellow_3+0x534>

			interrupted_func_stop(AX_Pogonski);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fb5a 	bl	8000f3c <interrupted_func_stop>
			tactic_state ++;
 8000888:	4b2c      	ldr	r3, [pc, #176]	@ (800093c <tactic_yellow_3+0x5d8>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	3301      	adds	r3, #1
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b2a      	ldr	r3, [pc, #168]	@ (800093c <tactic_yellow_3+0x5d8>)
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e017      	b.n	80008c8 <tactic_yellow_3+0x564>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fcef 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80008a0:	2064      	movs	r0, #100	@ 0x64
 80008a2:	f001 f811 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fc8c 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 80008b4:	2096      	movs	r0, #150	@ 0x96
 80008b6:	f001 f807 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 80008ba:	4b20      	ldr	r3, [pc, #128]	@ (800093c <tactic_yellow_3+0x5d8>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	3301      	adds	r3, #1
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <tactic_yellow_3+0x5d8>)
 80008c6:	701a      	strb	r2, [r3, #0]
		}
	case 13:
			sensors_case_timer = SENSOR_JJ;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000940 <tactic_yellow_3+0x5dc>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 80008ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <tactic_yellow_3+0x5e0>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d00b      	beq.n	80008f0 <tactic_yellow_3+0x58c>

				interrupted_func_stop(AX_Pogonski);
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fb2e 	bl	8000f3c <interrupted_func_stop>
				tactic_state ++;
 80008e0:	4b16      	ldr	r3, [pc, #88]	@ (800093c <tactic_yellow_3+0x5d8>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	3301      	adds	r3, #1
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b14      	ldr	r3, [pc, #80]	@ (800093c <tactic_yellow_3+0x5d8>)
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	e017      	b.n	8000920 <tactic_yellow_3+0x5bc>
			} else {
				ax_wheel_mode(AX_Pogonski);
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fcc3 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 80008f8:	2064      	movs	r0, #100	@ 0x64
 80008fa:	f000 ffe5 	bl	80018c8 <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 1023);
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc60 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 800090c:	2096      	movs	r0, #150	@ 0x96
 800090e:	f000 ffdb 	bl	80018c8 <TajmerDelay>
				tactic_state++;
 8000912:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <tactic_yellow_3+0x5d8>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	3301      	adds	r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <tactic_yellow_3+0x5d8>)
 800091e:	701a      	strb	r2, [r3, #0]
			}
	case 14:
		ax_angle_move(AX_Pogonski, 0, 0);
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fc50 	bl	80001cc <ax_angle_move>
		break;
 800092c:	e002      	b.n	8000934 <tactic_yellow_3+0x5d0>
	default:
		break;
 800092e:	bf00      	nop
 8000930:	e000      	b.n	8000934 <tactic_yellow_3+0x5d0>
		break;
 8000932:	bf00      	nop
	}
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000002c 	.word	0x2000002c
 8000940:	20000034 	.word	0x20000034
 8000944:	20000035 	.word	0x20000035

08000948 <tactic_blue_3>:
	default:
		break;
	}
}

void tactic_blue_3(uint8_t AX_Pogonski, uint8_t AX_Zakretni) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	460a      	mov	r2, r1
 8000952:	71fb      	strb	r3, [r7, #7]
 8000954:	4613      	mov	r3, r2
 8000956:	71bb      	strb	r3, [r7, #6]
	switch (tactic_state) {
 8000958:	4bbe      	ldr	r3, [pc, #760]	@ (8000c54 <tactic_blue_3+0x30c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b0e      	cmp	r3, #14
 8000960:	f200 82df 	bhi.w	8000f22 <tactic_blue_3+0x5da>
 8000964:	a201      	add	r2, pc, #4	@ (adr r2, 800096c <tactic_blue_3+0x24>)
 8000966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096a:	bf00      	nop
 800096c:	080009a9 	.word	0x080009a9
 8000970:	080009c9 	.word	0x080009c9
 8000974:	08000a31 	.word	0x08000a31
 8000978:	08000a81 	.word	0x08000a81
 800097c:	08000ad1 	.word	0x08000ad1
 8000980:	08000b21 	.word	0x08000b21
 8000984:	08000c29 	.word	0x08000c29
 8000988:	08000c91 	.word	0x08000c91
 800098c:	08000ced 	.word	0x08000ced
 8000990:	08000d49 	.word	0x08000d49
 8000994:	08000da5 	.word	0x08000da5
 8000998:	08000e01 	.word	0x08000e01
 800099c:	08000e5d 	.word	0x08000e5d
 80009a0:	08000eb9 	.word	0x08000eb9
 80009a4:	08000f15 	.word	0x08000f15
	case 0:
		if (IO_cinc()) {
 80009a8:	f000 fee2 	bl	8001770 <IO_cinc>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f000 82b9 	beq.w	8000f26 <tactic_blue_3+0x5de>
			timer_start_sys_time();
 80009b4:	f000 ff78 	bl	80018a8 <timer_start_sys_time>
			tactic_state++;
 80009b8:	4ba6      	ldr	r3, [pc, #664]	@ (8000c54 <tactic_blue_3+0x30c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3301      	adds	r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4ba4      	ldr	r3, [pc, #656]	@ (8000c54 <tactic_blue_3+0x30c>)
 80009c4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80009c6:	e2ae      	b.n	8000f26 <tactic_blue_3+0x5de>

	case 1:
		TajmerDelay(200); //90000
 80009c8:	20c8      	movs	r0, #200	@ 0xc8
 80009ca:	f000 ff7d 	bl	80018c8 <TajmerDelay>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80009ce:	79bb      	ldrb	r3, [r7, #6]
 80009d0:	22c8      	movs	r2, #200	@ 0xc8
 80009d2:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fbf8 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	22c8      	movs	r2, #200	@ 0xc8
 80009e0:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fbf1 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 80009ea:	20c8      	movs	r0, #200	@ 0xc8
 80009ec:	f000 ff6c 	bl	80018c8 <TajmerDelay>
		ax_wheel_mode(AX_Pogonski);
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fc43 	bl	800027e <ax_wheel_mode>
		TajmerDelay(200);
 80009f8:	20c8      	movs	r0, #200	@ 0xc8
 80009fa:	f000 ff65 	bl	80018c8 <TajmerDelay>
		ax_angle_move(AX_Pogonski, 0, 512);
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fbe0 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 8000a0c:	20c8      	movs	r0, #200	@ 0xc8
 8000a0e:	f000 ff5b 	bl	80018c8 <TajmerDelay>
		ax_angle_move(AX_Pogonski, 0, 767);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fbd6 	bl	80001cc <ax_angle_move>

		tactic_state++;
 8000a20:	4b8c      	ldr	r3, [pc, #560]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	3301      	adds	r3, #1
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4b8a      	ldr	r3, [pc, #552]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000a2c:	701a      	strb	r2, [r3, #0]
		break;
 8000a2e:	e27b      	b.n	8000f28 <tactic_blue_3+0x5e0>

	case 2:
		sensors_case_timer = SENSOR_JJ;
 8000a30:	4b89      	ldr	r3, [pc, #548]	@ (8000c58 <tactic_blue_3+0x310>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000a36:	4b89      	ldr	r3, [pc, #548]	@ (8000c5c <tactic_blue_3+0x314>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d007      	beq.n	8000a50 <tactic_blue_3+0x108>

			interrupted_func_stop(AX_Pogonski);
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 fa7a 	bl	8000f3c <interrupted_func_stop>
			tactic_state = 2;
 8000a48:	4b82      	ldr	r3, [pc, #520]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	e017      	b.n	8000a80 <tactic_blue_3+0x138>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fc13 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000a58:	2064      	movs	r0, #100	@ 0x64
 8000a5a:	f000 ff35 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fbb0 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000a6c:	2096      	movs	r0, #150	@ 0x96
 8000a6e:	f000 ff2b 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 8000a72:	4b78      	ldr	r3, [pc, #480]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	3301      	adds	r3, #1
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b75      	ldr	r3, [pc, #468]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000a7e:	701a      	strb	r2, [r3, #0]
		}
	case 3:
		sensors_case_timer = SENSOR_JJ;
 8000a80:	4b75      	ldr	r3, [pc, #468]	@ (8000c58 <tactic_blue_3+0x310>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000a86:	4b75      	ldr	r3, [pc, #468]	@ (8000c5c <tactic_blue_3+0x314>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d007      	beq.n	8000aa0 <tactic_blue_3+0x158>

			interrupted_func_stop(AX_Pogonski);
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 fa52 	bl	8000f3c <interrupted_func_stop>
			tactic_state = 3;
 8000a98:	4b6e      	ldr	r3, [pc, #440]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e017      	b.n	8000ad0 <tactic_blue_3+0x188>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fbeb 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000aa8:	2064      	movs	r0, #100	@ 0x64
 8000aaa:	f000 ff0d 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fb88 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000abc:	2096      	movs	r0, #150	@ 0x96
 8000abe:	f000 ff03 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 8000ac2:	4b64      	ldr	r3, [pc, #400]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	3301      	adds	r3, #1
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b61      	ldr	r3, [pc, #388]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000ace:	701a      	strb	r2, [r3, #0]
		}
	case 4:
		sensors_case_timer = SENSOR_JJ;
 8000ad0:	4b61      	ldr	r3, [pc, #388]	@ (8000c58 <tactic_blue_3+0x310>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000ad6:	4b61      	ldr	r3, [pc, #388]	@ (8000c5c <tactic_blue_3+0x314>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d007      	beq.n	8000af0 <tactic_blue_3+0x1a8>

			interrupted_func_stop(AX_Pogonski);
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fa2a 	bl	8000f3c <interrupted_func_stop>
			tactic_state = 4;
 8000ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000aea:	2204      	movs	r2, #4
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	e017      	b.n	8000b20 <tactic_blue_3+0x1d8>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fbc3 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000af8:	2064      	movs	r0, #100	@ 0x64
 8000afa:	f000 fee5 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fb60 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000b0c:	2096      	movs	r0, #150	@ 0x96
 8000b0e:	f000 fedb 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 8000b12:	4b50      	ldr	r3, [pc, #320]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	3301      	adds	r3, #1
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000b1e:	701a      	strb	r2, [r3, #0]
		}
	case 5:
		sensors_case_timer = SENSOR_JJ;
 8000b20:	4b4d      	ldr	r3, [pc, #308]	@ (8000c58 <tactic_blue_3+0x310>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000b26:	4b4d      	ldr	r3, [pc, #308]	@ (8000c5c <tactic_blue_3+0x314>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d007      	beq.n	8000b40 <tactic_blue_3+0x1f8>

			interrupted_func_stop(AX_Pogonski);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fa02 	bl	8000f3c <interrupted_func_stop>
			tactic_state = 5;
 8000b38:	4b46      	ldr	r3, [pc, #280]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000b3a:	2205      	movs	r2, #5
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e073      	b.n	8000c28 <tactic_blue_3+0x2e0>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fb9b 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000b48:	2064      	movs	r0, #100	@ 0x64
 8000b4a:	f000 febd 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fb38 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fb31 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fb2a 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fb23 	bl	80001cc <ax_angle_move>
			TajmerDelay(200);
 8000b86:	20c8      	movs	r0, #200	@ 0xc8
 8000b88:	f000 fe9e 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Zakretni, LEVOPP, 1000);
 8000b8c:	79bb      	ldrb	r3, [r7, #6]
 8000b8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b92:	f240 2146 	movw	r1, #582	@ 0x246
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fb18 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, LEVOPP, 1000);
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ba2:	f240 2146 	movw	r1, #582	@ 0x246
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fb10 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, LEVOPP, 1000);
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bb2:	f240 2146 	movw	r1, #582	@ 0x246
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fb08 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, LEVOPP, 1000);
 8000bbc:	79bb      	ldrb	r3, [r7, #6]
 8000bbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bc2:	f240 2146 	movw	r1, #582	@ 0x246
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fb00 	bl	80001cc <ax_angle_move>
			TajmerDelay(800);
 8000bcc:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000bd0:	f000 fe7a 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bda:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff faf4 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bea:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff faec 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000bf4:	79bb      	ldrb	r3, [r7, #6]
 8000bf6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bfa:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fae4 	bl	80001cc <ax_angle_move>
			ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c0a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fadc 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000c14:	2096      	movs	r0, #150	@ 0x96
 8000c16:	f000 fe57 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	3301      	adds	r3, #1
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000c26:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		sensors_case_timer = SENSOR_JJ;
 8000c28:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <tactic_blue_3+0x310>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <tactic_blue_3+0x314>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d013      	beq.n	8000c60 <tactic_blue_3+0x318>

			interrupted_func_right_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000c38:	79ba      	ldrb	r2, [r7, #6]
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f9fc 	bl	800103c <interrupted_func_right_forward_sideway>
			tactic_state += 5;
 8000c44:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	3305      	adds	r3, #5
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b01      	ldr	r3, [pc, #4]	@ (8000c54 <tactic_blue_3+0x30c>)
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	e01d      	b.n	8000c90 <tactic_blue_3+0x348>
 8000c54:	2000002c 	.word	0x2000002c
 8000c58:	20000034 	.word	0x20000034
 8000c5c:	20000035 	.word	0x20000035
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fb0b 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000c68:	2064      	movs	r0, #100	@ 0x64
 8000c6a:	f000 fe2d 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff faa8 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000c7c:	2096      	movs	r0, #150	@ 0x96
 8000c7e:	f000 fe23 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 8000c82:	4bab      	ldr	r3, [pc, #684]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	3301      	adds	r3, #1
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	4ba8      	ldr	r3, [pc, #672]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000c8e:	701a      	strb	r2, [r3, #0]
		}
	case 7:
		sensors_case_timer = SENSOR_JJ;
 8000c90:	4ba8      	ldr	r3, [pc, #672]	@ (8000f34 <tactic_blue_3+0x5ec>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000c96:	4ba8      	ldr	r3, [pc, #672]	@ (8000f38 <tactic_blue_3+0x5f0>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d00d      	beq.n	8000cbc <tactic_blue_3+0x374>

			interrupted_func_right_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000ca0:	79ba      	ldrb	r2, [r7, #6]
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f9c8 	bl	800103c <interrupted_func_right_forward_sideway>
			tactic_state += 4;
 8000cac:	4ba0      	ldr	r3, [pc, #640]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	3304      	adds	r3, #4
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b9e      	ldr	r3, [pc, #632]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	e017      	b.n	8000cec <tactic_blue_3+0x3a4>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fadd 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000cc4:	2064      	movs	r0, #100	@ 0x64
 8000cc6:	f000 fdff 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fa7a 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000cd8:	2096      	movs	r0, #150	@ 0x96
 8000cda:	f000 fdf5 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 8000cde:	4b94      	ldr	r3, [pc, #592]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b91      	ldr	r3, [pc, #580]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000cea:	701a      	strb	r2, [r3, #0]
		}
	case 8:
		sensors_case_timer = SENSOR_JJ;
 8000cec:	4b91      	ldr	r3, [pc, #580]	@ (8000f34 <tactic_blue_3+0x5ec>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000cf2:	4b91      	ldr	r3, [pc, #580]	@ (8000f38 <tactic_blue_3+0x5f0>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00d      	beq.n	8000d18 <tactic_blue_3+0x3d0>

			interrupted_func_right_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000cfc:	79ba      	ldrb	r2, [r7, #6]
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f99a 	bl	800103c <interrupted_func_right_forward_sideway>
			tactic_state += 3;
 8000d08:	4b89      	ldr	r3, [pc, #548]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	3303      	adds	r3, #3
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b87      	ldr	r3, [pc, #540]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	e017      	b.n	8000d48 <tactic_blue_3+0x400>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff faaf 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000d20:	2064      	movs	r0, #100	@ 0x64
 8000d22:	f000 fdd1 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fa4c 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000d34:	2096      	movs	r0, #150	@ 0x96
 8000d36:	f000 fdc7 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 8000d3a:	4b7d      	ldr	r3, [pc, #500]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	3301      	adds	r3, #1
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b7a      	ldr	r3, [pc, #488]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000d46:	701a      	strb	r2, [r3, #0]
		}
	case 9:
		sensors_case_timer = SENSOR_JJ;
 8000d48:	4b7a      	ldr	r3, [pc, #488]	@ (8000f34 <tactic_blue_3+0x5ec>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000d4e:	4b7a      	ldr	r3, [pc, #488]	@ (8000f38 <tactic_blue_3+0x5f0>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d00d      	beq.n	8000d74 <tactic_blue_3+0x42c>

			interrupted_func_right_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000d58:	79ba      	ldrb	r2, [r7, #6]
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f96c 	bl	800103c <interrupted_func_right_forward_sideway>
			tactic_state += 2;
 8000d64:	4b72      	ldr	r3, [pc, #456]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b70      	ldr	r3, [pc, #448]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e017      	b.n	8000da4 <tactic_blue_3+0x45c>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fa81 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000d7c:	2064      	movs	r0, #100	@ 0x64
 8000d7e:	f000 fda3 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fa1e 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000d90:	2096      	movs	r0, #150	@ 0x96
 8000d92:	f000 fd99 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 8000d96:	4b66      	ldr	r3, [pc, #408]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b63      	ldr	r3, [pc, #396]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000da2:	701a      	strb	r2, [r3, #0]
		}
	case 10:
		sensors_case_timer = SENSOR_JJ;
 8000da4:	4b63      	ldr	r3, [pc, #396]	@ (8000f34 <tactic_blue_3+0x5ec>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000daa:	4b63      	ldr	r3, [pc, #396]	@ (8000f38 <tactic_blue_3+0x5f0>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d00d      	beq.n	8000dd0 <tactic_blue_3+0x488>

			interrupted_func_right_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000db4:	79ba      	ldrb	r2, [r7, #6]
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f93e 	bl	800103c <interrupted_func_right_forward_sideway>
			tactic_state++;
 8000dc0:	4b5b      	ldr	r3, [pc, #364]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b59      	ldr	r3, [pc, #356]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000dcc:	701a      	strb	r2, [r3, #0]
 8000dce:	e017      	b.n	8000e00 <tactic_blue_3+0x4b8>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fa53 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000dd8:	2064      	movs	r0, #100	@ 0x64
 8000dda:	f000 fd75 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff f9f0 	bl	80001cc <ax_angle_move>

			TajmerDelay(250);
 8000dec:	20fa      	movs	r0, #250	@ 0xfa
 8000dee:	f000 fd6b 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 8000df2:	4b4f      	ldr	r3, [pc, #316]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	3301      	adds	r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b4c      	ldr	r3, [pc, #304]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000dfe:	701a      	strb	r2, [r3, #0]
		}
	case 11:
		sensors_case_timer = SENSOR_JJ;
 8000e00:	4b4c      	ldr	r3, [pc, #304]	@ (8000f34 <tactic_blue_3+0x5ec>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000e06:	4b4c      	ldr	r3, [pc, #304]	@ (8000f38 <tactic_blue_3+0x5f0>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00d      	beq.n	8000e2c <tactic_blue_3+0x4e4>

			interrupted_func_right_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000e10:	79ba      	ldrb	r2, [r7, #6]
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f910 	bl	800103c <interrupted_func_right_forward_sideway>
			tactic_state++;
 8000e1c:	4b44      	ldr	r3, [pc, #272]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	3301      	adds	r3, #1
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b42      	ldr	r3, [pc, #264]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	e017      	b.n	8000e5c <tactic_blue_3+0x514>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fa25 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000e34:	2064      	movs	r0, #100	@ 0x64
 8000e36:	f000 fd47 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff f9c2 	bl	80001cc <ax_angle_move>

			TajmerDelay(250);
 8000e48:	20fa      	movs	r0, #250	@ 0xfa
 8000e4a:	f000 fd3d 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 8000e4e:	4b38      	ldr	r3, [pc, #224]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	3301      	adds	r3, #1
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b35      	ldr	r3, [pc, #212]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000e5a:	701a      	strb	r2, [r3, #0]
		}
	case 12:
		sensors_case_timer = SENSOR_JJ;
 8000e5c:	4b35      	ldr	r3, [pc, #212]	@ (8000f34 <tactic_blue_3+0x5ec>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000e62:	4b35      	ldr	r3, [pc, #212]	@ (8000f38 <tactic_blue_3+0x5f0>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d00d      	beq.n	8000e88 <tactic_blue_3+0x540>

			interrupted_func_right_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000e6c:	79ba      	ldrb	r2, [r7, #6]
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f8e2 	bl	800103c <interrupted_func_right_forward_sideway>
			tactic_state++;
 8000e78:	4b2d      	ldr	r3, [pc, #180]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	3301      	adds	r3, #1
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b2b      	ldr	r3, [pc, #172]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	e017      	b.n	8000eb8 <tactic_blue_3+0x570>
		} else {
			ax_wheel_mode(AX_Pogonski);
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff f9f7 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000e90:	2064      	movs	r0, #100	@ 0x64
 8000e92:	f000 fd19 	bl	80018c8 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 767);
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff f994 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 8000ea4:	2096      	movs	r0, #150	@ 0x96
 8000ea6:	f000 fd0f 	bl	80018c8 <TajmerDelay>
			tactic_state++;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000eb6:	701a      	strb	r2, [r3, #0]
		}
	case 13:
			sensors_case_timer = SENSOR_JJ;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f34 <tactic_blue_3+0x5ec>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <tactic_blue_3+0x5f0>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00d      	beq.n	8000ee4 <tactic_blue_3+0x59c>

				interrupted_func_right_forward_sideway(AX_Pogonski, AX_Zakretni);
 8000ec8:	79ba      	ldrb	r2, [r7, #6]
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f8b4 	bl	800103c <interrupted_func_right_forward_sideway>
				tactic_state++;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	3301      	adds	r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	e017      	b.n	8000f14 <tactic_blue_3+0x5cc>
			} else {
				ax_wheel_mode(AX_Pogonski);
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff f9c9 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000eec:	2064      	movs	r0, #100	@ 0x64
 8000eee:	f000 fceb 	bl	80018c8 <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 767);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff f966 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 8000f00:	2096      	movs	r0, #150	@ 0x96
 8000f02:	f000 fce1 	bl	80018c8 <TajmerDelay>
				tactic_state++;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <tactic_blue_3+0x5e8>)
 8000f12:	701a      	strb	r2, [r3, #0]
			}
	case 14:
		ax_angle_move(AX_Pogonski, 0, 0);
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff f956 	bl	80001cc <ax_angle_move>
		break;
 8000f20:	e002      	b.n	8000f28 <tactic_blue_3+0x5e0>
	default:
		break;
 8000f22:	bf00      	nop
 8000f24:	e000      	b.n	8000f28 <tactic_blue_3+0x5e0>
		break;
 8000f26:	bf00      	nop
	}
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000002c 	.word	0x2000002c
 8000f34:	20000034 	.word	0x20000034
 8000f38:	20000035 	.word	0x20000035

08000f3c <interrupted_func_stop>:

static void interrupted_func_stop(uint8_t AX_Pogonski) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	TajmerDelay(100);
 8000f46:	2064      	movs	r0, #100	@ 0x64
 8000f48:	f000 fcbe 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Pogonski, 0, 767);
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff f939 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 767);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff f932 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 767);
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff f92b 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 767);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff f924 	bl	80001cc <ax_angle_move>
	TajmerDelay(100);
 8000f84:	2064      	movs	r0, #100	@ 0x64
 8000f86:	f000 fc9f 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Pogonski, 0, 511);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff f91a 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 511);
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff f913 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 511);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff f90c 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 511);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff f905 	bl	80001cc <ax_angle_move>
	TajmerDelay(100);
 8000fc2:	2064      	movs	r0, #100	@ 0x64
 8000fc4:	f000 fc80 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Pogonski, 0, 255);
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	22ff      	movs	r2, #255	@ 0xff
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff f8fc 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 255);
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	22ff      	movs	r2, #255	@ 0xff
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff f8f6 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 255);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	22ff      	movs	r2, #255	@ 0xff
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff f8f0 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 255);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	22ff      	movs	r2, #255	@ 0xff
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f8ea 	bl	80001cc <ax_angle_move>
	TajmerDelay(100);
 8000ff8:	2064      	movs	r0, #100	@ 0x64
 8000ffa:	f000 fc65 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Pogonski, 0, 0);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f8e1 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 0);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f8db 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 0);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f8d5 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Pogonski, 0, 0);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff f8cf 	bl	80001cc <ax_angle_move>
	TajmerDelay(200);
 800102e:	20c8      	movs	r0, #200	@ 0xc8
 8001030:	f000 fc4a 	bl	80018c8 <TajmerDelay>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <interrupted_func_right_forward_sideway>:

static void interrupted_func_right_forward_sideway(uint8_t AX_Pogonski,
		uint8_t AX_Zakretni) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	460a      	mov	r2, r1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	4613      	mov	r3, r2
 800104a:	71bb      	strb	r3, [r7, #6]

	ax_angle_move(AX_Pogonski, 0, 767);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff f8b9 	bl	80001cc <ax_angle_move>
	TajmerDelay(200);
 800105a:	20c8      	movs	r0, #200	@ 0xc8
 800105c:	f000 fc34 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001066:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff f8ae 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001076:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f8a6 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001086:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f89e 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001096:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f896 	bl	80001cc <ax_angle_move>
	TajmerDelay(300);
 80010a0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80010a4:	f000 fc10 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010ae:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f88a 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80010b8:	79bb      	ldrb	r3, [r7, #6]
 80010ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010be:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff f882 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010ce:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f87a 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010de:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f872 	bl	80001cc <ax_angle_move>
	TajmerDelay(200);
 80010e8:	20c8      	movs	r0, #200	@ 0xc8
 80010ea:	f000 fbed 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 80010ee:	79bb      	ldrb	r3, [r7, #6]
 80010f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010f4:	f240 218b 	movw	r1, #651	@ 0x28b
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff f867 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001104:	f240 218b 	movw	r1, #651	@ 0x28b
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f85f 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 800110e:	79bb      	ldrb	r3, [r7, #6]
 8001110:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001114:	f240 218b 	movw	r1, #651	@ 0x28b
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f857 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001124:	f240 218b 	movw	r1, #651	@ 0x28b
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f84f 	bl	80001cc <ax_angle_move>
	TajmerDelay(300);
 800112e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001132:	f000 fbc9 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800113c:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f843 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800114c:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f83b 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800115c:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f833 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800116c:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f82b 	bl	80001cc <ax_angle_move>
	TajmerDelay(750);
 8001176:	f240 20ee 	movw	r0, #750	@ 0x2ee
 800117a:	f000 fba5 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 800117e:	79bb      	ldrb	r3, [r7, #6]
 8001180:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001184:	f240 218b 	movw	r1, #651	@ 0x28b
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f81f 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001194:	f240 218b 	movw	r1, #651	@ 0x28b
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f817 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011a4:	f240 218b 	movw	r1, #651	@ 0x28b
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f80f 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011b4:	f240 218b 	movw	r1, #651	@ 0x28b
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f807 	bl	80001cc <ax_angle_move>
	TajmerDelay(300);
 80011be:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011c2:	f000 fb81 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80011c6:	79bb      	ldrb	r3, [r7, #6]
 80011c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011cc:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7fe fffb 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011dc:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7fe fff3 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011ec:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7fe ffeb 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011fc:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001200:	4618      	mov	r0, r3
 8001202:	f7fe ffe3 	bl	80001cc <ax_angle_move>
	TajmerDelay(200);
 8001206:	20c8      	movs	r0, #200	@ 0xc8
 8001208:	f000 fb5e 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001212:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8001216:	4618      	mov	r0, r3
 8001218:	f7fe ffd8 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001222:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8001226:	4618      	mov	r0, r3
 8001228:	f7fe ffd0 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001232:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8001236:	4618      	mov	r0, r3
 8001238:	f7fe ffc8 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001242:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8001246:	4618      	mov	r0, r3
 8001248:	f7fe ffc0 	bl	80001cc <ax_angle_move>
	TajmerDelay(300);
 800124c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001250:	f000 fb3a 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800125a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800125e:	4618      	mov	r0, r3
 8001260:	f7fe ffb4 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800126a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800126e:	4618      	mov	r0, r3
 8001270:	f7fe ffac 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800127a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800127e:	4618      	mov	r0, r3
 8001280:	f7fe ffa4 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800128a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800128e:	4618      	mov	r0, r3
 8001290:	f7fe ff9c 	bl	80001cc <ax_angle_move>
	TajmerDelay(200);
 8001294:	20c8      	movs	r0, #200	@ 0xc8
 8001296:	f000 fb17 	bl	80018c8 <TajmerDelay>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <interrupted_func_left_forward_sideway>:
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
	TajmerDelay(500);
}

static void interrupted_func_left_forward_sideway(uint8_t AX_Pogonski,
		uint8_t AX_Zakretni) {
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	460a      	mov	r2, r1
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	4613      	mov	r3, r2
 80012b0:	71bb      	strb	r3, [r7, #6]
	ax_angle_move(AX_Pogonski, 0, 767);
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7fe ff86 	bl	80001cc <ax_angle_move>
	TajmerDelay(200);
 80012c0:	20c8      	movs	r0, #200	@ 0xc8
 80012c2:	f000 fb01 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012cc:	f240 218b 	movw	r1, #651	@ 0x28b
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7fe ff7b 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012dc:	f240 218b 	movw	r1, #651	@ 0x28b
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7fe ff73 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012ec:	f240 218b 	movw	r1, #651	@ 0x28b
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7fe ff6b 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012fc:	f240 218b 	movw	r1, #651	@ 0x28b
 8001300:	4618      	mov	r0, r3
 8001302:	f7fe ff63 	bl	80001cc <ax_angle_move>
	TajmerDelay(250);
 8001306:	20fa      	movs	r0, #250	@ 0xfa
 8001308:	f000 fade 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001312:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001316:	4618      	mov	r0, r3
 8001318:	f7fe ff58 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001322:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001326:	4618      	mov	r0, r3
 8001328:	f7fe ff50 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001332:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001336:	4618      	mov	r0, r3
 8001338:	f7fe ff48 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001342:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001346:	4618      	mov	r0, r3
 8001348:	f7fe ff40 	bl	80001cc <ax_angle_move>
	TajmerDelay(400);
 800134c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001350:	f000 faba 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800135a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800135e:	4618      	mov	r0, r3
 8001360:	f7fe ff34 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800136a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800136e:	4618      	mov	r0, r3
 8001370:	f7fe ff2c 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800137a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ff24 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001384:	79bb      	ldrb	r3, [r7, #6]
 8001386:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800138a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800138e:	4618      	mov	r0, r3
 8001390:	f7fe ff1c 	bl	80001cc <ax_angle_move>
	TajmerDelay(250);
 8001394:	20fa      	movs	r0, #250	@ 0xfa
 8001396:	f000 fa97 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013a0:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7fe ff11 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013b0:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7fe ff09 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013c0:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7fe ff01 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013d0:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7fe fef9 	bl	80001cc <ax_angle_move>
	TajmerDelay(1000);
 80013da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013de:	f000 fa73 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013e8:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7fe feed 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 80013f2:	79bb      	ldrb	r3, [r7, #6]
 80013f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013f8:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7fe fee5 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001402:	79bb      	ldrb	r3, [r7, #6]
 8001404:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001408:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe fedd 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, DESNO, 1000);
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001418:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800141c:	4618      	mov	r0, r3
 800141e:	f7fe fed5 	bl	80001cc <ax_angle_move>
	TajmerDelay(250);
 8001422:	20fa      	movs	r0, #250	@ 0xfa
 8001424:	f000 fa50 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001428:	79bb      	ldrb	r3, [r7, #6]
 800142a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800142e:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001432:	4618      	mov	r0, r3
 8001434:	f7fe feca 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001438:	79bb      	ldrb	r3, [r7, #6]
 800143a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800143e:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe fec2 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800144e:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001452:	4618      	mov	r0, r3
 8001454:	f7fe feba 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800145e:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001462:	4618      	mov	r0, r3
 8001464:	f7fe feb2 	bl	80001cc <ax_angle_move>
	TajmerDelay(1200);
 8001468:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 800146c:	f000 fa2c 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 8001470:	79bb      	ldrb	r3, [r7, #6]
 8001472:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001476:	f240 218b 	movw	r1, #651	@ 0x28b
 800147a:	4618      	mov	r0, r3
 800147c:	f7fe fea6 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001486:	f240 218b 	movw	r1, #651	@ 0x28b
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe fe9e 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001496:	f240 218b 	movw	r1, #651	@ 0x28b
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe fe96 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, LEVO, 1000);
 80014a0:	79bb      	ldrb	r3, [r7, #6]
 80014a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014a6:	f240 218b 	movw	r1, #651	@ 0x28b
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7fe fe8e 	bl	80001cc <ax_angle_move>
	TajmerDelay(250);
 80014b0:	20fa      	movs	r0, #250	@ 0xfa
 80014b2:	f000 fa09 	bl	80018c8 <TajmerDelay>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80014b6:	79bb      	ldrb	r3, [r7, #6]
 80014b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014bc:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe fe83 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80014c6:	79bb      	ldrb	r3, [r7, #6]
 80014c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014cc:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe fe7b 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80014d6:	79bb      	ldrb	r3, [r7, #6]
 80014d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014dc:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7fe fe73 	bl	80001cc <ax_angle_move>
	ax_angle_move(AX_Zakretni, PRAVO, 1000);
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014ec:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe fe6b 	bl	80001cc <ax_angle_move>
	TajmerDelay(200);
 80014f6:	20c8      	movs	r0, #200	@ 0xc8
 80014f8:	f000 f9e6 	bl	80018c8 <TajmerDelay>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <io>:
static void
portA_init();

void
io ()
 {
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	portC_init();
 8001508:	f000 f806 	bl	8001518 <portC_init>
	portB_init();
 800150c:	f000 f814 	bl	8001538 <portB_init>
	portA_init();
 8001510:	f000 f842 	bl	8001598 <portA_init>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <portC_init>:

static void
portC_init()
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (0b1 << 2);
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <portC_init+0x1c>)
 800151e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001520:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <portC_init+0x1c>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000

08001538 <portB_init>:

static void
portB_init()
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (0b1 << 1);
 800153c:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <portB_init+0x58>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001540:	4a13      	ldr	r2, [pc, #76]	@ (8001590 <portB_init+0x58>)
 8001542:	f043 0302 	orr.w	r3, r3, #2
 8001546:	64d3      	str	r3, [r2, #76]	@ 0x4c

	GPIOB->MODER &= ~(0b11 << 2 * 3);
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <portB_init+0x5c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a11      	ldr	r2, [pc, #68]	@ (8001594 <portB_init+0x5c>)
 800154e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001552:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << 2 * 3);
 8001554:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <portB_init+0x5c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <portB_init+0x5c>)
 800155a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800155e:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(0b1 << 3);
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <portB_init+0x5c>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <portB_init+0x5c>)
 8001566:	f023 0308 	bic.w	r3, r3, #8
 800156a:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (0b11 << 2 * 3);
 800156c:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <portB_init+0x5c>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	4a08      	ldr	r2, [pc, #32]	@ (8001594 <portB_init+0x5c>)
 8001572:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001576:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~(0b11 << 2 * 3);
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <portB_init+0x5c>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4a05      	ldr	r2, [pc, #20]	@ (8001594 <portB_init+0x5c>)
 800157e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	48000400 	.word	0x48000400

08001598 <portA_init>:

static void
portA_init()
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (0b1 << 0);
 800159c:	4b73      	ldr	r3, [pc, #460]	@ (800176c <portA_init+0x1d4>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a0:	4a72      	ldr	r2, [pc, #456]	@ (800176c <portA_init+0x1d4>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	64d3      	str	r3, [r2, #76]	@ 0x4c

	GPIOA->MODER &= ~(0b11 << 2 * CINC);
 80015a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2207      	movs	r2, #7
 80015b0:	0052      	lsls	r2, r2, #1
 80015b2:	2103      	movs	r1, #3
 80015b4:	fa01 f202 	lsl.w	r2, r1, r2
 80015b8:	43d2      	mvns	r2, r2
 80015ba:	4611      	mov	r1, r2
 80015bc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80015c0:	400b      	ands	r3, r1
 80015c2:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * CINC); //low speed
 80015c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2207      	movs	r2, #7
 80015cc:	0052      	lsls	r2, r2, #1
 80015ce:	2103      	movs	r1, #3
 80015d0:	fa01 f202 	lsl.w	r2, r1, r2
 80015d4:	43d2      	mvns	r2, r2
 80015d6:	4611      	mov	r1, r2
 80015d8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80015dc:	400b      	ands	r3, r1
 80015de:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 *CINC);
 80015e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2207      	movs	r2, #7
 80015e8:	0052      	lsls	r2, r2, #1
 80015ea:	2103      	movs	r1, #3
 80015ec:	fa01 f202 	lsl.w	r2, r1, r2
 80015f0:	43d2      	mvns	r2, r2
 80015f2:	4611      	mov	r1, r2
 80015f4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80015f8:	400b      	ands	r3, r1
 80015fa:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2*CINC);
 80015fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2207      	movs	r2, #7
 8001604:	0052      	lsls	r2, r2, #1
 8001606:	2102      	movs	r1, #2
 8001608:	fa01 f202 	lsl.w	r2, r1, r2
 800160c:	4611      	mov	r1, r2
 800160e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001612:	430b      	orrs	r3, r1
 8001614:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_2);
 8001616:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2209      	movs	r2, #9
 800161e:	0052      	lsls	r2, r2, #1
 8001620:	2103      	movs	r1, #3
 8001622:	fa01 f202 	lsl.w	r2, r1, r2
 8001626:	43d2      	mvns	r2, r2
 8001628:	4611      	mov	r1, r2
 800162a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800162e:	400b      	ands	r3, r1
 8001630:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_2); //low speed
 8001632:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2209      	movs	r2, #9
 800163a:	0052      	lsls	r2, r2, #1
 800163c:	2103      	movs	r1, #3
 800163e:	fa01 f202 	lsl.w	r2, r1, r2
 8001642:	43d2      	mvns	r2, r2
 8001644:	4611      	mov	r1, r2
 8001646:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800164a:	400b      	ands	r3, r1
 800164c:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_2);
 800164e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	2209      	movs	r2, #9
 8001656:	0052      	lsls	r2, r2, #1
 8001658:	2103      	movs	r1, #3
 800165a:	fa01 f202 	lsl.w	r2, r1, r2
 800165e:	43d2      	mvns	r2, r2
 8001660:	4611      	mov	r1, r2
 8001662:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001666:	400b      	ands	r3, r1
 8001668:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2 * PREKIDAC_TAKTIKE_2);
 800166a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2209      	movs	r2, #9
 8001672:	0052      	lsls	r2, r2, #1
 8001674:	2102      	movs	r1, #2
 8001676:	fa01 f202 	lsl.w	r2, r1, r2
 800167a:	4611      	mov	r1, r2
 800167c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001680:	430b      	orrs	r3, r1
 8001682:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_3);
 8001684:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	220a      	movs	r2, #10
 800168c:	0052      	lsls	r2, r2, #1
 800168e:	2103      	movs	r1, #3
 8001690:	fa01 f202 	lsl.w	r2, r1, r2
 8001694:	43d2      	mvns	r2, r2
 8001696:	4611      	mov	r1, r2
 8001698:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800169c:	400b      	ands	r3, r1
 800169e:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_3); //low speed
 80016a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	220a      	movs	r2, #10
 80016a8:	0052      	lsls	r2, r2, #1
 80016aa:	2103      	movs	r1, #3
 80016ac:	fa01 f202 	lsl.w	r2, r1, r2
 80016b0:	43d2      	mvns	r2, r2
 80016b2:	4611      	mov	r1, r2
 80016b4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80016b8:	400b      	ands	r3, r1
 80016ba:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_3);
 80016bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	220a      	movs	r2, #10
 80016c4:	0052      	lsls	r2, r2, #1
 80016c6:	2103      	movs	r1, #3
 80016c8:	fa01 f202 	lsl.w	r2, r1, r2
 80016cc:	43d2      	mvns	r2, r2
 80016ce:	4611      	mov	r1, r2
 80016d0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80016d4:	400b      	ands	r3, r1
 80016d6:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2 * PREKIDAC_TAKTIKE_3);
 80016d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	220a      	movs	r2, #10
 80016e0:	0052      	lsls	r2, r2, #1
 80016e2:	2102      	movs	r1, #2
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	4611      	mov	r1, r2
 80016ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80016ee:	430b      	orrs	r3, r1
 80016f0:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_4);
 80016f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	220b      	movs	r2, #11
 80016fa:	0052      	lsls	r2, r2, #1
 80016fc:	2103      	movs	r1, #3
 80016fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001702:	43d2      	mvns	r2, r2
 8001704:	4611      	mov	r1, r2
 8001706:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800170a:	400b      	ands	r3, r1
 800170c:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_4); //low speed
 800170e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	220b      	movs	r2, #11
 8001716:	0052      	lsls	r2, r2, #1
 8001718:	2103      	movs	r1, #3
 800171a:	fa01 f202 	lsl.w	r2, r1, r2
 800171e:	43d2      	mvns	r2, r2
 8001720:	4611      	mov	r1, r2
 8001722:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001726:	400b      	ands	r3, r1
 8001728:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 * PREKIDAC_TAKTIKE_4);
 800172a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	220b      	movs	r2, #11
 8001732:	0052      	lsls	r2, r2, #1
 8001734:	2103      	movs	r1, #3
 8001736:	fa01 f202 	lsl.w	r2, r1, r2
 800173a:	43d2      	mvns	r2, r2
 800173c:	4611      	mov	r1, r2
 800173e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001742:	400b      	ands	r3, r1
 8001744:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2*PREKIDAC_TAKTIKE_4);
 8001746:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	220b      	movs	r2, #11
 800174e:	0052      	lsls	r2, r2, #1
 8001750:	2102      	movs	r1, #2
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	4611      	mov	r1, r2
 8001758:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800175c:	430b      	orrs	r3, r1
 800175e:	60d3      	str	r3, [r2, #12]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <IO_cinc>:

}

bool
IO_cinc()
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	if(!(GPIOA->IDR & (0b1 << CINC)))
 8001774:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	2207      	movs	r2, #7
 800177c:	4611      	mov	r1, r2
 800177e:	2201      	movs	r2, #1
 8001780:	408a      	lsls	r2, r1
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d107      	bne.n	8001798 <IO_cinc+0x28>
		counter++;
 8001788:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <IO_cinc+0x48>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	3301      	adds	r3, #1
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <IO_cinc+0x48>)
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	e002      	b.n	800179e <IO_cinc+0x2e>
	else
		counter=0;
 8001798:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <IO_cinc+0x48>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
	if(counter)
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <IO_cinc+0x48>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <IO_cinc+0x3c>
		return true;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <IO_cinc+0x3e>
	return false;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	2000002d 	.word	0x2000002d

080017bc <Taktika_SIMA_TRECI_3>:
			tactic_yellow_2(ID_SIMA2_POGONSKI, ID_SIMA2_ZAKRETNI);
}

void
Taktika_SIMA_TRECI_3()
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	if(!(GPIOA->IDR & (0b1 << PREKIDAC_TAKTIKE_3)))
 80017c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	220a      	movs	r2, #10
 80017c8:	4611      	mov	r1, r2
 80017ca:	2201      	movs	r2, #1
 80017cc:	408a      	lsls	r2, r1
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d104      	bne.n	80017de <Taktika_SIMA_TRECI_3+0x22>
          tactic_blue_3(ID_SIMA3_POGONSKI, ID_SIMA3_ZAKRETNI);
 80017d4:	2108      	movs	r1, #8
 80017d6:	200b      	movs	r0, #11
 80017d8:	f7ff f8b6 	bl	8000948 <tactic_blue_3>
		else
           tactic_yellow_3(ID_SIMA3_POGONSKI, ID_SIMA3_ZAKRETNI);
}
 80017dc:	e003      	b.n	80017e6 <Taktika_SIMA_TRECI_3+0x2a>
           tactic_yellow_3(ID_SIMA3_POGONSKI, ID_SIMA3_ZAKRETNI);
 80017de:	2108      	movs	r1, #8
 80017e0:	200b      	movs	r0, #11
 80017e2:	f7fe fdbf 	bl	8000364 <tactic_yellow_3>
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}

080017ea <tajmer_init>:
volatile bool interrupted = false;


void
tajmer_init()
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
 tim2_init();
 80017ee:	f000 f803 	bl	80017f8 <tim2_init>
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <tim2_init>:

static void
tim2_init()
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= (0b1 << 0);
 80017fe:	4b28      	ldr	r3, [pc, #160]	@ (80018a0 <tim2_init+0xa8>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001802:	4a27      	ldr	r2, [pc, #156]	@ (80018a0 <tim2_init+0xa8>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6593      	str	r3, [r2, #88]	@ 0x58

	TIM2-> PSC = 80-1; //80MHz -> 1MHz
 800180a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800180e:	224f      	movs	r2, #79	@ 0x4f
 8001810:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM2-> ARR = 1000-1; //1MHz -> 1kHz
 8001812:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001816:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800181a:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CR1 &= ~((0b1 << 1) || (0b1 << 2));
 800181c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= (0b1 << 0);
 800182c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6153      	str	r3, [r2, #20]

	TIM2->DIER |= (0b1 << 0);
 800183c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	60d3      	str	r3, [r2, #12]

	while (!(TIM2->SR & (0b1 << 0)));
 800184c:	bf00      	nop
 800184e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f8      	beq.n	800184e <tim2_init+0x56>

	TIM2->SR &= ~(0b1 << 0);
 800185c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= (0b1 << 2);
 800186c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6013      	str	r3, [r2, #0]

	uint8_t const TIM2_PREKID = 28;
 800187c:	231c      	movs	r3, #28
 800187e:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[0] |= (0b1 << TIM2_PREKID);
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <tim2_init+0xac>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	79fa      	ldrb	r2, [r7, #7]
 8001886:	2101      	movs	r1, #1
 8001888:	fa01 f202 	lsl.w	r2, r1, r2
 800188c:	4611      	mov	r1, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <tim2_init+0xac>)
 8001890:	430b      	orrs	r3, r1
 8001892:	6013      	str	r3, [r2, #0]

	//TIM2->CR1 |= (0b1 << 0);
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40021000 	.word	0x40021000
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <timer_start_sys_time>:

void
timer_start_sys_time ()
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  TIM2->CR1 |= (0b1 << 0);	//tek ga ovo ukljucuje
 80018ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <TajmerDelay>:
    return false;
  flag_delay = true;
  return true;
}

void TajmerDelay(uint32_t ms) {
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	uint32_t PocVreme = sys_time_ms;
 80018d0:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <TajmerDelay+0x30>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
	while (sys_time_ms <= PocVreme + ms) {
 80018d6:	e000      	b.n	80018da <TajmerDelay+0x12>
		__NOP();
 80018d8:	bf00      	nop
	while (sys_time_ms <= PocVreme + ms) {
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	441a      	add	r2, r3
 80018e0:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <TajmerDelay+0x30>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d2f7      	bcs.n	80018d8 <TajmerDelay+0x10>
	}

}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000030 	.word	0x20000030

080018fc <TIM2_IRQHandler>:

void
TIM2_IRQHandler ()
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  // poziva se svake milisekunde
  // proveri da li je stvarno TIM2 pozvao rutinu
  if ((TIM2->SR & (0b1 << 0)) == (0b1 << 0))
 8001900:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b01      	cmp	r3, #1
 800190c:	d11c      	bne.n	8001948 <TIM2_IRQHandler+0x4c>
    {
      TIM2->SR &= ~(0b1 << 0);	// da bi sledeci put mogli da detektujemo prekid
 800190e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6113      	str	r3, [r2, #16]

      sys_time_ms++;
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <TIM2_IRQHandler+0x7c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	4a14      	ldr	r2, [pc, #80]	@ (8001978 <TIM2_IRQHandler+0x7c>)
 8001926:	6013      	str	r3, [r2, #0]

      if(sys_time_ms >= 9500) //99500
 8001928:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <TIM2_IRQHandler+0x7c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f242 521b 	movw	r2, #9499	@ 0x251b
 8001930:	4293      	cmp	r3, r2
 8001932:	d909      	bls.n	8001948 <TIM2_IRQHandler+0x4c>
      {
    	  TajmerDelay(100);
 8001934:	2064      	movs	r0, #100	@ 0x64
 8001936:	f7ff ffc7 	bl	80018c8 <TajmerDelay>
//    	  ax_angle_move(ID_SIMA2_POGONSKI, 0, 0);
    	  ax_angle_move(ID_SIMA3_POGONSKI, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	200b      	movs	r0, #11
 8001940:	f7fe fc44 	bl	80001cc <ax_angle_move>
//    	  ax_angle_move(ID_SIMA4_POGONSKI, 0, 0);
    	  while(1);
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <TIM2_IRQHandler+0x48>
      }
    }

  switch (sensors_case_timer) {
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <TIM2_IRQHandler+0x80>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d008      	beq.n	8001964 <TIM2_IRQHandler+0x68>
 8001952:	2b01      	cmp	r3, #1
 8001954:	d10a      	bne.n	800196c <TIM2_IRQHandler+0x70>
	case SENSOR_JJ:
		interrupted = sensor_JedanJedini();
 8001956:	f7fe fced 	bl	8000334 <sensor_JedanJedini>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <TIM2_IRQHandler+0x84>)
 8001960:	701a      	strb	r2, [r3, #0]
		break;
 8001962:	e007      	b.n	8001974 <TIM2_IRQHandler+0x78>
	case SENSORS_OFF:
		  interrupted = false;
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <TIM2_IRQHandler+0x84>)
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
		  break;
 800196a:	e003      	b.n	8001974 <TIM2_IRQHandler+0x78>
	default:
		  interrupted = false;
 800196c:	4b04      	ldr	r3, [pc, #16]	@ (8001980 <TIM2_IRQHandler+0x84>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
		break;
 8001972:	bf00      	nop
    }
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000030 	.word	0x20000030
 800197c:	20000034 	.word	0x20000034
 8001980:	20000035 	.word	0x20000035

08001984 <UART_init>:
static void
UART1_init();

void
UART_init()
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	UART1_init();
 8001988:	f000 f802 	bl	8001990 <UART1_init>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <UART1_init>:

static void
UART1_init()
{
 8001990:	b490      	push	{r4, r7}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
	//PB6 i PB7 AF7
	RCC->APB2ENR |= (0b1 << 14); //takt na USART1
 8001996:	4b99      	ldr	r3, [pc, #612]	@ (8001bfc <UART1_init+0x26c>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199a:	4a98      	ldr	r2, [pc, #608]	@ (8001bfc <UART1_init+0x26c>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a0:	6613      	str	r3, [r2, #96]	@ 0x60
	RCC->AHB2ENR |= (0b1 << 1); //takt za gpioB
 80019a2:	4b96      	ldr	r3, [pc, #600]	@ (8001bfc <UART1_init+0x26c>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	4a95      	ldr	r2, [pc, #596]	@ (8001bfc <UART1_init+0x26c>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	64d3      	str	r3, [r2, #76]	@ 0x4c

	uint8_t const TX_PIN = 6;
 80019ae:	2306      	movs	r3, #6
 80019b0:	71fb      	strb	r3, [r7, #7]
	uint8_t const RX_PIN = 7;
 80019b2:	2307      	movs	r3, #7
 80019b4:	71bb      	strb	r3, [r7, #6]

	GPIOB->MODER &= ~(0b11 << TX_PIN * 2);
 80019b6:	4b92      	ldr	r3, [pc, #584]	@ (8001c00 <UART1_init+0x270>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	79fa      	ldrb	r2, [r7, #7]
 80019bc:	0052      	lsls	r2, r2, #1
 80019be:	2103      	movs	r1, #3
 80019c0:	fa01 f202 	lsl.w	r2, r1, r2
 80019c4:	43d2      	mvns	r2, r2
 80019c6:	4611      	mov	r1, r2
 80019c8:	4a8d      	ldr	r2, [pc, #564]	@ (8001c00 <UART1_init+0x270>)
 80019ca:	400b      	ands	r3, r1
 80019cc:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0b11 << RX_PIN * 2);
 80019ce:	4b8c      	ldr	r3, [pc, #560]	@ (8001c00 <UART1_init+0x270>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	79ba      	ldrb	r2, [r7, #6]
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	2103      	movs	r1, #3
 80019d8:	fa01 f202 	lsl.w	r2, r1, r2
 80019dc:	43d2      	mvns	r2, r2
 80019de:	4611      	mov	r1, r2
 80019e0:	4a87      	ldr	r2, [pc, #540]	@ (8001c00 <UART1_init+0x270>)
 80019e2:	400b      	ands	r3, r1
 80019e4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << TX_PIN * 2);
 80019e6:	4b86      	ldr	r3, [pc, #536]	@ (8001c00 <UART1_init+0x270>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	79fa      	ldrb	r2, [r7, #7]
 80019ec:	0052      	lsls	r2, r2, #1
 80019ee:	2102      	movs	r1, #2
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	4611      	mov	r1, r2
 80019f6:	4a82      	ldr	r2, [pc, #520]	@ (8001c00 <UART1_init+0x270>)
 80019f8:	430b      	orrs	r3, r1
 80019fa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << RX_PIN * 2);
 80019fc:	4b80      	ldr	r3, [pc, #512]	@ (8001c00 <UART1_init+0x270>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	79ba      	ldrb	r2, [r7, #6]
 8001a02:	0052      	lsls	r2, r2, #1
 8001a04:	2102      	movs	r1, #2
 8001a06:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4a7c      	ldr	r2, [pc, #496]	@ (8001c00 <UART1_init+0x270>)
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER |= (0b1 << TX_PIN);
 8001a12:	4b7b      	ldr	r3, [pc, #492]	@ (8001c00 <UART1_init+0x270>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	79fa      	ldrb	r2, [r7, #7]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4a77      	ldr	r2, [pc, #476]	@ (8001c00 <UART1_init+0x270>)
 8001a22:	430b      	orrs	r3, r1
 8001a24:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(0b11 << TX_PIN*2);
 8001a26:	4b76      	ldr	r3, [pc, #472]	@ (8001c00 <UART1_init+0x270>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	79fa      	ldrb	r2, [r7, #7]
 8001a2c:	0052      	lsls	r2, r2, #1
 8001a2e:	2103      	movs	r1, #3
 8001a30:	fa01 f202 	lsl.w	r2, r1, r2
 8001a34:	43d2      	mvns	r2, r2
 8001a36:	4611      	mov	r1, r2
 8001a38:	4a71      	ldr	r2, [pc, #452]	@ (8001c00 <UART1_init+0x270>)
 8001a3a:	400b      	ands	r3, r1
 8001a3c:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0b01 << TX_PIN*2);
 8001a3e:	4b70      	ldr	r3, [pc, #448]	@ (8001c00 <UART1_init+0x270>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	79fa      	ldrb	r2, [r7, #7]
 8001a44:	0052      	lsls	r2, r2, #1
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4a6c      	ldr	r2, [pc, #432]	@ (8001c00 <UART1_init+0x270>)
 8001a50:	430b      	orrs	r3, r1
 8001a52:	60d3      	str	r3, [r2, #12]

	uint8_t const Alt_function = 7;
 8001a54:	2307      	movs	r3, #7
 8001a56:	717b      	strb	r3, [r7, #5]

	GPIOB->AFR[TX_PIN / 8] &= ~(0b1111 << (TX_PIN % 8) * 4);
 8001a58:	4a69      	ldr	r2, [pc, #420]	@ (8001c00 <UART1_init+0x270>)
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	3308      	adds	r3, #8
 8001a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a66:	79fa      	ldrb	r2, [r7, #7]
 8001a68:	f002 0207 	and.w	r2, r2, #7
 8001a6c:	0092      	lsls	r2, r2, #2
 8001a6e:	210f      	movs	r1, #15
 8001a70:	fa01 f202 	lsl.w	r2, r1, r2
 8001a74:	43d2      	mvns	r2, r2
 8001a76:	4614      	mov	r4, r2
 8001a78:	4961      	ldr	r1, [pc, #388]	@ (8001c00 <UART1_init+0x270>)
 8001a7a:	79fa      	ldrb	r2, [r7, #7]
 8001a7c:	08d2      	lsrs	r2, r2, #3
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	4610      	mov	r0, r2
 8001a82:	ea03 0204 	and.w	r2, r3, r4
 8001a86:	f100 0308 	add.w	r3, r0, #8
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[TX_PIN / 8] |= (Alt_function << (TX_PIN % 8) * 4);
 8001a8e:	4a5c      	ldr	r2, [pc, #368]	@ (8001c00 <UART1_init+0x270>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	08db      	lsrs	r3, r3, #3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	3308      	adds	r3, #8
 8001a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9c:	7979      	ldrb	r1, [r7, #5]
 8001a9e:	79fa      	ldrb	r2, [r7, #7]
 8001aa0:	f002 0207 	and.w	r2, r2, #7
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aaa:	4614      	mov	r4, r2
 8001aac:	4954      	ldr	r1, [pc, #336]	@ (8001c00 <UART1_init+0x270>)
 8001aae:	79fa      	ldrb	r2, [r7, #7]
 8001ab0:	08d2      	lsrs	r2, r2, #3
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	ea43 0204 	orr.w	r2, r3, r4
 8001aba:	f100 0308 	add.w	r3, r0, #8
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] &= ~(0b1111 << (RX_PIN % 8) * 4);
 8001ac2:	4a4f      	ldr	r2, [pc, #316]	@ (8001c00 <UART1_init+0x270>)
 8001ac4:	79bb      	ldrb	r3, [r7, #6]
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	3308      	adds	r3, #8
 8001acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad0:	79ba      	ldrb	r2, [r7, #6]
 8001ad2:	f002 0207 	and.w	r2, r2, #7
 8001ad6:	0092      	lsls	r2, r2, #2
 8001ad8:	210f      	movs	r1, #15
 8001ada:	fa01 f202 	lsl.w	r2, r1, r2
 8001ade:	43d2      	mvns	r2, r2
 8001ae0:	4614      	mov	r4, r2
 8001ae2:	4947      	ldr	r1, [pc, #284]	@ (8001c00 <UART1_init+0x270>)
 8001ae4:	79ba      	ldrb	r2, [r7, #6]
 8001ae6:	08d2      	lsrs	r2, r2, #3
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	4610      	mov	r0, r2
 8001aec:	ea03 0204 	and.w	r2, r3, r4
 8001af0:	f100 0308 	add.w	r3, r0, #8
 8001af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] |= (Alt_function << (RX_PIN % 8) * 4);
 8001af8:	4a41      	ldr	r2, [pc, #260]	@ (8001c00 <UART1_init+0x270>)
 8001afa:	79bb      	ldrb	r3, [r7, #6]
 8001afc:	08db      	lsrs	r3, r3, #3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	3308      	adds	r3, #8
 8001b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b06:	7979      	ldrb	r1, [r7, #5]
 8001b08:	79ba      	ldrb	r2, [r7, #6]
 8001b0a:	f002 0207 	and.w	r2, r2, #7
 8001b0e:	0092      	lsls	r2, r2, #2
 8001b10:	fa01 f202 	lsl.w	r2, r1, r2
 8001b14:	4614      	mov	r4, r2
 8001b16:	493a      	ldr	r1, [pc, #232]	@ (8001c00 <UART1_init+0x270>)
 8001b18:	79ba      	ldrb	r2, [r7, #6]
 8001b1a:	08d2      	lsrs	r2, r2, #3
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	4610      	mov	r0, r2
 8001b20:	ea43 0204 	orr.w	r2, r3, r4
 8001b24:	f100 0308 	add.w	r3, r0, #8
 8001b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

     USART1->CR1 &= ~(0b1 << 12);
 8001b2c:	4b35      	ldr	r3, [pc, #212]	@ (8001c04 <UART1_init+0x274>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a34      	ldr	r2, [pc, #208]	@ (8001c04 <UART1_init+0x274>)
 8001b32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b36:	6013      	str	r3, [r2, #0]
     USART1->CR1 &= ~(0b1 << 28); //8 bita
 8001b38:	4b32      	ldr	r3, [pc, #200]	@ (8001c04 <UART1_init+0x274>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a31      	ldr	r2, [pc, #196]	@ (8001c04 <UART1_init+0x274>)
 8001b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	6013      	str	r3, [r2, #0]
     USART1->CR2 &= ~(0b11 << 12); //1 stop bit
 8001b44:	4b2f      	ldr	r3, [pc, #188]	@ (8001c04 <UART1_init+0x274>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a2e      	ldr	r2, [pc, #184]	@ (8001c04 <UART1_init+0x274>)
 8001b4a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b4e:	6053      	str	r3, [r2, #4]

     USART1->BRR = 0; //baud 9600->546.14
 8001b50:	4b2c      	ldr	r3, [pc, #176]	@ (8001c04 <UART1_init+0x274>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
     USART1->BRR |= ((546 << 4) | (14 << 0)); //115200->45.57
 8001b56:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <UART1_init+0x274>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8001c04 <UART1_init+0x274>)
 8001b5c:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8001b60:	f043 032e 	orr.w	r3, r3, #46	@ 0x2e
 8001b64:	60d3      	str	r3, [r2, #12]

     USART1->CR1 |= (0b11 << 2); //tx & rx pin enable
 8001b66:	4b27      	ldr	r3, [pc, #156]	@ (8001c04 <UART1_init+0x274>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a26      	ldr	r2, [pc, #152]	@ (8001c04 <UART1_init+0x274>)
 8001b6c:	f043 030c 	orr.w	r3, r3, #12
 8001b70:	6013      	str	r3, [r2, #0]

     USART1->CR1 |= (0b1 << 5); //interrupt enable
 8001b72:	4b24      	ldr	r3, [pc, #144]	@ (8001c04 <UART1_init+0x274>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a23      	ldr	r2, [pc, #140]	@ (8001c04 <UART1_init+0x274>)
 8001b78:	f043 0320 	orr.w	r3, r3, #32
 8001b7c:	6013      	str	r3, [r2, #0]

     USART1->CR2 &= ~(0b1 << 11);
 8001b7e:	4b21      	ldr	r3, [pc, #132]	@ (8001c04 <UART1_init+0x274>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4a20      	ldr	r2, [pc, #128]	@ (8001c04 <UART1_init+0x274>)
 8001b84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001b88:	6053      	str	r3, [r2, #4]
     USART1->CR2 &= ~(0b1 << 14);
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <UART1_init+0x274>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001c04 <UART1_init+0x274>)
 8001b90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b94:	6053      	str	r3, [r2, #4]
     USART1->CR3 &= ~(0b1 << 1);
 8001b96:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <UART1_init+0x274>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8001c04 <UART1_init+0x274>)
 8001b9c:	f023 0302 	bic.w	r3, r3, #2
 8001ba0:	6093      	str	r3, [r2, #8]
     USART1->CR3 &= ~(0b1 << 5);
 8001ba2:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <UART1_init+0x274>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	4a17      	ldr	r2, [pc, #92]	@ (8001c04 <UART1_init+0x274>)
 8001ba8:	f023 0320 	bic.w	r3, r3, #32
 8001bac:	6093      	str	r3, [r2, #8]
     USART1->CR3 |= (0b1 << 3);
 8001bae:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <UART1_init+0x274>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4a14      	ldr	r2, [pc, #80]	@ (8001c04 <UART1_init+0x274>)
 8001bb4:	f043 0308 	orr.w	r3, r3, #8
 8001bb8:	6093      	str	r3, [r2, #8]

    uint8_t  USART1_INTERRUPT = 37;
 8001bba:	2325      	movs	r3, #37	@ 0x25
 8001bbc:	713b      	strb	r3, [r7, #4]
    NVIC->ISER[USART1_INTERRUPT / 32] |= (0b1 <<  USART1_INTERRUPT % 32);
 8001bbe:	4a12      	ldr	r2, [pc, #72]	@ (8001c08 <UART1_init+0x278>)
 8001bc0:	793b      	ldrb	r3, [r7, #4]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	b2d8      	uxtb	r0, r3
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bcc:	793a      	ldrb	r2, [r7, #4]
 8001bce:	f002 021f 	and.w	r2, r2, #31
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd8:	4614      	mov	r4, r2
 8001bda:	4a0b      	ldr	r2, [pc, #44]	@ (8001c08 <UART1_init+0x278>)
 8001bdc:	4601      	mov	r1, r0
 8001bde:	4323      	orrs	r3, r4
 8001be0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

     USART1-> CR1 |= (0b1 << 0); //usart enable
 8001be4:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <UART1_init+0x274>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a06      	ldr	r2, [pc, #24]	@ (8001c04 <UART1_init+0x274>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6013      	str	r3, [r2, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc90      	pop	{r4, r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	48000400 	.word	0x48000400
 8001c04:	40013800 	.word	0x40013800
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <UART_send_byte>:

void
UART_send_byte (uint8_t data)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
   USART1->TDR = data; //ovako se salje, kada je  USART1->dr sa desne strane, onda se ponasa kao recieve registar
 8001c16:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <UART_send_byte+0x38>)
 8001c18:	79fa      	ldrb	r2, [r7, #7]
 8001c1a:	b292      	uxth	r2, r2
 8001c1c:	851a      	strh	r2, [r3, #40]	@ 0x28

  while (!( USART1->ISR & (0b1 << 6)))
 8001c1e:	bf00      	nop
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <UART_send_byte+0x38>)
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f9      	beq.n	8001c20 <UART_send_byte+0x14>
	  ;

   USART1->ISR &= ~(0b1 << 6);
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <UART_send_byte+0x38>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <UART_send_byte+0x38>)
 8001c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001c36:	61d3      	str	r3, [r2, #28]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40013800 	.word	0x40013800

08001c48 <UART_write>:

void
UART_write (uint8_t data)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  if (buffer_size != MAX_BUFFER_SIZE)
 8001c52:	4b25      	ldr	r3, [pc, #148]	@ (8001ce8 <UART_write+0xa0>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	d01c      	beq.n	8001c96 <UART_write+0x4e>
    {
      buffer[index_write] = data;
 8001c5c:	4b23      	ldr	r3, [pc, #140]	@ (8001cec <UART_write+0xa4>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	4619      	mov	r1, r3
 8001c64:	4a22      	ldr	r2, [pc, #136]	@ (8001cf0 <UART_write+0xa8>)
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 8001c6a:	4b20      	ldr	r3, [pc, #128]	@ (8001cec <UART_write+0xa4>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	3301      	adds	r3, #1
 8001c72:	425a      	negs	r2, r3
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	f002 021f 	and.w	r2, r2, #31
 8001c7c:	bf58      	it	pl
 8001c7e:	4253      	negpl	r3, r2
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <UART_write+0xa4>)
 8001c84:	701a      	strb	r2, [r3, #0]
      buffer_size++;
 8001c86:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <UART_write+0xa0>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <UART_write+0xa0>)
 8001c92:	701a      	strb	r2, [r3, #0]
    {
      buffer[index_write] = data;
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
    }
}
 8001c94:	e022      	b.n	8001cdc <UART_write+0x94>
      buffer[index_write] = data;
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <UART_write+0xa4>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4a14      	ldr	r2, [pc, #80]	@ (8001cf0 <UART_write+0xa8>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <UART_write+0xa4>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	3301      	adds	r3, #1
 8001cac:	425a      	negs	r2, r3
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	f002 021f 	and.w	r2, r2, #31
 8001cb6:	bf58      	it	pl
 8001cb8:	4253      	negpl	r3, r2
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <UART_write+0xa4>)
 8001cbe:	701a      	strb	r2, [r3, #0]
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <UART_write+0xac>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	425a      	negs	r2, r3
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	f002 021f 	and.w	r2, r2, #31
 8001cd2:	bf58      	it	pl
 8001cd4:	4253      	negpl	r3, r2
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <UART_write+0xac>)
 8001cda:	701a      	strb	r2, [r3, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	20000058 	.word	0x20000058
 8001cec:	20000059 	.word	0x20000059
 8001cf0:	20000038 	.word	0x20000038
 8001cf4:	2000005a 	.word	0x2000005a

08001cf8 <USART1_IRQHandler>:
    return false;
}

void
USART1_IRQHandler ()
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  if ( USART1->ISR & (0b1 << 5))
 8001cfc:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <USART1_IRQHandler+0x24>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f003 0320 	and.w	r3, r3, #32
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d006      	beq.n	8001d16 <USART1_IRQHandler+0x1e>
    {
      UART_write(USART1->RDR);
 8001d08:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <USART1_IRQHandler+0x24>)
 8001d0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff99 	bl	8001c48 <UART_write>
    }
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40013800 	.word	0x40013800

08001d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d24:	f000 f8f7 	bl	8001f16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d28:	f000 f80d 	bl	8001d46 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  io();
 8001d2c:	f7ff fbea 	bl	8001504 <io>
  tajmer_init();
 8001d30:	f7ff fd5b 	bl	80017ea <tajmer_init>
  UART_init();
 8001d34:	f7ff fe26 	bl	8001984 <UART_init>
  sensor_Init();
 8001d38:	f7fe fad6 	bl	80002e8 <sensor_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001d3c:	b662      	cpsie	i
}
 8001d3e:	bf00      	nop
  while (1)
  {
    /* USER CODE END WHILE */

//	  Taktika_SIMA_DRUGI_2();
	  Taktika_SIMA_TRECI_3();
 8001d40:	f7ff fd3c 	bl	80017bc <Taktika_SIMA_TRECI_3>
 8001d44:	e7fc      	b.n	8001d40 <main+0x20>

08001d46 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b096      	sub	sp, #88	@ 0x58
 8001d4a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2244      	movs	r2, #68	@ 0x44
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f001 f89d 	bl	8002e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d68:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d6c:	f000 fa3c 	bl	80021e8 <HAL_PWREx_ControlVoltageScaling>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d76:	f000 f838 	bl	8001dea <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001d7a:	2310      	movs	r3, #16
 8001d7c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d86:	2360      	movs	r3, #96	@ 0x60
 8001d88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d92:	2301      	movs	r3, #1
 8001d94:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001d96:	2328      	movs	r3, #40	@ 0x28
 8001d98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001da2:	2302      	movs	r3, #2
 8001da4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fa72 	bl	8002294 <HAL_RCC_OscConfig>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001db6:	f000 f818 	bl	8001dea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dba:	230f      	movs	r3, #15
 8001dbc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001dce:	463b      	mov	r3, r7
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fe72 	bl	8002abc <HAL_RCC_ClockConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001dde:	f000 f804 	bl	8001dea <Error_Handler>
  }
}
 8001de2:	bf00      	nop
 8001de4:	3758      	adds	r7, #88	@ 0x58
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dee:	b672      	cpsid	i
}
 8001df0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df2:	bf00      	nop
 8001df4:	e7fd      	b.n	8001df2 <Error_Handler+0x8>
	...

08001df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <HAL_MspInit+0x44>)
 8001e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e02:	4a0e      	ldr	r2, [pc, #56]	@ (8001e3c <HAL_MspInit+0x44>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <HAL_MspInit+0x44>)
 8001e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_MspInit+0x44>)
 8001e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1a:	4a08      	ldr	r2, [pc, #32]	@ (8001e3c <HAL_MspInit+0x44>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_MspInit+0x44>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000

08001e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <NMI_Handler+0x4>

08001e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <MemManage_Handler+0x4>

08001e58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <BusFault_Handler+0x4>

08001e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <UsageFault_Handler+0x4>

08001e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e96:	f000 f893 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <SystemInit+0x20>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ec0 <SystemInit+0x20>)
 8001eac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001efc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec8:	f7ff ffea 	bl	8001ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ecc:	480c      	ldr	r0, [pc, #48]	@ (8001f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ece:	490d      	ldr	r1, [pc, #52]	@ (8001f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f08 <LoopForever+0xe>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8001f10 <LoopForever+0x16>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef2:	f000 ffd7 	bl	8002ea4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ef6:	f7ff ff13 	bl	8001d20 <main>

08001efa <LoopForever>:

LoopForever:
    b LoopForever
 8001efa:	e7fe      	b.n	8001efa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001efc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f04:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f08:	08002f4c 	.word	0x08002f4c
  ldr r2, =_sbss
 8001f0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f10:	20000060 	.word	0x20000060

08001f14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC1_IRQHandler>

08001f16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f000 f91f 	bl	8002164 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f26:	200f      	movs	r0, #15
 8001f28:	f000 f80e 	bl	8001f48 <HAL_InitTick>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	71fb      	strb	r3, [r7, #7]
 8001f36:	e001      	b.n	8001f3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f38:	f7ff ff5e 	bl	8001df8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f54:	4b17      	ldr	r3, [pc, #92]	@ (8001fb4 <HAL_InitTick+0x6c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d023      	beq.n	8001fa4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f5c:	4b16      	ldr	r3, [pc, #88]	@ (8001fb8 <HAL_InitTick+0x70>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <HAL_InitTick+0x6c>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 f91d 	bl	80021b2 <HAL_SYSTICK_Config>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b0f      	cmp	r3, #15
 8001f82:	d809      	bhi.n	8001f98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f000 f8f5 	bl	800217a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f90:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <HAL_InitTick+0x74>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e007      	b.n	8001fa8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	e004      	b.n	8001fa8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	e001      	b.n	8001fa8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000000c 	.word	0x2000000c
 8001fb8:	20000004 	.word	0x20000004
 8001fbc:	20000008 	.word	0x20000008

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	2000000c 	.word	0x2000000c
 8001fe4:	2000005c 	.word	0x2000005c

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	2000005c 	.word	0x2000005c

08002000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002010:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800201c:	4013      	ands	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800202c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002032:	4a04      	ldr	r2, [pc, #16]	@ (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60d3      	str	r3, [r2, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800204c:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <__NVIC_GetPriorityGrouping+0x18>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	f003 0307 	and.w	r3, r3, #7
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	6039      	str	r1, [r7, #0]
 800206e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	2b00      	cmp	r3, #0
 8002076:	db0a      	blt.n	800208e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	b2da      	uxtb	r2, r3
 800207c:	490c      	ldr	r1, [pc, #48]	@ (80020b0 <__NVIC_SetPriority+0x4c>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	0112      	lsls	r2, r2, #4
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	440b      	add	r3, r1
 8002088:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800208c:	e00a      	b.n	80020a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4908      	ldr	r1, [pc, #32]	@ (80020b4 <__NVIC_SetPriority+0x50>)
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	3b04      	subs	r3, #4
 800209c:	0112      	lsls	r2, r2, #4
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	440b      	add	r3, r1
 80020a2:	761a      	strb	r2, [r3, #24]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000e100 	.word	0xe000e100
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	@ 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f1c3 0307 	rsb	r3, r3, #7
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	bf28      	it	cs
 80020d6:	2304      	movcs	r3, #4
 80020d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3304      	adds	r3, #4
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d902      	bls.n	80020e8 <NVIC_EncodePriority+0x30>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3b03      	subs	r3, #3
 80020e6:	e000      	b.n	80020ea <NVIC_EncodePriority+0x32>
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	f04f 32ff 	mov.w	r2, #4294967295
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	401a      	ands	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	43d9      	mvns	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	4313      	orrs	r3, r2
         );
}
 8002112:	4618      	mov	r0, r3
 8002114:	3724      	adds	r7, #36	@ 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002130:	d301      	bcc.n	8002136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002132:	2301      	movs	r3, #1
 8002134:	e00f      	b.n	8002156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002136:	4a0a      	ldr	r2, [pc, #40]	@ (8002160 <SysTick_Config+0x40>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213e:	210f      	movs	r1, #15
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f7ff ff8e 	bl	8002064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002148:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <SysTick_Config+0x40>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214e:	4b04      	ldr	r3, [pc, #16]	@ (8002160 <SysTick_Config+0x40>)
 8002150:	2207      	movs	r2, #7
 8002152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	e000e010 	.word	0xe000e010

08002164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ff47 	bl	8002000 <__NVIC_SetPriorityGrouping>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800218c:	f7ff ff5c 	bl	8002048 <__NVIC_GetPriorityGrouping>
 8002190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	6978      	ldr	r0, [r7, #20]
 8002198:	f7ff ff8e 	bl	80020b8 <NVIC_EncodePriority>
 800219c:	4602      	mov	r2, r0
 800219e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff5d 	bl	8002064 <__NVIC_SetPriority>
}
 80021aa:	bf00      	nop
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ffb0 	bl	8002120 <SysTick_Config>
 80021c0:	4603      	mov	r3, r0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021d0:	4b04      	ldr	r3, [pc, #16]	@ (80021e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40007000 	.word	0x40007000

080021e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021f6:	d130      	bne.n	800225a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f8:	4b23      	ldr	r3, [pc, #140]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002204:	d038      	beq.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002206:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800220e:	4a1e      	ldr	r2, [pc, #120]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002210:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002214:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002216:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2232      	movs	r2, #50	@ 0x32
 800221c:	fb02 f303 	mul.w	r3, r2, r3
 8002220:	4a1b      	ldr	r2, [pc, #108]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0c9b      	lsrs	r3, r3, #18
 8002228:	3301      	adds	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222c:	e002      	b.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3b01      	subs	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002234:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002240:	d102      	bne.n	8002248 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f2      	bne.n	800222e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002248:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002254:	d110      	bne.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e00f      	b.n	800227a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800225a:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002266:	d007      	beq.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002268:	4b07      	ldr	r3, [pc, #28]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002270:	4a05      	ldr	r2, [pc, #20]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002276:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40007000 	.word	0x40007000
 800228c:	20000004 	.word	0x20000004
 8002290:	431bde83 	.word	0x431bde83

08002294 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f000 bc02 	b.w	8002aac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a8:	4b96      	ldr	r3, [pc, #600]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b2:	4b94      	ldr	r3, [pc, #592]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80e4 	beq.w	8002492 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_RCC_OscConfig+0x4c>
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2b0c      	cmp	r3, #12
 80022d4:	f040 808b 	bne.w	80023ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	f040 8087 	bne.w	80023ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022e0:	4b88      	ldr	r3, [pc, #544]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_OscConfig+0x64>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e3d9      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1a      	ldr	r2, [r3, #32]
 80022fc:	4b81      	ldr	r3, [pc, #516]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d004      	beq.n	8002312 <HAL_RCC_OscConfig+0x7e>
 8002308:	4b7e      	ldr	r3, [pc, #504]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002310:	e005      	b.n	800231e <HAL_RCC_OscConfig+0x8a>
 8002312:	4b7c      	ldr	r3, [pc, #496]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002314:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800231e:	4293      	cmp	r3, r2
 8002320:	d223      	bcs.n	800236a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fd54 	bl	8002dd4 <RCC_SetFlashLatencyFromMSIRange>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e3ba      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002336:	4b73      	ldr	r3, [pc, #460]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a72      	ldr	r2, [pc, #456]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 800233c:	f043 0308 	orr.w	r3, r3, #8
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b70      	ldr	r3, [pc, #448]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	496d      	ldr	r1, [pc, #436]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002354:	4b6b      	ldr	r3, [pc, #428]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	4968      	ldr	r1, [pc, #416]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
 8002368:	e025      	b.n	80023b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800236a:	4b66      	ldr	r3, [pc, #408]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a65      	ldr	r2, [pc, #404]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002370:	f043 0308 	orr.w	r3, r3, #8
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b63      	ldr	r3, [pc, #396]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4960      	ldr	r1, [pc, #384]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002388:	4b5e      	ldr	r3, [pc, #376]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	495b      	ldr	r1, [pc, #364]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fd14 	bl	8002dd4 <RCC_SetFlashLatencyFromMSIRange>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e37a      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023b6:	f000 fc81 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 80023ba:	4602      	mov	r2, r0
 80023bc:	4b51      	ldr	r3, [pc, #324]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	4950      	ldr	r1, [pc, #320]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80023c8:	5ccb      	ldrb	r3, [r1, r3]
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	fa22 f303 	lsr.w	r3, r2, r3
 80023d2:	4a4e      	ldr	r2, [pc, #312]	@ (800250c <HAL_RCC_OscConfig+0x278>)
 80023d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002510 <HAL_RCC_OscConfig+0x27c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fdb4 	bl	8001f48 <HAL_InitTick>
 80023e0:	4603      	mov	r3, r0
 80023e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d052      	beq.n	8002490 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	e35e      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d032      	beq.n	800245c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023f6:	4b43      	ldr	r3, [pc, #268]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a42      	ldr	r2, [pc, #264]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002402:	f7ff fdf1 	bl	8001fe8 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800240a:	f7ff fded 	bl	8001fe8 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e347      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800241c:	4b39      	ldr	r3, [pc, #228]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002428:	4b36      	ldr	r3, [pc, #216]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a35      	ldr	r2, [pc, #212]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 800242e:	f043 0308 	orr.w	r3, r3, #8
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b33      	ldr	r3, [pc, #204]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4930      	ldr	r1, [pc, #192]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002446:	4b2f      	ldr	r3, [pc, #188]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	492b      	ldr	r1, [pc, #172]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
 800245a:	e01a      	b.n	8002492 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800245c:	4b29      	ldr	r3, [pc, #164]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a28      	ldr	r2, [pc, #160]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002468:	f7ff fdbe 	bl	8001fe8 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002470:	f7ff fdba 	bl	8001fe8 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e314      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002482:	4b20      	ldr	r3, [pc, #128]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x1dc>
 800248e:	e000      	b.n	8002492 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002490:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d073      	beq.n	8002586 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_OscConfig+0x21c>
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b0c      	cmp	r3, #12
 80024a8:	d10e      	bne.n	80024c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d10b      	bne.n	80024c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d063      	beq.n	8002584 <HAL_RCC_OscConfig+0x2f0>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d15f      	bne.n	8002584 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e2f1      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d0:	d106      	bne.n	80024e0 <HAL_RCC_OscConfig+0x24c>
 80024d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e025      	b.n	800252c <HAL_RCC_OscConfig+0x298>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e8:	d114      	bne.n	8002514 <HAL_RCC_OscConfig+0x280>
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 80024f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a02      	ldr	r2, [pc, #8]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e013      	b.n	800252c <HAL_RCC_OscConfig+0x298>
 8002504:	40021000 	.word	0x40021000
 8002508:	08002f04 	.word	0x08002f04
 800250c:	20000004 	.word	0x20000004
 8002510:	20000008 	.word	0x20000008
 8002514:	4ba0      	ldr	r3, [pc, #640]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a9f      	ldr	r2, [pc, #636]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 800251a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b9d      	ldr	r3, [pc, #628]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a9c      	ldr	r2, [pc, #624]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 8002526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800252a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7ff fd58 	bl	8001fe8 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800253c:	f7ff fd54 	bl	8001fe8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	@ 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e2ae      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254e:	4b92      	ldr	r3, [pc, #584]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x2a8>
 800255a:	e014      	b.n	8002586 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7ff fd44 	bl	8001fe8 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002564:	f7ff fd40 	bl	8001fe8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	@ 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e29a      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002576:	4b88      	ldr	r3, [pc, #544]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x2d0>
 8002582:	e000      	b.n	8002586 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d060      	beq.n	8002654 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_OscConfig+0x310>
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d119      	bne.n	80025d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d116      	bne.n	80025d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a4:	4b7c      	ldr	r3, [pc, #496]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_OscConfig+0x328>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e277      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b76      	ldr	r3, [pc, #472]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	061b      	lsls	r3, r3, #24
 80025ca:	4973      	ldr	r1, [pc, #460]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d0:	e040      	b.n	8002654 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d023      	beq.n	8002622 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025da:	4b6f      	ldr	r3, [pc, #444]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6e      	ldr	r2, [pc, #440]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7ff fcff 	bl	8001fe8 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ee:	f7ff fcfb 	bl	8001fe8 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e255      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002600:	4b65      	ldr	r3, [pc, #404]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4b62      	ldr	r3, [pc, #392]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	061b      	lsls	r3, r3, #24
 800261a:	495f      	ldr	r1, [pc, #380]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
 8002620:	e018      	b.n	8002654 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002622:	4b5d      	ldr	r3, [pc, #372]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a5c      	ldr	r2, [pc, #368]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 8002628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800262c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7ff fcdb 	bl	8001fe8 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002636:	f7ff fcd7 	bl	8001fe8 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e231      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002648:	4b53      	ldr	r3, [pc, #332]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d03c      	beq.n	80026da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01c      	beq.n	80026a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002668:	4b4b      	ldr	r3, [pc, #300]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800266e:	4a4a      	ldr	r2, [pc, #296]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7ff fcb6 	bl	8001fe8 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002680:	f7ff fcb2 	bl	8001fe8 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e20c      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002692:	4b41      	ldr	r3, [pc, #260]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 8002694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ef      	beq.n	8002680 <HAL_RCC_OscConfig+0x3ec>
 80026a0:	e01b      	b.n	80026da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 80026a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a8:	4a3b      	ldr	r2, [pc, #236]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b2:	f7ff fc99 	bl	8001fe8 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ba:	f7ff fc95 	bl	8001fe8 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e1ef      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026cc:	4b32      	ldr	r3, [pc, #200]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 80026ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1ef      	bne.n	80026ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80a6 	beq.w	8002834 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e8:	2300      	movs	r3, #0
 80026ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10d      	bne.n	8002714 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f8:	4b27      	ldr	r3, [pc, #156]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fc:	4a26      	ldr	r2, [pc, #152]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 80026fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002702:	6593      	str	r3, [r2, #88]	@ 0x58
 8002704:	4b24      	ldr	r3, [pc, #144]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002710:	2301      	movs	r3, #1
 8002712:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002714:	4b21      	ldr	r3, [pc, #132]	@ (800279c <HAL_RCC_OscConfig+0x508>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d118      	bne.n	8002752 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002720:	4b1e      	ldr	r3, [pc, #120]	@ (800279c <HAL_RCC_OscConfig+0x508>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1d      	ldr	r2, [pc, #116]	@ (800279c <HAL_RCC_OscConfig+0x508>)
 8002726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800272a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272c:	f7ff fc5c 	bl	8001fe8 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002734:	f7ff fc58 	bl	8001fe8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e1b2      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002746:	4b15      	ldr	r3, [pc, #84]	@ (800279c <HAL_RCC_OscConfig+0x508>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d108      	bne.n	800276c <HAL_RCC_OscConfig+0x4d8>
 800275a:	4b0f      	ldr	r3, [pc, #60]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002760:	4a0d      	ldr	r2, [pc, #52]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800276a:	e029      	b.n	80027c0 <HAL_RCC_OscConfig+0x52c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b05      	cmp	r3, #5
 8002772:	d115      	bne.n	80027a0 <HAL_RCC_OscConfig+0x50c>
 8002774:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277a:	4a07      	ldr	r2, [pc, #28]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002784:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278a:	4a03      	ldr	r2, [pc, #12]	@ (8002798 <HAL_RCC_OscConfig+0x504>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002794:	e014      	b.n	80027c0 <HAL_RCC_OscConfig+0x52c>
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	40007000 	.word	0x40007000
 80027a0:	4b9a      	ldr	r3, [pc, #616]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a6:	4a99      	ldr	r2, [pc, #612]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027b0:	4b96      	ldr	r3, [pc, #600]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b6:	4a95      	ldr	r2, [pc, #596]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 80027b8:	f023 0304 	bic.w	r3, r3, #4
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d016      	beq.n	80027f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7ff fc0e 	bl	8001fe8 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7ff fc0a 	bl	8001fe8 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e162      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e6:	4b89      	ldr	r3, [pc, #548]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ed      	beq.n	80027d0 <HAL_RCC_OscConfig+0x53c>
 80027f4:	e015      	b.n	8002822 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7ff fbf7 	bl	8001fe8 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7ff fbf3 	bl	8001fe8 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e14b      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002814:	4b7d      	ldr	r3, [pc, #500]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1ed      	bne.n	80027fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002822:	7ffb      	ldrb	r3, [r7, #31]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002828:	4b78      	ldr	r3, [pc, #480]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282c:	4a77      	ldr	r2, [pc, #476]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 800282e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002832:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b00      	cmp	r3, #0
 800283e:	d03c      	beq.n	80028ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01c      	beq.n	8002882 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002848:	4b70      	ldr	r3, [pc, #448]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 800284a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800284e:	4a6f      	ldr	r2, [pc, #444]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7ff fbc6 	bl	8001fe8 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002860:	f7ff fbc2 	bl	8001fe8 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e11c      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002872:	4b66      	ldr	r3, [pc, #408]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 8002874:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ef      	beq.n	8002860 <HAL_RCC_OscConfig+0x5cc>
 8002880:	e01b      	b.n	80028ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002882:	4b62      	ldr	r3, [pc, #392]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 8002884:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002888:	4a60      	ldr	r2, [pc, #384]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 800288a:	f023 0301 	bic.w	r3, r3, #1
 800288e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002892:	f7ff fba9 	bl	8001fe8 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800289a:	f7ff fba5 	bl	8001fe8 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e0ff      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028ac:	4b57      	ldr	r3, [pc, #348]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 80028ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1ef      	bne.n	800289a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80f3 	beq.w	8002aaa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	f040 80c9 	bne.w	8002a60 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028ce:	4b4f      	ldr	r3, [pc, #316]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f003 0203 	and.w	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028de:	429a      	cmp	r2, r3
 80028e0:	d12c      	bne.n	800293c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ec:	3b01      	subs	r3, #1
 80028ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d123      	bne.n	800293c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d11b      	bne.n	800293c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d113      	bne.n	800293c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	3b01      	subs	r3, #1
 8002922:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d109      	bne.n	800293c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	3b01      	subs	r3, #1
 8002936:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d06b      	beq.n	8002a14 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b0c      	cmp	r3, #12
 8002940:	d062      	beq.n	8002a08 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002942:	4b32      	ldr	r3, [pc, #200]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e0ac      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002952:	4b2e      	ldr	r3, [pc, #184]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2d      	ldr	r2, [pc, #180]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 8002958:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800295c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800295e:	f7ff fb43 	bl	8001fe8 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002966:	f7ff fb3f 	bl	8001fe8 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e099      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002978:	4b24      	ldr	r3, [pc, #144]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f0      	bne.n	8002966 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002984:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	4b21      	ldr	r3, [pc, #132]	@ (8002a10 <HAL_RCC_OscConfig+0x77c>)
 800298a:	4013      	ands	r3, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002994:	3a01      	subs	r2, #1
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	4311      	orrs	r1, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800299e:	0212      	lsls	r2, r2, #8
 80029a0:	4311      	orrs	r1, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029a6:	0852      	lsrs	r2, r2, #1
 80029a8:	3a01      	subs	r2, #1
 80029aa:	0552      	lsls	r2, r2, #21
 80029ac:	4311      	orrs	r1, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029b2:	0852      	lsrs	r2, r2, #1
 80029b4:	3a01      	subs	r2, #1
 80029b6:	0652      	lsls	r2, r2, #25
 80029b8:	4311      	orrs	r1, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029be:	06d2      	lsls	r2, r2, #27
 80029c0:	430a      	orrs	r2, r1
 80029c2:	4912      	ldr	r1, [pc, #72]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029c8:	4b10      	ldr	r3, [pc, #64]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0f      	ldr	r2, [pc, #60]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 80029ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029d4:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a0c      	ldr	r2, [pc, #48]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 80029da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029e0:	f7ff fb02 	bl	8001fe8 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e8:	f7ff fafe 	bl	8001fe8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e058      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fa:	4b04      	ldr	r3, [pc, #16]	@ (8002a0c <HAL_RCC_OscConfig+0x778>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a06:	e050      	b.n	8002aaa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e04f      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a14:	4b27      	ldr	r3, [pc, #156]	@ (8002ab4 <HAL_RCC_OscConfig+0x820>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d144      	bne.n	8002aaa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a20:	4b24      	ldr	r3, [pc, #144]	@ (8002ab4 <HAL_RCC_OscConfig+0x820>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a23      	ldr	r2, [pc, #140]	@ (8002ab4 <HAL_RCC_OscConfig+0x820>)
 8002a26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a2c:	4b21      	ldr	r3, [pc, #132]	@ (8002ab4 <HAL_RCC_OscConfig+0x820>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4a20      	ldr	r2, [pc, #128]	@ (8002ab4 <HAL_RCC_OscConfig+0x820>)
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a38:	f7ff fad6 	bl	8001fe8 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7ff fad2 	bl	8001fe8 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e02c      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a52:	4b18      	ldr	r3, [pc, #96]	@ (8002ab4 <HAL_RCC_OscConfig+0x820>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x7ac>
 8002a5e:	e024      	b.n	8002aaa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	d01f      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <HAL_RCC_OscConfig+0x820>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a12      	ldr	r2, [pc, #72]	@ (8002ab4 <HAL_RCC_OscConfig+0x820>)
 8002a6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7ff fab9 	bl	8001fe8 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7a:	f7ff fab5 	bl	8001fe8 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e00f      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8c:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <HAL_RCC_OscConfig+0x820>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <HAL_RCC_OscConfig+0x820>)
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	4905      	ldr	r1, [pc, #20]	@ (8002ab4 <HAL_RCC_OscConfig+0x820>)
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <HAL_RCC_OscConfig+0x824>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60cb      	str	r3, [r1, #12]
 8002aa4:	e001      	b.n	8002aaa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	feeefffc 	.word	0xfeeefffc

08002abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0e7      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b75      	ldr	r3, [pc, #468]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d910      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b72      	ldr	r3, [pc, #456]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 0207 	bic.w	r2, r3, #7
 8002ae6:	4970      	ldr	r1, [pc, #448]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b6e      	ldr	r3, [pc, #440]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0cf      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d010      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	4b66      	ldr	r3, [pc, #408]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d908      	bls.n	8002b2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b1c:	4b63      	ldr	r3, [pc, #396]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4960      	ldr	r1, [pc, #384]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d04c      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b42:	4b5a      	ldr	r3, [pc, #360]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d121      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e0a6      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b5a:	4b54      	ldr	r3, [pc, #336]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d115      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e09a      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b72:	4b4e      	ldr	r3, [pc, #312]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e08e      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b82:	4b4a      	ldr	r3, [pc, #296]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e086      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4b46      	ldr	r3, [pc, #280]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4943      	ldr	r1, [pc, #268]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba4:	f7ff fa20 	bl	8001fe8 <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bac:	f7ff fa1c 	bl	8001fe8 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e06e      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 020c 	and.w	r2, r3, #12
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1eb      	bne.n	8002bac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d010      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	4b31      	ldr	r3, [pc, #196]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d208      	bcs.n	8002c02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	492b      	ldr	r1, [pc, #172]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c02:	4b29      	ldr	r3, [pc, #164]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d210      	bcs.n	8002c32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c10:	4b25      	ldr	r3, [pc, #148]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 0207 	bic.w	r2, r3, #7
 8002c18:	4923      	ldr	r1, [pc, #140]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c20:	4b21      	ldr	r3, [pc, #132]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e036      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	4918      	ldr	r1, [pc, #96]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d009      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5c:	4b13      	ldr	r3, [pc, #76]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4910      	ldr	r1, [pc, #64]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c70:	f000 f824 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b0d      	ldr	r3, [pc, #52]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	490b      	ldr	r1, [pc, #44]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f4>)
 8002c82:	5ccb      	ldrb	r3, [r1, r3]
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8c:	4a09      	ldr	r2, [pc, #36]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c90:	4b09      	ldr	r3, [pc, #36]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1fc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff f957 	bl	8001f48 <HAL_InitTick>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c9e:	7afb      	ldrb	r3, [r7, #11]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40022000 	.word	0x40022000
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	08002f04 	.word	0x08002f04
 8002cb4:	20000004 	.word	0x20000004
 8002cb8:	20000008 	.word	0x20000008

08002cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	@ 0x24
 8002cc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cca:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d121      	bne.n	8002d2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d11e      	bne.n	8002d2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cf0:	4b34      	ldr	r3, [pc, #208]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cfc:	4b31      	ldr	r3, [pc, #196]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	e005      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d18:	4a2b      	ldr	r2, [pc, #172]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10d      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d102      	bne.n	8002d3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d34:	4b25      	ldr	r3, [pc, #148]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	e004      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d40:	4b23      	ldr	r3, [pc, #140]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d134      	bne.n	8002db4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d003      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0xac>
 8002d60:	e005      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d64:	617b      	str	r3, [r7, #20]
      break;
 8002d66:	e005      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d68:	4b19      	ldr	r3, [pc, #100]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d6a:	617b      	str	r3, [r7, #20]
      break;
 8002d6c:	e002      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	617b      	str	r3, [r7, #20]
      break;
 8002d72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d74:	4b13      	ldr	r3, [pc, #76]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	3301      	adds	r3, #1
 8002d80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d82:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	fb03 f202 	mul.w	r2, r3, r2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	0e5b      	lsrs	r3, r3, #25
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	3301      	adds	r3, #1
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002db4:	69bb      	ldr	r3, [r7, #24]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3724      	adds	r7, #36	@ 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	08002f14 	.word	0x08002f14
 8002dcc:	00f42400 	.word	0x00f42400
 8002dd0:	007a1200 	.word	0x007a1200

08002dd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002de0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dec:	f7ff f9ee 	bl	80021cc <HAL_PWREx_GetVoltageRange>
 8002df0:	6178      	str	r0, [r7, #20]
 8002df2:	e014      	b.n	8002e1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df4:	4b25      	ldr	r3, [pc, #148]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df8:	4a24      	ldr	r2, [pc, #144]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e00:	4b22      	ldr	r3, [pc, #136]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e0c:	f7ff f9de 	bl	80021cc <HAL_PWREx_GetVoltageRange>
 8002e10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e12:	4b1e      	ldr	r3, [pc, #120]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e16:	4a1d      	ldr	r2, [pc, #116]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e24:	d10b      	bne.n	8002e3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b80      	cmp	r3, #128	@ 0x80
 8002e2a:	d919      	bls.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e30:	d902      	bls.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e32:	2302      	movs	r3, #2
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	e013      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e38:	2301      	movs	r3, #1
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	e010      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b80      	cmp	r3, #128	@ 0x80
 8002e42:	d902      	bls.n	8002e4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e44:	2303      	movs	r3, #3
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	e00a      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b80      	cmp	r3, #128	@ 0x80
 8002e4e:	d102      	bne.n	8002e56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e50:	2302      	movs	r3, #2
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	e004      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b70      	cmp	r3, #112	@ 0x70
 8002e5a:	d101      	bne.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 0207 	bic.w	r2, r3, #7
 8002e68:	4909      	ldr	r1, [pc, #36]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e70:	4b07      	ldr	r3, [pc, #28]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d001      	beq.n	8002e82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40022000 	.word	0x40022000

08002e94 <memset>:
 8002e94:	4402      	add	r2, r0
 8002e96:	4603      	mov	r3, r0
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d100      	bne.n	8002e9e <memset+0xa>
 8002e9c:	4770      	bx	lr
 8002e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ea2:	e7f9      	b.n	8002e98 <memset+0x4>

08002ea4 <__libc_init_array>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	4d0d      	ldr	r5, [pc, #52]	@ (8002edc <__libc_init_array+0x38>)
 8002ea8:	4c0d      	ldr	r4, [pc, #52]	@ (8002ee0 <__libc_init_array+0x3c>)
 8002eaa:	1b64      	subs	r4, r4, r5
 8002eac:	10a4      	asrs	r4, r4, #2
 8002eae:	2600      	movs	r6, #0
 8002eb0:	42a6      	cmp	r6, r4
 8002eb2:	d109      	bne.n	8002ec8 <__libc_init_array+0x24>
 8002eb4:	4d0b      	ldr	r5, [pc, #44]	@ (8002ee4 <__libc_init_array+0x40>)
 8002eb6:	4c0c      	ldr	r4, [pc, #48]	@ (8002ee8 <__libc_init_array+0x44>)
 8002eb8:	f000 f818 	bl	8002eec <_init>
 8002ebc:	1b64      	subs	r4, r4, r5
 8002ebe:	10a4      	asrs	r4, r4, #2
 8002ec0:	2600      	movs	r6, #0
 8002ec2:	42a6      	cmp	r6, r4
 8002ec4:	d105      	bne.n	8002ed2 <__libc_init_array+0x2e>
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ecc:	4798      	blx	r3
 8002ece:	3601      	adds	r6, #1
 8002ed0:	e7ee      	b.n	8002eb0 <__libc_init_array+0xc>
 8002ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed6:	4798      	blx	r3
 8002ed8:	3601      	adds	r6, #1
 8002eda:	e7f2      	b.n	8002ec2 <__libc_init_array+0x1e>
 8002edc:	08002f44 	.word	0x08002f44
 8002ee0:	08002f44 	.word	0x08002f44
 8002ee4:	08002f44 	.word	0x08002f44
 8002ee8:	08002f48 	.word	0x08002f48

08002eec <_init>:
 8002eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eee:	bf00      	nop
 8002ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef2:	bc08      	pop	{r3}
 8002ef4:	469e      	mov	lr, r3
 8002ef6:	4770      	bx	lr

08002ef8 <_fini>:
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efa:	bf00      	nop
 8002efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002efe:	bc08      	pop	{r3}
 8002f00:	469e      	mov	lr, r3
 8002f02:	4770      	bx	lr
