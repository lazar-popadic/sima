
Simeon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001960  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08001aec  08001aec  00011aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d3c  08001d3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d3c  08001d3c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d3c  08001d3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d3c  08001d3c  00011d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d40  08001d40  00011d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000000c  08001d50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08001d50  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004cce  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001344  00000000  00000000  00024d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005d0  00000000  00000000  00026098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000432  00000000  00000000  00026668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e70c  00000000  00000000  00026a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000743b  00000000  00000000  000451a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5d59  00000000  00000000  0004c5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001490  00000000  00000000  0010233c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001037cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001ad4 	.word	0x08001ad4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001ad4 	.word	0x08001ad4

080001cc <xl_angle_move>:
	}
}

void
xl_angle_move (uint8_t id, uint16_t angle)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	460a      	mov	r2, r1
 80001d6:	71fb      	strb	r3, [r7, #7]
 80001d8:	4613      	mov	r3, r2
 80001da:	80bb      	strh	r3, [r7, #4]

	  uint8_t xl_move[14] =
 80001dc:	23ff      	movs	r3, #255	; 0xff
 80001de:	733b      	strb	r3, [r7, #12]
 80001e0:	23ff      	movs	r3, #255	; 0xff
 80001e2:	737b      	strb	r3, [r7, #13]
 80001e4:	23fd      	movs	r3, #253	; 0xfd
 80001e6:	73bb      	strb	r3, [r7, #14]
 80001e8:	2300      	movs	r3, #0
 80001ea:	73fb      	strb	r3, [r7, #15]
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	743b      	strb	r3, [r7, #16]
 80001f0:	2307      	movs	r3, #7
 80001f2:	747b      	strb	r3, [r7, #17]
 80001f4:	2300      	movs	r3, #0
 80001f6:	74bb      	strb	r3, [r7, #18]
 80001f8:	2303      	movs	r3, #3
 80001fa:	74fb      	strb	r3, [r7, #19]
 80001fc:	231e      	movs	r3, #30
 80001fe:	753b      	strb	r3, [r7, #20]
 8000200:	2300      	movs	r3, #0
 8000202:	757b      	strb	r3, [r7, #21]
	    { 0xff, 0xff, 0xfd, 0x00, id, 0x07, 0x00, 0x03, 0x1e, 0x00,
	    		DXL_LOBYTE(angle), DXL_HIBYTE(angle), 0x00, 0x00};
 8000204:	88bb      	ldrh	r3, [r7, #4]
 8000206:	b2db      	uxtb	r3, r3
	  uint8_t xl_move[14] =
 8000208:	75bb      	strb	r3, [r7, #22]
	    		DXL_LOBYTE(angle), DXL_HIBYTE(angle), 0x00, 0x00};
 800020a:	88bb      	ldrh	r3, [r7, #4]
 800020c:	0a1b      	lsrs	r3, r3, #8
 800020e:	b29b      	uxth	r3, r3
 8000210:	b2db      	uxtb	r3, r3
	  uint8_t xl_move[14] =
 8000212:	75fb      	strb	r3, [r7, #23]
 8000214:	2300      	movs	r3, #0
 8000216:	763b      	strb	r3, [r7, #24]
 8000218:	2300      	movs	r3, #0
 800021a:	767b      	strb	r3, [r7, #25]

	  uint16_t crc16;

	  crc16 = update_crc (0, xl_move, 12);
 800021c:	f107 030c 	add.w	r3, r7, #12
 8000220:	220c      	movs	r2, #12
 8000222:	4619      	mov	r1, r3
 8000224:	2000      	movs	r0, #0
 8000226:	f000 f821 	bl	800026c <update_crc>
 800022a:	4603      	mov	r3, r0
 800022c:	83bb      	strh	r3, [r7, #28]
	  xl_move[12] = DXL_LOBYTE(crc16); //crc_l
 800022e:	8bbb      	ldrh	r3, [r7, #28]
 8000230:	b2db      	uxtb	r3, r3
 8000232:	763b      	strb	r3, [r7, #24]
	  xl_move[13] = DXL_HIBYTE(crc16); //crc_h
 8000234:	8bbb      	ldrh	r3, [r7, #28]
 8000236:	0a1b      	lsrs	r3, r3, #8
 8000238:	b29b      	uxth	r3, r3
 800023a:	b2db      	uxtb	r3, r3
 800023c:	767b      	strb	r3, [r7, #25]

	  for (uint8_t i = 0; i < 14; i++)
 800023e:	2300      	movs	r3, #0
 8000240:	77fb      	strb	r3, [r7, #31]
 8000242:	e00a      	b.n	800025a <xl_angle_move+0x8e>
	    {
	      UART_send_byte (xl_move[i]);
 8000244:	7ffb      	ldrb	r3, [r7, #31]
 8000246:	3320      	adds	r3, #32
 8000248:	443b      	add	r3, r7
 800024a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800024e:	4618      	mov	r0, r3
 8000250:	f000 fa92 	bl	8000778 <UART_send_byte>
	  for (uint8_t i = 0; i < 14; i++)
 8000254:	7ffb      	ldrb	r3, [r7, #31]
 8000256:	3301      	adds	r3, #1
 8000258:	77fb      	strb	r3, [r7, #31]
 800025a:	7ffb      	ldrb	r3, [r7, #31]
 800025c:	2b0d      	cmp	r3, #13
 800025e:	d9f1      	bls.n	8000244 <xl_angle_move+0x78>
	    }
}
 8000260:	bf00      	nop
 8000262:	bf00      	nop
 8000264:	3720      	adds	r7, #32
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <update_crc>:

uint16_t
update_crc (uint16_t crc_accum, unsigned char *data_blk_ptr,
	    uint16_t data_blk_size)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000272:	af00      	add	r7, sp, #0
 8000274:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000278:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800027c:	6019      	str	r1, [r3, #0]
 800027e:	4611      	mov	r1, r2
 8000280:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000284:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000288:	4602      	mov	r2, r0
 800028a:	801a      	strh	r2, [r3, #0]
 800028c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000290:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000294:	460a      	mov	r2, r1
 8000296:	801a      	strh	r2, [r3, #0]
	uint16_t i, j;

		uint16_t crc_table[256] = {
 8000298:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800029c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80002a0:	4a28      	ldr	r2, [pc, #160]	; (8000344 <update_crc+0xd8>)
 80002a2:	4618      	mov	r0, r3
 80002a4:	4611      	mov	r1, r2
 80002a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002aa:	461a      	mov	r2, r3
 80002ac:	f001 fc04 	bl	8001ab8 <memcpy>

		};



		for(j = 0; j < data_blk_size; j++)
 80002b0:	2300      	movs	r3, #0
 80002b2:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 80002b6:	e031      	b.n	800031c <update_crc+0xb0>

		{

			i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 80002b8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80002bc:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80002c0:	881b      	ldrh	r3, [r3, #0]
 80002c2:	0a1b      	lsrs	r3, r3, #8
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80002ca:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80002ce:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 80002d2:	6809      	ldr	r1, [r1, #0]
 80002d4:	440b      	add	r3, r1
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	4053      	eors	r3, r2
 80002dc:	b29b      	uxth	r3, r3
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c

			crc_accum = (crc_accum << 8) ^ crc_table[i];
 80002e4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80002e8:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	021b      	lsls	r3, r3, #8
 80002f0:	b21a      	sxth	r2, r3
 80002f2:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 80002f6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80002fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80002fe:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000302:	b21b      	sxth	r3, r3
 8000304:	4053      	eors	r3, r2
 8000306:	b21a      	sxth	r2, r3
 8000308:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800030c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000310:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < data_blk_size; j++)
 8000312:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000316:	3301      	adds	r3, #1
 8000318:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800031c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000320:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000324:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	429a      	cmp	r2, r3
 800032c:	d3c4      	bcc.n	80002b8 <update_crc+0x4c>

		}



		return crc_accum;
 800032e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000332:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000336:	881b      	ldrh	r3, [r3, #0]
}
 8000338:	4618      	mov	r0, r3
 800033a:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	08001aec 	.word	0x08001aec

08000348 <io>:
static void
portB_init();

void
io ()
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  portB_init ();
 800034c:	f000 f802 	bl	8000354 <portB_init>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}

08000354 <portB_init>:

static void
portB_init()
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (0b1 << 1);
 8000358:	4b14      	ldr	r3, [pc, #80]	; (80003ac <portB_init+0x58>)
 800035a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035c:	4a13      	ldr	r2, [pc, #76]	; (80003ac <portB_init+0x58>)
 800035e:	f043 0302 	orr.w	r3, r3, #2
 8000362:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB->MODER &= ~(0b11 << 2 * 3);
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <portB_init+0x5c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a11      	ldr	r2, [pc, #68]	; (80003b0 <portB_init+0x5c>)
 800036a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800036e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << 2 * 3);
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <portB_init+0x5c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <portB_init+0x5c>)
 8000376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800037a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(0b1 << 3);
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <portB_init+0x5c>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <portB_init+0x5c>)
 8000382:	f023 0308 	bic.w	r3, r3, #8
 8000386:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (0b11 << 2 * 3);
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <portB_init+0x5c>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <portB_init+0x5c>)
 800038e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000392:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~(0b11 << 2 * 3);
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <portB_init+0x5c>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <portB_init+0x5c>)
 800039a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800039e:	60d3      	str	r3, [r2, #12]
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000
 80003b0:	48000400 	.word	0x48000400

080003b4 <tajmer_init>:
volatile uint32_t sys_time_ms = 0;
bool flag_delay = true;

void
tajmer_init()
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
 tim2_init();
 80003b8:	f000 f802 	bl	80003c0 <tim2_init>
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}

080003c0 <tim2_init>:

static void
tim2_init()
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= (0b1 << 0);
 80003c6:	4b2c      	ldr	r3, [pc, #176]	; (8000478 <tim2_init+0xb8>)
 80003c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ca:	4a2b      	ldr	r2, [pc, #172]	; (8000478 <tim2_init+0xb8>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6593      	str	r3, [r2, #88]	; 0x58

	TIM2-> PSC = 80-1; //80MHz -> 1MHz
 80003d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d6:	224f      	movs	r2, #79	; 0x4f
 80003d8:	629a      	str	r2, [r3, #40]	; 0x28

	TIM2-> ARR = 1000-1; //1MHz -> 1kHz
 80003da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003e2:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 &= ~((0b1 << 1) || (0b1 << 2));
 80003e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ee:	f023 0301 	bic.w	r3, r3, #1
 80003f2:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= (0b1 << 0);
 80003f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	6153      	str	r3, [r2, #20]

	TIM2->DIER |= (0b1 << 0);
 8000404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	60d3      	str	r3, [r2, #12]

	while (!(TIM2->SR & (0b1 << 0)));
 8000414:	bf00      	nop
 8000416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800041a:	691b      	ldr	r3, [r3, #16]
 800041c:	f003 0301 	and.w	r3, r3, #1
 8000420:	2b00      	cmp	r3, #0
 8000422:	d0f8      	beq.n	8000416 <tim2_init+0x56>

	TIM2->SR &= ~(0b1 << 0);
 8000424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000428:	691b      	ldr	r3, [r3, #16]
 800042a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800042e:	f023 0301 	bic.w	r3, r3, #1
 8000432:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= (0b1 << 2);
 8000434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6013      	str	r3, [r2, #0]

	uint8_t const TIM2_PREKID = 28;
 8000444:	231c      	movs	r3, #28
 8000446:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[0] |= (0b1 << TIM2_PREKID);
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <tim2_init+0xbc>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	79fa      	ldrb	r2, [r7, #7]
 800044e:	2101      	movs	r1, #1
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	4611      	mov	r1, r2
 8000456:	4a09      	ldr	r2, [pc, #36]	; (800047c <tim2_init+0xbc>)
 8000458:	430b      	orrs	r3, r1
 800045a:	6013      	str	r3, [r2, #0]

	TIM2->CR1 |= (0b1 << 0);
 800045c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	6013      	str	r3, [r2, #0]
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000
 800047c:	e000e100 	.word	0xe000e100

08000480 <TajmerDelay>:
    return false;
  flag_delay = true;
  return true;
}

void TajmerDelay(uint32_t ms) {
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	uint32_t PocVreme = sys_time_ms;
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <TajmerDelay+0x30>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	60fb      	str	r3, [r7, #12]
	while (sys_time_ms <= PocVreme + ms) {
 800048e:	e000      	b.n	8000492 <TajmerDelay+0x12>
		__NOP();
 8000490:	bf00      	nop
	while (sys_time_ms <= PocVreme + ms) {
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	441a      	add	r2, r3
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <TajmerDelay+0x30>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	429a      	cmp	r2, r3
 800049e:	d2f7      	bcs.n	8000490 <TajmerDelay+0x10>
	}

}
 80004a0:	bf00      	nop
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	20000028 	.word	0x20000028

080004b4 <TIM2_IRQHandler>:

void
TIM2_IRQHandler ()
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  // poziva se svake milisekunde
  // proveri da li je stvarno TIM2 pozvao rutinu
  if ((TIM2->SR & (0b1 << 0)) == (0b1 << 0))
 80004b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004bc:	691b      	ldr	r3, [r3, #16]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d10c      	bne.n	80004e0 <TIM2_IRQHandler+0x2c>
    {
      TIM2->SR &= ~(0b1 << 0);	// da bi sledeci put mogli da detektujemo prekid
 80004c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ca:	691b      	ldr	r3, [r3, #16]
 80004cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004d0:	f023 0301 	bic.w	r3, r3, #1
 80004d4:	6113      	str	r3, [r2, #16]

      sys_time_ms++;
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <TIM2_IRQHandler+0x38>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	3301      	adds	r3, #1
 80004dc:	4a03      	ldr	r2, [pc, #12]	; (80004ec <TIM2_IRQHandler+0x38>)
 80004de:	6013      	str	r3, [r2, #0]
    }
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000028 	.word	0x20000028

080004f0 <UART_init>:
static void
UART1_init();

void
UART_init()
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	UART1_init();
 80004f4:	f000 f802 	bl	80004fc <UART1_init>
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <UART1_init>:

static void
UART1_init()
{
 80004fc:	b490      	push	{r4, r7}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	//PB6 i PB7 AF7
	RCC->APB2ENR |= (0b1 << 14); //takt na USART1
 8000502:	4b99      	ldr	r3, [pc, #612]	; (8000768 <UART1_init+0x26c>)
 8000504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000506:	4a98      	ldr	r2, [pc, #608]	; (8000768 <UART1_init+0x26c>)
 8000508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800050c:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->AHB2ENR |= (0b1 << 1); //takt za gpioB
 800050e:	4b96      	ldr	r3, [pc, #600]	; (8000768 <UART1_init+0x26c>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	4a95      	ldr	r2, [pc, #596]	; (8000768 <UART1_init+0x26c>)
 8000514:	f043 0302 	orr.w	r3, r3, #2
 8000518:	64d3      	str	r3, [r2, #76]	; 0x4c

	uint8_t const TX_PIN = 6;
 800051a:	2306      	movs	r3, #6
 800051c:	71fb      	strb	r3, [r7, #7]
	uint8_t const RX_PIN = 7;
 800051e:	2307      	movs	r3, #7
 8000520:	71bb      	strb	r3, [r7, #6]

	GPIOB->MODER &= ~(0b11 << TX_PIN * 2);
 8000522:	4b92      	ldr	r3, [pc, #584]	; (800076c <UART1_init+0x270>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	79fa      	ldrb	r2, [r7, #7]
 8000528:	0052      	lsls	r2, r2, #1
 800052a:	2103      	movs	r1, #3
 800052c:	fa01 f202 	lsl.w	r2, r1, r2
 8000530:	43d2      	mvns	r2, r2
 8000532:	4611      	mov	r1, r2
 8000534:	4a8d      	ldr	r2, [pc, #564]	; (800076c <UART1_init+0x270>)
 8000536:	400b      	ands	r3, r1
 8000538:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0b11 << RX_PIN * 2);
 800053a:	4b8c      	ldr	r3, [pc, #560]	; (800076c <UART1_init+0x270>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	79ba      	ldrb	r2, [r7, #6]
 8000540:	0052      	lsls	r2, r2, #1
 8000542:	2103      	movs	r1, #3
 8000544:	fa01 f202 	lsl.w	r2, r1, r2
 8000548:	43d2      	mvns	r2, r2
 800054a:	4611      	mov	r1, r2
 800054c:	4a87      	ldr	r2, [pc, #540]	; (800076c <UART1_init+0x270>)
 800054e:	400b      	ands	r3, r1
 8000550:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << TX_PIN * 2);
 8000552:	4b86      	ldr	r3, [pc, #536]	; (800076c <UART1_init+0x270>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	79fa      	ldrb	r2, [r7, #7]
 8000558:	0052      	lsls	r2, r2, #1
 800055a:	2102      	movs	r1, #2
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	4611      	mov	r1, r2
 8000562:	4a82      	ldr	r2, [pc, #520]	; (800076c <UART1_init+0x270>)
 8000564:	430b      	orrs	r3, r1
 8000566:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << RX_PIN * 2);
 8000568:	4b80      	ldr	r3, [pc, #512]	; (800076c <UART1_init+0x270>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	79ba      	ldrb	r2, [r7, #6]
 800056e:	0052      	lsls	r2, r2, #1
 8000570:	2102      	movs	r1, #2
 8000572:	fa01 f202 	lsl.w	r2, r1, r2
 8000576:	4611      	mov	r1, r2
 8000578:	4a7c      	ldr	r2, [pc, #496]	; (800076c <UART1_init+0x270>)
 800057a:	430b      	orrs	r3, r1
 800057c:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER |= (0b1 << TX_PIN);
 800057e:	4b7b      	ldr	r3, [pc, #492]	; (800076c <UART1_init+0x270>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	79fa      	ldrb	r2, [r7, #7]
 8000584:	2101      	movs	r1, #1
 8000586:	fa01 f202 	lsl.w	r2, r1, r2
 800058a:	4611      	mov	r1, r2
 800058c:	4a77      	ldr	r2, [pc, #476]	; (800076c <UART1_init+0x270>)
 800058e:	430b      	orrs	r3, r1
 8000590:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(0b11 << TX_PIN*2);
 8000592:	4b76      	ldr	r3, [pc, #472]	; (800076c <UART1_init+0x270>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	79fa      	ldrb	r2, [r7, #7]
 8000598:	0052      	lsls	r2, r2, #1
 800059a:	2103      	movs	r1, #3
 800059c:	fa01 f202 	lsl.w	r2, r1, r2
 80005a0:	43d2      	mvns	r2, r2
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a71      	ldr	r2, [pc, #452]	; (800076c <UART1_init+0x270>)
 80005a6:	400b      	ands	r3, r1
 80005a8:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0b01 << TX_PIN*2);
 80005aa:	4b70      	ldr	r3, [pc, #448]	; (800076c <UART1_init+0x270>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	79fa      	ldrb	r2, [r7, #7]
 80005b0:	0052      	lsls	r2, r2, #1
 80005b2:	2101      	movs	r1, #1
 80005b4:	fa01 f202 	lsl.w	r2, r1, r2
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a6c      	ldr	r2, [pc, #432]	; (800076c <UART1_init+0x270>)
 80005bc:	430b      	orrs	r3, r1
 80005be:	60d3      	str	r3, [r2, #12]

	uint8_t const Alt_function = 7;
 80005c0:	2307      	movs	r3, #7
 80005c2:	717b      	strb	r3, [r7, #5]

	GPIOB->AFR[TX_PIN / 8] &= ~(0b1111 << (TX_PIN % 8) * 4);
 80005c4:	4a69      	ldr	r2, [pc, #420]	; (800076c <UART1_init+0x270>)
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	08db      	lsrs	r3, r3, #3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	3308      	adds	r3, #8
 80005ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d2:	79fa      	ldrb	r2, [r7, #7]
 80005d4:	f002 0207 	and.w	r2, r2, #7
 80005d8:	0092      	lsls	r2, r2, #2
 80005da:	210f      	movs	r1, #15
 80005dc:	fa01 f202 	lsl.w	r2, r1, r2
 80005e0:	43d2      	mvns	r2, r2
 80005e2:	4614      	mov	r4, r2
 80005e4:	4961      	ldr	r1, [pc, #388]	; (800076c <UART1_init+0x270>)
 80005e6:	79fa      	ldrb	r2, [r7, #7]
 80005e8:	08d2      	lsrs	r2, r2, #3
 80005ea:	b2d2      	uxtb	r2, r2
 80005ec:	4610      	mov	r0, r2
 80005ee:	ea03 0204 	and.w	r2, r3, r4
 80005f2:	f100 0308 	add.w	r3, r0, #8
 80005f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[TX_PIN / 8] |= (Alt_function << (TX_PIN % 8) * 4);
 80005fa:	4a5c      	ldr	r2, [pc, #368]	; (800076c <UART1_init+0x270>)
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	08db      	lsrs	r3, r3, #3
 8000600:	b2db      	uxtb	r3, r3
 8000602:	3308      	adds	r3, #8
 8000604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000608:	7979      	ldrb	r1, [r7, #5]
 800060a:	79fa      	ldrb	r2, [r7, #7]
 800060c:	f002 0207 	and.w	r2, r2, #7
 8000610:	0092      	lsls	r2, r2, #2
 8000612:	fa01 f202 	lsl.w	r2, r1, r2
 8000616:	4614      	mov	r4, r2
 8000618:	4954      	ldr	r1, [pc, #336]	; (800076c <UART1_init+0x270>)
 800061a:	79fa      	ldrb	r2, [r7, #7]
 800061c:	08d2      	lsrs	r2, r2, #3
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	4610      	mov	r0, r2
 8000622:	ea43 0204 	orr.w	r2, r3, r4
 8000626:	f100 0308 	add.w	r3, r0, #8
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] &= ~(0b1111 << (RX_PIN % 8) * 4);
 800062e:	4a4f      	ldr	r2, [pc, #316]	; (800076c <UART1_init+0x270>)
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	08db      	lsrs	r3, r3, #3
 8000634:	b2db      	uxtb	r3, r3
 8000636:	3308      	adds	r3, #8
 8000638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063c:	79ba      	ldrb	r2, [r7, #6]
 800063e:	f002 0207 	and.w	r2, r2, #7
 8000642:	0092      	lsls	r2, r2, #2
 8000644:	210f      	movs	r1, #15
 8000646:	fa01 f202 	lsl.w	r2, r1, r2
 800064a:	43d2      	mvns	r2, r2
 800064c:	4614      	mov	r4, r2
 800064e:	4947      	ldr	r1, [pc, #284]	; (800076c <UART1_init+0x270>)
 8000650:	79ba      	ldrb	r2, [r7, #6]
 8000652:	08d2      	lsrs	r2, r2, #3
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	4610      	mov	r0, r2
 8000658:	ea03 0204 	and.w	r2, r3, r4
 800065c:	f100 0308 	add.w	r3, r0, #8
 8000660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] |= (Alt_function << (RX_PIN % 8) * 4);
 8000664:	4a41      	ldr	r2, [pc, #260]	; (800076c <UART1_init+0x270>)
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	08db      	lsrs	r3, r3, #3
 800066a:	b2db      	uxtb	r3, r3
 800066c:	3308      	adds	r3, #8
 800066e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000672:	7979      	ldrb	r1, [r7, #5]
 8000674:	79ba      	ldrb	r2, [r7, #6]
 8000676:	f002 0207 	and.w	r2, r2, #7
 800067a:	0092      	lsls	r2, r2, #2
 800067c:	fa01 f202 	lsl.w	r2, r1, r2
 8000680:	4614      	mov	r4, r2
 8000682:	493a      	ldr	r1, [pc, #232]	; (800076c <UART1_init+0x270>)
 8000684:	79ba      	ldrb	r2, [r7, #6]
 8000686:	08d2      	lsrs	r2, r2, #3
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	4610      	mov	r0, r2
 800068c:	ea43 0204 	orr.w	r2, r3, r4
 8000690:	f100 0308 	add.w	r3, r0, #8
 8000694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

     USART1->CR1 &= ~(0b1 << 12);
 8000698:	4b35      	ldr	r3, [pc, #212]	; (8000770 <UART1_init+0x274>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a34      	ldr	r2, [pc, #208]	; (8000770 <UART1_init+0x274>)
 800069e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006a2:	6013      	str	r3, [r2, #0]
     USART1->CR1 &= ~(0b1 << 28); //8 bita
 80006a4:	4b32      	ldr	r3, [pc, #200]	; (8000770 <UART1_init+0x274>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a31      	ldr	r2, [pc, #196]	; (8000770 <UART1_init+0x274>)
 80006aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6013      	str	r3, [r2, #0]
     USART1->CR2 &= ~(0b11 << 12); //1 stop bit
 80006b0:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <UART1_init+0x274>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a2e      	ldr	r2, [pc, #184]	; (8000770 <UART1_init+0x274>)
 80006b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006ba:	6053      	str	r3, [r2, #4]

     USART1->BRR = 0; //baud 9600
 80006bc:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <UART1_init+0x274>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
     USART1->BRR |= ((546 << 4) | (14 << 0));
 80006c2:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <UART1_init+0x274>)
 80006c4:	68db      	ldr	r3, [r3, #12]
 80006c6:	4a2a      	ldr	r2, [pc, #168]	; (8000770 <UART1_init+0x274>)
 80006c8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80006cc:	f043 032e 	orr.w	r3, r3, #46	; 0x2e
 80006d0:	60d3      	str	r3, [r2, #12]

     USART1->CR1 |= (0b11 << 2); //tx & rx pin enable
 80006d2:	4b27      	ldr	r3, [pc, #156]	; (8000770 <UART1_init+0x274>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a26      	ldr	r2, [pc, #152]	; (8000770 <UART1_init+0x274>)
 80006d8:	f043 030c 	orr.w	r3, r3, #12
 80006dc:	6013      	str	r3, [r2, #0]

     USART1->CR1 |= (0b1 << 5); //interrupt enable
 80006de:	4b24      	ldr	r3, [pc, #144]	; (8000770 <UART1_init+0x274>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a23      	ldr	r2, [pc, #140]	; (8000770 <UART1_init+0x274>)
 80006e4:	f043 0320 	orr.w	r3, r3, #32
 80006e8:	6013      	str	r3, [r2, #0]

     USART1->CR2 &= ~(0b1 << 11);
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <UART1_init+0x274>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	4a20      	ldr	r2, [pc, #128]	; (8000770 <UART1_init+0x274>)
 80006f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006f4:	6053      	str	r3, [r2, #4]
     USART1->CR2 &= ~(0b1 << 14);
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <UART1_init+0x274>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <UART1_init+0x274>)
 80006fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000700:	6053      	str	r3, [r2, #4]
     USART1->CR3 &= ~(0b1 << 1);
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <UART1_init+0x274>)
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	4a1a      	ldr	r2, [pc, #104]	; (8000770 <UART1_init+0x274>)
 8000708:	f023 0302 	bic.w	r3, r3, #2
 800070c:	6093      	str	r3, [r2, #8]
     USART1->CR3 &= ~(0b1 << 5);
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <UART1_init+0x274>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	4a17      	ldr	r2, [pc, #92]	; (8000770 <UART1_init+0x274>)
 8000714:	f023 0320 	bic.w	r3, r3, #32
 8000718:	6093      	str	r3, [r2, #8]
     USART1->CR3 |= (0b1 << 3);
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <UART1_init+0x274>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	4a14      	ldr	r2, [pc, #80]	; (8000770 <UART1_init+0x274>)
 8000720:	f043 0308 	orr.w	r3, r3, #8
 8000724:	6093      	str	r3, [r2, #8]

    uint8_t  USART1_INTERRUPT = 37;
 8000726:	2325      	movs	r3, #37	; 0x25
 8000728:	713b      	strb	r3, [r7, #4]
    NVIC->ISER[USART1_INTERRUPT / 32] |= (0b1 <<  USART1_INTERRUPT % 32);
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <UART1_init+0x278>)
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	095b      	lsrs	r3, r3, #5
 8000730:	b2d8      	uxtb	r0, r3
 8000732:	4603      	mov	r3, r0
 8000734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000738:	793a      	ldrb	r2, [r7, #4]
 800073a:	f002 021f 	and.w	r2, r2, #31
 800073e:	2101      	movs	r1, #1
 8000740:	fa01 f202 	lsl.w	r2, r1, r2
 8000744:	4614      	mov	r4, r2
 8000746:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <UART1_init+0x278>)
 8000748:	4601      	mov	r1, r0
 800074a:	4323      	orrs	r3, r4
 800074c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

     USART1-> CR1 |= (0b1 << 0); //usart enable
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <UART1_init+0x274>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <UART1_init+0x274>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	6013      	str	r3, [r2, #0]
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bc90      	pop	{r4, r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000
 800076c:	48000400 	.word	0x48000400
 8000770:	40013800 	.word	0x40013800
 8000774:	e000e100 	.word	0xe000e100

08000778 <UART_send_byte>:

void
UART_send_byte (uint8_t data)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
   USART1->TDR = data; //ovako se salje, kada je  USART1->dr sa desne strane, onda se ponasa kao recieve registar
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <UART_send_byte+0x38>)
 8000784:	79fa      	ldrb	r2, [r7, #7]
 8000786:	b292      	uxth	r2, r2
 8000788:	851a      	strh	r2, [r3, #40]	; 0x28

  while (!( USART1->ISR & (0b1 << 6)))
 800078a:	bf00      	nop
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <UART_send_byte+0x38>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000794:	2b00      	cmp	r3, #0
 8000796:	d0f9      	beq.n	800078c <UART_send_byte+0x14>
	  ;

   USART1->ISR &= ~(0b1 << 6);
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <UART_send_byte+0x38>)
 800079a:	69db      	ldr	r3, [r3, #28]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <UART_send_byte+0x38>)
 800079e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007a2:	61d3      	str	r3, [r2, #28]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	40013800 	.word	0x40013800

080007b4 <UART_write>:

void
UART_write (uint8_t data)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  if (buffer_size != MAX_BUFFER_SIZE)
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <UART_write+0xa0>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b20      	cmp	r3, #32
 80007c6:	d01c      	beq.n	8000802 <UART_write+0x4e>
    {
      buffer[index_write] = data;
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <UART_write+0xa4>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	4619      	mov	r1, r3
 80007d0:	4a22      	ldr	r2, [pc, #136]	; (800085c <UART_write+0xa8>)
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <UART_write+0xa4>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	3301      	adds	r3, #1
 80007de:	425a      	negs	r2, r3
 80007e0:	f003 031f 	and.w	r3, r3, #31
 80007e4:	f002 021f 	and.w	r2, r2, #31
 80007e8:	bf58      	it	pl
 80007ea:	4253      	negpl	r3, r2
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <UART_write+0xa4>)
 80007f0:	701a      	strb	r2, [r3, #0]
      buffer_size++;
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <UART_write+0xa0>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	3301      	adds	r3, #1
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <UART_write+0xa0>)
 80007fe:	701a      	strb	r2, [r3, #0]
    {
      buffer[index_write] = data;
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
    }
}
 8000800:	e022      	b.n	8000848 <UART_write+0x94>
      buffer[index_write] = data;
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <UART_write+0xa4>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	4619      	mov	r1, r3
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <UART_write+0xa8>)
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <UART_write+0xa4>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	3301      	adds	r3, #1
 8000818:	425a      	negs	r2, r3
 800081a:	f003 031f 	and.w	r3, r3, #31
 800081e:	f002 021f 	and.w	r2, r2, #31
 8000822:	bf58      	it	pl
 8000824:	4253      	negpl	r3, r2
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <UART_write+0xa4>)
 800082a:	701a      	strb	r2, [r3, #0]
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <UART_write+0xac>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	3301      	adds	r3, #1
 8000834:	425a      	negs	r2, r3
 8000836:	f003 031f 	and.w	r3, r3, #31
 800083a:	f002 021f 	and.w	r2, r2, #31
 800083e:	bf58      	it	pl
 8000840:	4253      	negpl	r3, r2
 8000842:	b2da      	uxtb	r2, r3
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <UART_write+0xac>)
 8000846:	701a      	strb	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	2000004c 	.word	0x2000004c
 8000858:	2000004d 	.word	0x2000004d
 800085c:	2000002c 	.word	0x2000002c
 8000860:	2000004e 	.word	0x2000004e

08000864 <USART1_IRQHandler>:
    return false;
}

void
USART1_IRQHandler ()
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  if ( USART1->ISR & (0b1 << 5))
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <USART1_IRQHandler+0x24>)
 800086a:	69db      	ldr	r3, [r3, #28]
 800086c:	f003 0320 	and.w	r3, r3, #32
 8000870:	2b00      	cmp	r3, #0
 8000872:	d006      	beq.n	8000882 <USART1_IRQHandler+0x1e>
    {
      UART_write(USART1->RDR);
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <USART1_IRQHandler+0x24>)
 8000876:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000878:	b29b      	uxth	r3, r3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff99 	bl	80007b4 <UART_write>
    }
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40013800 	.word	0x40013800

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000892:	f000 f926 	bl	8000ae2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000896:	f000 f843 	bl	8000920 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  io();
 800089a:	f7ff fd55 	bl	8000348 <io>
  tajmer_init();
 800089e:	f7ff fd89 	bl	80003b4 <tajmer_init>
  UART_init();
 80008a2:	f7ff fe25 	bl	80004f0 <UART_init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80008a6:	b662      	cpsie	i
}
 80008a8:	bf00      	nop
     uint8_t move1[]={0xff, 0xff, 0x01, 0x05, 0x03, 0x1E, 0x00, 0x00, 0xD8};
     uint8_t move2[]={0xff, 0xff, 0x01, 0x05, 0x03, 0x1E, 0xff, 0x03, 0xD6};

     uint8_t ping[]={0xff, 0xff, 0x01, 0x02, 0x01, 0xFB}; */

  uint8_t ledon_b[] =
 80008aa:	4a1b      	ldr	r2, [pc, #108]	; (8000918 <main+0x8c>)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b4:	e883 0003 	stmia.w	r3, {r0, r1}
      { 0xff, 0xff, 0xfe, 0x04, 0x03, 0x19, 0x01, 0xE0 };
    uint8_t ledoff_b[] =
 80008b8:	4a18      	ldr	r2, [pc, #96]	; (800091c <main+0x90>)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c0:	e883 0003 	stmia.w	r3, {r0, r1}
      { 0xff, 0xff, 0xfe, 0x04, 0x03, 0x19, 0x00, 0xE1 };
    uint32_t RxPacket = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
//	  TajmerDelay(2000);
//	  TajmerDelay(3000);
//	  ax_angle_move(5, 0, 0);
//	  TajmerDelay(100000);

     TajmerDelay(500);
 80008c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008cc:	f7ff fdd8 	bl	8000480 <TajmerDelay>
     xl_angle_move(3, 200);
 80008d0:	21c8      	movs	r1, #200	; 0xc8
 80008d2:	2003      	movs	r0, #3
 80008d4:	f7ff fc7a 	bl	80001cc <xl_angle_move>
     TajmerDelay(500);
 80008d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008dc:	f7ff fdd0 	bl	8000480 <TajmerDelay>
     xl_angle_move(2, 700);
 80008e0:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80008e4:	2002      	movs	r0, #2
 80008e6:	f7ff fc71 	bl	80001cc <xl_angle_move>
     TajmerDelay(500);
 80008ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ee:	f7ff fdc7 	bl	8000480 <TajmerDelay>
     xl_angle_move(3, 700);
 80008f2:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80008f6:	2003      	movs	r0, #3
 80008f8:	f7ff fc68 	bl	80001cc <xl_angle_move>
     TajmerDelay(500);
 80008fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000900:	f7ff fdbe 	bl	8000480 <TajmerDelay>
     xl_angle_move(2, 200);
 8000904:	21c8      	movs	r1, #200	; 0xc8
 8000906:	2002      	movs	r0, #2
 8000908:	f7ff fc60 	bl	80001cc <xl_angle_move>
     TajmerDelay(500);
 800090c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000910:	f7ff fdb6 	bl	8000480 <TajmerDelay>
     TajmerDelay(500);
 8000914:	e7d8      	b.n	80008c8 <main+0x3c>
 8000916:	bf00      	nop
 8000918:	08001cec 	.word	0x08001cec
 800091c:	08001cf4 	.word	0x08001cf4

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b096      	sub	sp, #88	; 0x58
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2244      	movs	r2, #68	; 0x44
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f001 f896 	bl	8001a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000942:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000946:	f000 fa35 	bl	8000db4 <HAL_PWREx_ControlVoltageScaling>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000950:	f000 f838 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000954:	2310      	movs	r3, #16
 8000956:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000958:	2301      	movs	r3, #1
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000960:	2360      	movs	r3, #96	; 0x60
 8000962:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000968:	2301      	movs	r3, #1
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800096c:	2301      	movs	r3, #1
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000970:	2328      	movs	r3, #40	; 0x28
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000974:	2307      	movs	r3, #7
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000978:	2302      	movs	r3, #2
 800097a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800097c:	2302      	movs	r3, #2
 800097e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fa6b 	bl	8000e60 <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000990:	f000 f818 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000994:	230f      	movs	r3, #15
 8000996:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000998:	2303      	movs	r3, #3
 800099a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	2104      	movs	r1, #4
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 fe6b 	bl	8001688 <HAL_RCC_ClockConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009b8:	f000 f804 	bl	80009c4 <Error_Handler>
  }
}
 80009bc:	bf00      	nop
 80009be:	3758      	adds	r7, #88	; 0x58
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x44>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_MspInit+0x44>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6613      	str	r3, [r2, #96]	; 0x60
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_MspInit+0x44>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_MspInit+0x44>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_MspInit+0x44>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6593      	str	r3, [r2, #88]	; 0x58
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_MspInit+0x44>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <NMI_Handler+0x4>

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a64:	f000 f892 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <SystemInit+0x20>)
 8000a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <SystemInit+0x20>)
 8000a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a94:	f7ff ffea 	bl	8000a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a98:	480c      	ldr	r0, [pc, #48]	; (8000acc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a9a:	490d      	ldr	r1, [pc, #52]	; (8000ad0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <LoopForever+0xe>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab0:	4c0a      	ldr	r4, [pc, #40]	; (8000adc <LoopForever+0x16>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000abe:	f000 ffd7 	bl	8001a70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ac2:	f7ff fee3 	bl	800088c <main>

08000ac6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ac6:	e7fe      	b.n	8000ac6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ad4:	08001d44 	.word	0x08001d44
  ldr r2, =_sbss
 8000ad8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000adc:	20000054 	.word	0x20000054

08000ae0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC1_IRQHandler>

08000ae2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f91f 	bl	8000d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af2:	200f      	movs	r0, #15
 8000af4:	f000 f80e 	bl	8000b14 <HAL_InitTick>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d002      	beq.n	8000b04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	71fb      	strb	r3, [r7, #7]
 8000b02:	e001      	b.n	8000b08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b04:	f7ff ff64 	bl	80009d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b08:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <HAL_InitTick+0x6c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d023      	beq.n	8000b70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <HAL_InitTick+0x70>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_InitTick+0x6c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f91d 	bl	8000d7e <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10f      	bne.n	8000b6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d809      	bhi.n	8000b64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f000 f8f5 	bl	8000d46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_InitTick+0x74>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
 8000b62:	e007      	b.n	8000b74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	e004      	b.n	8000b74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	73fb      	strb	r3, [r7, #15]
 8000b6e:	e001      	b.n	8000b74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000050 	.word	0x20000050

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000050 	.word	0x20000050

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cfc:	d301      	bcc.n	8000d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00f      	b.n	8000d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <SysTick_Config+0x40>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f7ff ff8e 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <SysTick_Config+0x40>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <SysTick_Config+0x40>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff47 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d58:	f7ff ff5c 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	6978      	ldr	r0, [r7, #20]
 8000d64:	f7ff ff8e 	bl	8000c84 <NVIC_EncodePriority>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff5d 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ffb0 	bl	8000cec <SysTick_Config>
 8000d8c:	4603      	mov	r3, r0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40007000 	.word	0x40007000

08000db4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dc2:	d130      	bne.n	8000e26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dd0:	d038      	beq.n	8000e44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd2:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dda:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ddc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2232      	movs	r2, #50	; 0x32
 8000de8:	fb02 f303 	mul.w	r3, r2, r3
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dee:	fba2 2303 	umull	r2, r3, r2, r3
 8000df2:	0c9b      	lsrs	r3, r3, #18
 8000df4:	3301      	adds	r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df8:	e002      	b.n	8000e00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e0c:	d102      	bne.n	8000e14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f2      	bne.n	8000dfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e20:	d110      	bne.n	8000e44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e00f      	b.n	8000e46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e32:	d007      	beq.n	8000e44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e3c:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40007000 	.word	0x40007000
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	431bde83 	.word	0x431bde83

08000e60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d102      	bne.n	8000e74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	f000 bc02 	b.w	8001678 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e74:	4b96      	ldr	r3, [pc, #600]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e7e:	4b94      	ldr	r3, [pc, #592]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80e4 	beq.w	800105e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d007      	beq.n	8000eac <HAL_RCC_OscConfig+0x4c>
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	2b0c      	cmp	r3, #12
 8000ea0:	f040 808b 	bne.w	8000fba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	f040 8087 	bne.w	8000fba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eac:	4b88      	ldr	r3, [pc, #544]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d005      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x64>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e3d9      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a1a      	ldr	r2, [r3, #32]
 8000ec8:	4b81      	ldr	r3, [pc, #516]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d004      	beq.n	8000ede <HAL_RCC_OscConfig+0x7e>
 8000ed4:	4b7e      	ldr	r3, [pc, #504]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000edc:	e005      	b.n	8000eea <HAL_RCC_OscConfig+0x8a>
 8000ede:	4b7c      	ldr	r3, [pc, #496]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d223      	bcs.n	8000f36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fd54 	bl	80019a0 <RCC_SetFlashLatencyFromMSIRange>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e3ba      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f02:	4b73      	ldr	r3, [pc, #460]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a72      	ldr	r2, [pc, #456]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	4b70      	ldr	r3, [pc, #448]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	496d      	ldr	r1, [pc, #436]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f20:	4b6b      	ldr	r3, [pc, #428]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69db      	ldr	r3, [r3, #28]
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	4968      	ldr	r1, [pc, #416]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000f30:	4313      	orrs	r3, r2
 8000f32:	604b      	str	r3, [r1, #4]
 8000f34:	e025      	b.n	8000f82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f36:	4b66      	ldr	r3, [pc, #408]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a65      	ldr	r2, [pc, #404]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	4960      	ldr	r1, [pc, #384]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000f50:	4313      	orrs	r3, r2
 8000f52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f54:	4b5e      	ldr	r3, [pc, #376]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	495b      	ldr	r1, [pc, #364]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d109      	bne.n	8000f82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fd14 	bl	80019a0 <RCC_SetFlashLatencyFromMSIRange>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e37a      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f82:	f000 fc81 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 8000f86:	4602      	mov	r2, r0
 8000f88:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	091b      	lsrs	r3, r3, #4
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	4950      	ldr	r1, [pc, #320]	; (80010d4 <HAL_RCC_OscConfig+0x274>)
 8000f94:	5ccb      	ldrb	r3, [r1, r3]
 8000f96:	f003 031f 	and.w	r3, r3, #31
 8000f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9e:	4a4e      	ldr	r2, [pc, #312]	; (80010d8 <HAL_RCC_OscConfig+0x278>)
 8000fa0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fa2:	4b4e      	ldr	r3, [pc, #312]	; (80010dc <HAL_RCC_OscConfig+0x27c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fdb4 	bl	8000b14 <HAL_InitTick>
 8000fac:	4603      	mov	r3, r0
 8000fae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d052      	beq.n	800105c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	e35e      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d032      	beq.n	8001028 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fc2:	4b43      	ldr	r3, [pc, #268]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a42      	ldr	r2, [pc, #264]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fce:	f7ff fdf1 	bl	8000bb4 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fd6:	f7ff fded 	bl	8000bb4 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e347      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fe8:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f0      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ff4:	4b36      	ldr	r3, [pc, #216]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a35      	ldr	r2, [pc, #212]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	4930      	ldr	r1, [pc, #192]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001012:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	492b      	ldr	r1, [pc, #172]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8001022:	4313      	orrs	r3, r2
 8001024:	604b      	str	r3, [r1, #4]
 8001026:	e01a      	b.n	800105e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001028:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a28      	ldr	r2, [pc, #160]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 800102e:	f023 0301 	bic.w	r3, r3, #1
 8001032:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001034:	f7ff fdbe 	bl	8000bb4 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800103c:	f7ff fdba 	bl	8000bb4 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e314      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f0      	bne.n	800103c <HAL_RCC_OscConfig+0x1dc>
 800105a:	e000      	b.n	800105e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800105c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	d073      	beq.n	8001152 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2b08      	cmp	r3, #8
 800106e:	d005      	beq.n	800107c <HAL_RCC_OscConfig+0x21c>
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	2b0c      	cmp	r3, #12
 8001074:	d10e      	bne.n	8001094 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b03      	cmp	r3, #3
 800107a:	d10b      	bne.n	8001094 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d063      	beq.n	8001150 <HAL_RCC_OscConfig+0x2f0>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d15f      	bne.n	8001150 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e2f1      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109c:	d106      	bne.n	80010ac <HAL_RCC_OscConfig+0x24c>
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e025      	b.n	80010f8 <HAL_RCC_OscConfig+0x298>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b4:	d114      	bne.n	80010e0 <HAL_RCC_OscConfig+0x280>
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a02      	ldr	r2, [pc, #8]	; (80010d0 <HAL_RCC_OscConfig+0x270>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e013      	b.n	80010f8 <HAL_RCC_OscConfig+0x298>
 80010d0:	40021000 	.word	0x40021000
 80010d4:	08001cfc 	.word	0x08001cfc
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000004 	.word	0x20000004
 80010e0:	4ba0      	ldr	r3, [pc, #640]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a9f      	ldr	r2, [pc, #636]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 80010e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b9d      	ldr	r3, [pc, #628]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a9c      	ldr	r2, [pc, #624]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 80010f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d013      	beq.n	8001128 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001100:	f7ff fd58 	bl	8000bb4 <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001108:	f7ff fd54 	bl	8000bb4 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b64      	cmp	r3, #100	; 0x64
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e2ae      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800111a:	4b92      	ldr	r3, [pc, #584]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f0      	beq.n	8001108 <HAL_RCC_OscConfig+0x2a8>
 8001126:	e014      	b.n	8001152 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001128:	f7ff fd44 	bl	8000bb4 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001130:	f7ff fd40 	bl	8000bb4 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b64      	cmp	r3, #100	; 0x64
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e29a      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001142:	4b88      	ldr	r3, [pc, #544]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f0      	bne.n	8001130 <HAL_RCC_OscConfig+0x2d0>
 800114e:	e000      	b.n	8001152 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d060      	beq.n	8001220 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	2b04      	cmp	r3, #4
 8001162:	d005      	beq.n	8001170 <HAL_RCC_OscConfig+0x310>
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2b0c      	cmp	r3, #12
 8001168:	d119      	bne.n	800119e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d116      	bne.n	800119e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001170:	4b7c      	ldr	r3, [pc, #496]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001178:	2b00      	cmp	r3, #0
 800117a:	d005      	beq.n	8001188 <HAL_RCC_OscConfig+0x328>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e277      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001188:	4b76      	ldr	r3, [pc, #472]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	061b      	lsls	r3, r3, #24
 8001196:	4973      	ldr	r1, [pc, #460]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800119c:	e040      	b.n	8001220 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d023      	beq.n	80011ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a6:	4b6f      	ldr	r3, [pc, #444]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a6e      	ldr	r2, [pc, #440]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 80011ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b2:	f7ff fcff 	bl	8000bb4 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ba:	f7ff fcfb 	bl	8000bb4 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e255      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011cc:	4b65      	ldr	r3, [pc, #404]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d8:	4b62      	ldr	r3, [pc, #392]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	061b      	lsls	r3, r3, #24
 80011e6:	495f      	ldr	r1, [pc, #380]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
 80011ec:	e018      	b.n	8001220 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ee:	4b5d      	ldr	r3, [pc, #372]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a5c      	ldr	r2, [pc, #368]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 80011f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fa:	f7ff fcdb 	bl	8000bb4 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001202:	f7ff fcd7 	bl	8000bb4 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e231      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001214:	4b53      	ldr	r3, [pc, #332]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f0      	bne.n	8001202 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	2b00      	cmp	r3, #0
 800122a:	d03c      	beq.n	80012a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d01c      	beq.n	800126e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001234:	4b4b      	ldr	r3, [pc, #300]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 8001236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123a:	4a4a      	ldr	r2, [pc, #296]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001244:	f7ff fcb6 	bl	8000bb4 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800124c:	f7ff fcb2 	bl	8000bb4 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e20c      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800125e:	4b41      	ldr	r3, [pc, #260]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 8001260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0ef      	beq.n	800124c <HAL_RCC_OscConfig+0x3ec>
 800126c:	e01b      	b.n	80012a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800126e:	4b3d      	ldr	r3, [pc, #244]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 8001270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001274:	4a3b      	ldr	r2, [pc, #236]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127e:	f7ff fc99 	bl	8000bb4 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001286:	f7ff fc95 	bl	8000bb4 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e1ef      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001298:	4b32      	ldr	r3, [pc, #200]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 800129a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1ef      	bne.n	8001286 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80a6 	beq.w	8001400 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012b8:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 80012ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10d      	bne.n	80012e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 80012c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c8:	4a26      	ldr	r2, [pc, #152]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 80012ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ce:	6593      	str	r3, [r2, #88]	; 0x58
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 80012d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012dc:	2301      	movs	r3, #1
 80012de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_RCC_OscConfig+0x508>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d118      	bne.n	800131e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012ec:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <HAL_RCC_OscConfig+0x508>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a1d      	ldr	r2, [pc, #116]	; (8001368 <HAL_RCC_OscConfig+0x508>)
 80012f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f8:	f7ff fc5c 	bl	8000bb4 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001300:	f7ff fc58 	bl	8000bb4 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e1b2      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_RCC_OscConfig+0x508>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d108      	bne.n	8001338 <HAL_RCC_OscConfig+0x4d8>
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 8001328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001336:	e029      	b.n	800138c <HAL_RCC_OscConfig+0x52c>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2b05      	cmp	r3, #5
 800133e:	d115      	bne.n	800136c <HAL_RCC_OscConfig+0x50c>
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 8001342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001346:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 8001352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001356:	4a03      	ldr	r2, [pc, #12]	; (8001364 <HAL_RCC_OscConfig+0x504>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001360:	e014      	b.n	800138c <HAL_RCC_OscConfig+0x52c>
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000
 8001368:	40007000 	.word	0x40007000
 800136c:	4b9a      	ldr	r3, [pc, #616]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 800136e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001372:	4a99      	ldr	r2, [pc, #612]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 8001374:	f023 0301 	bic.w	r3, r3, #1
 8001378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800137c:	4b96      	ldr	r3, [pc, #600]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 800137e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001382:	4a95      	ldr	r2, [pc, #596]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 8001384:	f023 0304 	bic.w	r3, r3, #4
 8001388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d016      	beq.n	80013c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001394:	f7ff fc0e 	bl	8000bb4 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800139a:	e00a      	b.n	80013b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139c:	f7ff fc0a 	bl	8000bb4 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e162      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013b2:	4b89      	ldr	r3, [pc, #548]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 80013b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0ed      	beq.n	800139c <HAL_RCC_OscConfig+0x53c>
 80013c0:	e015      	b.n	80013ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c2:	f7ff fbf7 	bl	8000bb4 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c8:	e00a      	b.n	80013e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff fbf3 	bl	8000bb4 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d8:	4293      	cmp	r3, r2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e14b      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013e0:	4b7d      	ldr	r3, [pc, #500]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 80013e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1ed      	bne.n	80013ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ee:	7ffb      	ldrb	r3, [r7, #31]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d105      	bne.n	8001400 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f4:	4b78      	ldr	r3, [pc, #480]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 80013f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f8:	4a77      	ldr	r2, [pc, #476]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 80013fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0320 	and.w	r3, r3, #32
 8001408:	2b00      	cmp	r3, #0
 800140a:	d03c      	beq.n	8001486 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	2b00      	cmp	r3, #0
 8001412:	d01c      	beq.n	800144e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001414:	4b70      	ldr	r3, [pc, #448]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 8001416:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800141a:	4a6f      	ldr	r2, [pc, #444]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001424:	f7ff fbc6 	bl	8000bb4 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800142c:	f7ff fbc2 	bl	8000bb4 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e11c      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800143e:	4b66      	ldr	r3, [pc, #408]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 8001440:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0ef      	beq.n	800142c <HAL_RCC_OscConfig+0x5cc>
 800144c:	e01b      	b.n	8001486 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800144e:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 8001450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001454:	4a60      	ldr	r2, [pc, #384]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145e:	f7ff fba9 	bl	8000bb4 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001466:	f7ff fba5 	bl	8000bb4 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e0ff      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001478:	4b57      	ldr	r3, [pc, #348]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 800147a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1ef      	bne.n	8001466 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 80f3 	beq.w	8001676 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	2b02      	cmp	r3, #2
 8001496:	f040 80c9 	bne.w	800162c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800149a:	4b4f      	ldr	r3, [pc, #316]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f003 0203 	and.w	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d12c      	bne.n	8001508 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	3b01      	subs	r3, #1
 80014ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014bc:	429a      	cmp	r2, r3
 80014be:	d123      	bne.n	8001508 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d11b      	bne.n	8001508 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014dc:	429a      	cmp	r2, r3
 80014de:	d113      	bne.n	8001508 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	3b01      	subs	r3, #1
 80014ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d109      	bne.n	8001508 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	085b      	lsrs	r3, r3, #1
 8001500:	3b01      	subs	r3, #1
 8001502:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001504:	429a      	cmp	r2, r3
 8001506:	d06b      	beq.n	80015e0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b0c      	cmp	r3, #12
 800150c:	d062      	beq.n	80015d4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0ac      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800151e:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a2d      	ldr	r2, [pc, #180]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 8001524:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001528:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800152a:	f7ff fb43 	bl	8000bb4 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff fb3f 	bl	8000bb4 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e099      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f0      	bne.n	8001532 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <HAL_RCC_OscConfig+0x77c>)
 8001556:	4013      	ands	r3, r2
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001560:	3a01      	subs	r2, #1
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	4311      	orrs	r1, r2
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800156a:	0212      	lsls	r2, r2, #8
 800156c:	4311      	orrs	r1, r2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001572:	0852      	lsrs	r2, r2, #1
 8001574:	3a01      	subs	r2, #1
 8001576:	0552      	lsls	r2, r2, #21
 8001578:	4311      	orrs	r1, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800157e:	0852      	lsrs	r2, r2, #1
 8001580:	3a01      	subs	r2, #1
 8001582:	0652      	lsls	r2, r2, #25
 8001584:	4311      	orrs	r1, r2
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800158a:	06d2      	lsls	r2, r2, #27
 800158c:	430a      	orrs	r2, r1
 800158e:	4912      	ldr	r1, [pc, #72]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 8001590:	4313      	orrs	r3, r2
 8001592:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001594:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 800159a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800159e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 80015a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015ac:	f7ff fb02 	bl	8000bb4 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fafe 	bl	8000bb4 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e058      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <HAL_RCC_OscConfig+0x778>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015d2:	e050      	b.n	8001676 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e04f      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
 80015d8:	40021000 	.word	0x40021000
 80015dc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <HAL_RCC_OscConfig+0x820>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d144      	bne.n	8001676 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <HAL_RCC_OscConfig+0x820>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a23      	ldr	r2, [pc, #140]	; (8001680 <HAL_RCC_OscConfig+0x820>)
 80015f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_RCC_OscConfig+0x820>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4a20      	ldr	r2, [pc, #128]	; (8001680 <HAL_RCC_OscConfig+0x820>)
 80015fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001602:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001604:	f7ff fad6 	bl	8000bb4 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff fad2 	bl	8000bb4 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e02c      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_RCC_OscConfig+0x820>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x7ac>
 800162a:	e024      	b.n	8001676 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2b0c      	cmp	r3, #12
 8001630:	d01f      	beq.n	8001672 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_RCC_OscConfig+0x820>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <HAL_RCC_OscConfig+0x820>)
 8001638:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800163c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff fab9 	bl	8000bb4 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff fab5 	bl	8000bb4 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e00f      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_RCC_OscConfig+0x820>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_RCC_OscConfig+0x820>)
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	4905      	ldr	r1, [pc, #20]	; (8001680 <HAL_RCC_OscConfig+0x820>)
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_RCC_OscConfig+0x824>)
 800166c:	4013      	ands	r3, r2
 800166e:	60cb      	str	r3, [r1, #12]
 8001670:	e001      	b.n	8001676 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000
 8001684:	feeefffc 	.word	0xfeeefffc

08001688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0e7      	b.n	800186c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800169c:	4b75      	ldr	r3, [pc, #468]	; (8001874 <HAL_RCC_ClockConfig+0x1ec>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d910      	bls.n	80016cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016aa:	4b72      	ldr	r3, [pc, #456]	; (8001874 <HAL_RCC_ClockConfig+0x1ec>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 0207 	bic.w	r2, r3, #7
 80016b2:	4970      	ldr	r1, [pc, #448]	; (8001874 <HAL_RCC_ClockConfig+0x1ec>)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b6e      	ldr	r3, [pc, #440]	; (8001874 <HAL_RCC_ClockConfig+0x1ec>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0cf      	b.n	800186c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d010      	beq.n	80016fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	4b66      	ldr	r3, [pc, #408]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d908      	bls.n	80016fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e8:	4b63      	ldr	r3, [pc, #396]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4960      	ldr	r1, [pc, #384]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d04c      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b03      	cmp	r3, #3
 800170c:	d107      	bne.n	800171e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170e:	4b5a      	ldr	r3, [pc, #360]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d121      	bne.n	800175e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0a6      	b.n	800186c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001726:	4b54      	ldr	r3, [pc, #336]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d115      	bne.n	800175e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e09a      	b.n	800186c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800173e:	4b4e      	ldr	r3, [pc, #312]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e08e      	b.n	800186c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800174e:	4b4a      	ldr	r3, [pc, #296]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e086      	b.n	800186c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800175e:	4b46      	ldr	r3, [pc, #280]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f023 0203 	bic.w	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4943      	ldr	r1, [pc, #268]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001770:	f7ff fa20 	bl	8000bb4 <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff fa1c 	bl	8000bb4 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e06e      	b.n	800186c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	4b3a      	ldr	r3, [pc, #232]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 020c 	and.w	r2, r3, #12
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	429a      	cmp	r2, r3
 800179e:	d1eb      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d010      	beq.n	80017ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	4b31      	ldr	r3, [pc, #196]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d208      	bcs.n	80017ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017bc:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	492b      	ldr	r1, [pc, #172]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ce:	4b29      	ldr	r3, [pc, #164]	; (8001874 <HAL_RCC_ClockConfig+0x1ec>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d210      	bcs.n	80017fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <HAL_RCC_ClockConfig+0x1ec>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 0207 	bic.w	r2, r3, #7
 80017e4:	4923      	ldr	r1, [pc, #140]	; (8001874 <HAL_RCC_ClockConfig+0x1ec>)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <HAL_RCC_ClockConfig+0x1ec>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d001      	beq.n	80017fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e036      	b.n	800186c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b00      	cmp	r3, #0
 8001808:	d008      	beq.n	800181c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	4918      	ldr	r1, [pc, #96]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4910      	ldr	r1, [pc, #64]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 8001838:	4313      	orrs	r3, r2
 800183a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800183c:	f000 f824 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 8001840:	4602      	mov	r2, r0
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_RCC_ClockConfig+0x1f0>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	490b      	ldr	r1, [pc, #44]	; (800187c <HAL_RCC_ClockConfig+0x1f4>)
 800184e:	5ccb      	ldrb	r3, [r1, r3]
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	fa22 f303 	lsr.w	r3, r2, r3
 8001858:	4a09      	ldr	r2, [pc, #36]	; (8001880 <HAL_RCC_ClockConfig+0x1f8>)
 800185a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1fc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff f957 	bl	8000b14 <HAL_InitTick>
 8001866:	4603      	mov	r3, r0
 8001868:	72fb      	strb	r3, [r7, #11]

  return status;
 800186a:	7afb      	ldrb	r3, [r7, #11]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40022000 	.word	0x40022000
 8001878:	40021000 	.word	0x40021000
 800187c:	08001cfc 	.word	0x08001cfc
 8001880:	20000000 	.word	0x20000000
 8001884:	20000004 	.word	0x20000004

08001888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001896:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <HAL_RCC_GetSysClockFreq+0x108>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018a0:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <HAL_RCC_GetSysClockFreq+0x108>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x34>
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	d121      	bne.n	80018fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d11e      	bne.n	80018fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018bc:	4b34      	ldr	r3, [pc, #208]	; (8001990 <HAL_RCC_GetSysClockFreq+0x108>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d107      	bne.n	80018d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018c8:	4b31      	ldr	r3, [pc, #196]	; (8001990 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ce:	0a1b      	lsrs	r3, r3, #8
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	e005      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018d8:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_RCC_GetSysClockFreq+0x108>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018e4:	4a2b      	ldr	r2, [pc, #172]	; (8001994 <HAL_RCC_GetSysClockFreq+0x10c>)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10d      	bne.n	8001910 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_RCC_GetSysClockFreq+0x110>)
 8001902:	61bb      	str	r3, [r7, #24]
 8001904:	e004      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	2b08      	cmp	r3, #8
 800190a:	d101      	bne.n	8001910 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_RCC_GetSysClockFreq+0x114>)
 800190e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d134      	bne.n	8001980 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001916:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <HAL_RCC_GetSysClockFreq+0x108>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d003      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0xa6>
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2b03      	cmp	r3, #3
 800192a:	d003      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0xac>
 800192c:	e005      	b.n	800193a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_RCC_GetSysClockFreq+0x110>)
 8001930:	617b      	str	r3, [r7, #20]
      break;
 8001932:	e005      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_RCC_GetSysClockFreq+0x114>)
 8001936:	617b      	str	r3, [r7, #20]
      break;
 8001938:	e002      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	617b      	str	r3, [r7, #20]
      break;
 800193e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <HAL_RCC_GetSysClockFreq+0x108>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	3301      	adds	r3, #1
 800194c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_RCC_GetSysClockFreq+0x108>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	fb03 f202 	mul.w	r2, r3, r2
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_RCC_GetSysClockFreq+0x108>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	0e5b      	lsrs	r3, r3, #25
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	3301      	adds	r3, #1
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001980:	69bb      	ldr	r3, [r7, #24]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	08001d0c 	.word	0x08001d0c
 8001998:	00f42400 	.word	0x00f42400
 800199c:	007a1200 	.word	0x007a1200

080019a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019ac:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019b8:	f7ff f9ee 	bl	8000d98 <HAL_PWREx_GetVoltageRange>
 80019bc:	6178      	str	r0, [r7, #20]
 80019be:	e014      	b.n	80019ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019c0:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c4:	4a24      	ldr	r2, [pc, #144]	; (8001a58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ca:	6593      	str	r3, [r2, #88]	; 0x58
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019d8:	f7ff f9de 	bl	8000d98 <HAL_PWREx_GetVoltageRange>
 80019dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e2:	4a1d      	ldr	r2, [pc, #116]	; (8001a58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f0:	d10b      	bne.n	8001a0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b80      	cmp	r3, #128	; 0x80
 80019f6:	d919      	bls.n	8001a2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2ba0      	cmp	r3, #160	; 0xa0
 80019fc:	d902      	bls.n	8001a04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019fe:	2302      	movs	r3, #2
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	e013      	b.n	8001a2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a04:	2301      	movs	r3, #1
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	e010      	b.n	8001a2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b80      	cmp	r3, #128	; 0x80
 8001a0e:	d902      	bls.n	8001a16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a10:	2303      	movs	r3, #3
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	e00a      	b.n	8001a2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b80      	cmp	r3, #128	; 0x80
 8001a1a:	d102      	bne.n	8001a22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	e004      	b.n	8001a2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b70      	cmp	r3, #112	; 0x70
 8001a26:	d101      	bne.n	8001a2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a28:	2301      	movs	r3, #1
 8001a2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 0207 	bic.w	r2, r3, #7
 8001a34:	4909      	ldr	r1, [pc, #36]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d001      	beq.n	8001a4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40022000 	.word	0x40022000

08001a60 <memset>:
 8001a60:	4402      	add	r2, r0
 8001a62:	4603      	mov	r3, r0
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d100      	bne.n	8001a6a <memset+0xa>
 8001a68:	4770      	bx	lr
 8001a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8001a6e:	e7f9      	b.n	8001a64 <memset+0x4>

08001a70 <__libc_init_array>:
 8001a70:	b570      	push	{r4, r5, r6, lr}
 8001a72:	4d0d      	ldr	r5, [pc, #52]	; (8001aa8 <__libc_init_array+0x38>)
 8001a74:	4c0d      	ldr	r4, [pc, #52]	; (8001aac <__libc_init_array+0x3c>)
 8001a76:	1b64      	subs	r4, r4, r5
 8001a78:	10a4      	asrs	r4, r4, #2
 8001a7a:	2600      	movs	r6, #0
 8001a7c:	42a6      	cmp	r6, r4
 8001a7e:	d109      	bne.n	8001a94 <__libc_init_array+0x24>
 8001a80:	4d0b      	ldr	r5, [pc, #44]	; (8001ab0 <__libc_init_array+0x40>)
 8001a82:	4c0c      	ldr	r4, [pc, #48]	; (8001ab4 <__libc_init_array+0x44>)
 8001a84:	f000 f826 	bl	8001ad4 <_init>
 8001a88:	1b64      	subs	r4, r4, r5
 8001a8a:	10a4      	asrs	r4, r4, #2
 8001a8c:	2600      	movs	r6, #0
 8001a8e:	42a6      	cmp	r6, r4
 8001a90:	d105      	bne.n	8001a9e <__libc_init_array+0x2e>
 8001a92:	bd70      	pop	{r4, r5, r6, pc}
 8001a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a98:	4798      	blx	r3
 8001a9a:	3601      	adds	r6, #1
 8001a9c:	e7ee      	b.n	8001a7c <__libc_init_array+0xc>
 8001a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aa2:	4798      	blx	r3
 8001aa4:	3601      	adds	r6, #1
 8001aa6:	e7f2      	b.n	8001a8e <__libc_init_array+0x1e>
 8001aa8:	08001d3c 	.word	0x08001d3c
 8001aac:	08001d3c 	.word	0x08001d3c
 8001ab0:	08001d3c 	.word	0x08001d3c
 8001ab4:	08001d40 	.word	0x08001d40

08001ab8 <memcpy>:
 8001ab8:	440a      	add	r2, r1
 8001aba:	4291      	cmp	r1, r2
 8001abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8001ac0:	d100      	bne.n	8001ac4 <memcpy+0xc>
 8001ac2:	4770      	bx	lr
 8001ac4:	b510      	push	{r4, lr}
 8001ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ace:	4291      	cmp	r1, r2
 8001ad0:	d1f9      	bne.n	8001ac6 <memcpy+0xe>
 8001ad2:	bd10      	pop	{r4, pc}

08001ad4 <_init>:
 8001ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ad6:	bf00      	nop
 8001ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ada:	bc08      	pop	{r3}
 8001adc:	469e      	mov	lr, r3
 8001ade:	4770      	bx	lr

08001ae0 <_fini>:
 8001ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ae2:	bf00      	nop
 8001ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ae6:	bc08      	pop	{r3}
 8001ae8:	469e      	mov	lr, r3
 8001aea:	4770      	bx	lr
