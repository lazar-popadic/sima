
Simeon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002144  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080022d0  080022d0  000122d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002310  08002310  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002310  08002310  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002310  08002310  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002310  08002310  00012310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002314  08002314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000010  08002328  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08002328  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000053f3  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001597  00000000  00000000  00025476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000688  00000000  00000000  00026a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004ba  00000000  00000000  00027098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ebd5  00000000  00000000  00027552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090d5  00000000  00000000  00046127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b600e  00000000  00000000  0004f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000016e4  00000000  00000000  0010520c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001068f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080022b8 	.word	0x080022b8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	080022b8 	.word	0x080022b8

080001cc <ax_angle_move>:
update_crc (unsigned short crc_accum, unsigned char *data_blk_ptr,
	    unsigned short data_blk_size);

void
ax_angle_move (uint8_t id, uint16_t angle, uint16_t speed)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	460b      	mov	r3, r1
 80001d8:	80bb      	strh	r3, [r7, #4]
 80001da:	4613      	mov	r3, r2
 80001dc:	807b      	strh	r3, [r7, #2]
	uint8_t angle_low, angle_high, speed_low, speed_high;
	  angle_low = angle & 0xff;
 80001de:	88bb      	ldrh	r3, [r7, #4]
 80001e0:	77bb      	strb	r3, [r7, #30]
	  angle_high = angle >> 8;
 80001e2:	88bb      	ldrh	r3, [r7, #4]
 80001e4:	0a1b      	lsrs	r3, r3, #8
 80001e6:	b29b      	uxth	r3, r3
 80001e8:	777b      	strb	r3, [r7, #29]
	  speed_low = speed & 0xff;
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	773b      	strb	r3, [r7, #28]
	  speed_high = speed >> 8;
 80001ee:	887b      	ldrh	r3, [r7, #2]
 80001f0:	0a1b      	lsrs	r3, r3, #8
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	76fb      	strb	r3, [r7, #27]

	  uint16_t checksum_local = id + 7 + 3 + 0x1e + angle_low + angle_high
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	b29a      	uxth	r2, r3
 80001fa:	7fbb      	ldrb	r3, [r7, #30]
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	4413      	add	r3, r2
 8000200:	b29a      	uxth	r2, r3
 8000202:	7f7b      	ldrb	r3, [r7, #29]
 8000204:	b29b      	uxth	r3, r3
 8000206:	4413      	add	r3, r2
 8000208:	b29a      	uxth	r2, r3
	      + speed_low + speed_high;
 800020a:	7f3b      	ldrb	r3, [r7, #28]
 800020c:	b29b      	uxth	r3, r3
 800020e:	4413      	add	r3, r2
 8000210:	b29a      	uxth	r2, r3
 8000212:	7efb      	ldrb	r3, [r7, #27]
 8000214:	b29b      	uxth	r3, r3
 8000216:	4413      	add	r3, r2
 8000218:	b29b      	uxth	r3, r3
	  uint16_t checksum_local = id + 7 + 3 + 0x1e + angle_low + angle_high
 800021a:	3328      	adds	r3, #40	; 0x28
 800021c:	833b      	strh	r3, [r7, #24]
	  uint8_t checksum = (uint8_t) (~checksum_local);
 800021e:	8b3b      	ldrh	r3, [r7, #24]
 8000220:	b2db      	uxtb	r3, r3
 8000222:	43db      	mvns	r3, r3
 8000224:	75fb      	strb	r3, [r7, #23]
	  uint8_t ax_move[] =
 8000226:	23ff      	movs	r3, #255	; 0xff
 8000228:	733b      	strb	r3, [r7, #12]
 800022a:	23ff      	movs	r3, #255	; 0xff
 800022c:	737b      	strb	r3, [r7, #13]
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	73bb      	strb	r3, [r7, #14]
 8000232:	2307      	movs	r3, #7
 8000234:	73fb      	strb	r3, [r7, #15]
 8000236:	2303      	movs	r3, #3
 8000238:	743b      	strb	r3, [r7, #16]
 800023a:	231e      	movs	r3, #30
 800023c:	747b      	strb	r3, [r7, #17]
 800023e:	7fbb      	ldrb	r3, [r7, #30]
 8000240:	74bb      	strb	r3, [r7, #18]
 8000242:	7f7b      	ldrb	r3, [r7, #29]
 8000244:	74fb      	strb	r3, [r7, #19]
 8000246:	7f3b      	ldrb	r3, [r7, #28]
 8000248:	753b      	strb	r3, [r7, #20]
 800024a:	7efb      	ldrb	r3, [r7, #27]
 800024c:	757b      	strb	r3, [r7, #21]
 800024e:	7dfb      	ldrb	r3, [r7, #23]
 8000250:	75bb      	strb	r3, [r7, #22]
	    { 0xff, 0xff, id, 0x07, 0x03, 0x1E, angle_low, angle_high, speed_low,
		speed_high, checksum };

  for (uint8_t i = 0; i < 11; i++)
 8000252:	2300      	movs	r3, #0
 8000254:	77fb      	strb	r3, [r7, #31]
 8000256:	e00a      	b.n	800026e <ax_angle_move+0xa2>
    {
      UART_send_byte(ax_move[i]);
 8000258:	7ffb      	ldrb	r3, [r7, #31]
 800025a:	3320      	adds	r3, #32
 800025c:	443b      	add	r3, r7
 800025e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000262:	4618      	mov	r0, r3
 8000264:	f000 febe 	bl	8000fe4 <UART_send_byte>
  for (uint8_t i = 0; i < 11; i++)
 8000268:	7ffb      	ldrb	r3, [r7, #31]
 800026a:	3301      	adds	r3, #1
 800026c:	77fb      	strb	r3, [r7, #31]
 800026e:	7ffb      	ldrb	r3, [r7, #31]
 8000270:	2b0a      	cmp	r3, #10
 8000272:	d9f1      	bls.n	8000258 <ax_angle_move+0x8c>
    }
}
 8000274:	bf00      	nop
 8000276:	bf00      	nop
 8000278:	3720      	adds	r7, #32
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <ax_wheel_mode>:

void
ax_wheel_mode(uint8_t id)
{
 800027e:	b580      	push	{r7, lr}
 8000280:	b086      	sub	sp, #24
 8000282:	af00      	add	r7, sp, #0
 8000284:	4603      	mov	r3, r0
 8000286:	71fb      	strb	r3, [r7, #7]
	// 0-1023 CCW
	// 1024-2047 CW

	uint16_t checksum_local = id + 5 + 3 + 8;
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	b29b      	uxth	r3, r3
 800028c:	3310      	adds	r3, #16
 800028e:	82bb      	strh	r3, [r7, #20]
	uint8_t checksum = (uint8_t) (~checksum_local);
 8000290:	8abb      	ldrh	r3, [r7, #20]
 8000292:	b2db      	uxtb	r3, r3
 8000294:	43db      	mvns	r3, r3
 8000296:	74fb      	strb	r3, [r7, #19]
	uint8_t ax_move[] =
 8000298:	23ff      	movs	r3, #255	; 0xff
 800029a:	723b      	strb	r3, [r7, #8]
 800029c:	23ff      	movs	r3, #255	; 0xff
 800029e:	727b      	strb	r3, [r7, #9]
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	72bb      	strb	r3, [r7, #10]
 80002a4:	2305      	movs	r3, #5
 80002a6:	72fb      	strb	r3, [r7, #11]
 80002a8:	2303      	movs	r3, #3
 80002aa:	733b      	strb	r3, [r7, #12]
 80002ac:	2308      	movs	r3, #8
 80002ae:	737b      	strb	r3, [r7, #13]
 80002b0:	2300      	movs	r3, #0
 80002b2:	73bb      	strb	r3, [r7, #14]
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]
 80002b8:	7cfb      	ldrb	r3, [r7, #19]
 80002ba:	743b      	strb	r3, [r7, #16]
			{ 0xff, 0xff, id, 0x05, 0x03, 0x08, 0x00, 0x00, checksum };

	for (uint8_t i = 0; i < 9; i++)
 80002bc:	2300      	movs	r3, #0
 80002be:	75fb      	strb	r3, [r7, #23]
 80002c0:	e00a      	b.n	80002d8 <ax_wheel_mode+0x5a>
			    {
			      UART_send_byte(ax_move[i]);
 80002c2:	7dfb      	ldrb	r3, [r7, #23]
 80002c4:	3318      	adds	r3, #24
 80002c6:	443b      	add	r3, r7
 80002c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fe89 	bl	8000fe4 <UART_send_byte>
	for (uint8_t i = 0; i < 9; i++)
 80002d2:	7dfb      	ldrb	r3, [r7, #23]
 80002d4:	3301      	adds	r3, #1
 80002d6:	75fb      	strb	r3, [r7, #23]
 80002d8:	7dfb      	ldrb	r3, [r7, #23]
 80002da:	2b08      	cmp	r3, #8
 80002dc:	d9f1      	bls.n	80002c2 <ax_wheel_mode+0x44>
			    }
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	3718      	adds	r7, #24
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <sensor_Init>:
//portC
uint8_t infra_1 = 1;

void
sensor_Init()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
sensor_IO_init();
 80002ec:	f000 f802 	bl	80002f4 <sensor_IO_init>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <sensor_IO_init>:

void
sensor_IO_init()
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (0b1 << 1); //takt za gpioB
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <sensor_IO_init+0x34>)
 80002fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fc:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <sensor_IO_init+0x34>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB-> MODER &= ~(0b11 << 2* infra_1);  //PB1
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <sensor_IO_init+0x38>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a09      	ldr	r2, [pc, #36]	; (8000330 <sensor_IO_init+0x3c>)
 800030a:	7812      	ldrb	r2, [r2, #0]
 800030c:	0052      	lsls	r2, r2, #1
 800030e:	2103      	movs	r1, #3
 8000310:	fa01 f202 	lsl.w	r2, r1, r2
 8000314:	43d2      	mvns	r2, r2
 8000316:	4611      	mov	r1, r2
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <sensor_IO_init+0x38>)
 800031a:	400b      	ands	r3, r1
 800031c:	6013      	str	r3, [r2, #0]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40021000 	.word	0x40021000
 800032c:	48000400 	.word	0x48000400
 8000330:	20000000 	.word	0x20000000

08000334 <sensor_JedanJedini>:

bool
sensor_JedanJedini()
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
	if(GPIOB->IDR & (0b1<<infra_1))
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <sensor_JedanJedini+0x28>)
 800033a:	691b      	ldr	r3, [r3, #16]
 800033c:	4a08      	ldr	r2, [pc, #32]	; (8000360 <sensor_JedanJedini+0x2c>)
 800033e:	7812      	ldrb	r2, [r2, #0]
 8000340:	4611      	mov	r1, r2
 8000342:	2201      	movs	r2, #1
 8000344:	408a      	lsls	r2, r1
 8000346:	4013      	ands	r3, r2
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <sensor_JedanJedini+0x1c>
		return true;
 800034c:	2301      	movs	r3, #1
 800034e:	e000      	b.n	8000352 <sensor_JedanJedini+0x1e>
	return false;
 8000350:	2300      	movs	r3, #0
}
 8000352:	4618      	mov	r0, r3
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	48000400 	.word	0x48000400
 8000360:	20000000 	.word	0x20000000

08000364 <tactic_yellow_2>:
		default:
			break;
		}
}

void tactic_yellow_2(uint8_t AX_Pogonski, uint8_t AX_Zakretni) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	460a      	mov	r2, r1
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	4613      	mov	r3, r2
 8000372:	71bb      	strb	r3, [r7, #6]
	switch (tactic_state) {
 8000374:	4bbd      	ldr	r3, [pc, #756]	; (800066c <tactic_yellow_2+0x308>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b0d      	cmp	r3, #13
 800037c:	f200 828c 	bhi.w	8000898 <tactic_yellow_2+0x534>
 8000380:	a201      	add	r2, pc, #4	; (adr r2, 8000388 <tactic_yellow_2+0x24>)
 8000382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000386:	bf00      	nop
 8000388:	080003c1 	.word	0x080003c1
 800038c:	080003dd 	.word	0x080003dd
 8000390:	08000495 	.word	0x08000495
 8000394:	080004f3 	.word	0x080004f3
 8000398:	08000551 	.word	0x08000551
 800039c:	080005af 	.word	0x080005af
 80003a0:	0800060d 	.word	0x0800060d
 80003a4:	08000679 	.word	0x08000679
 80003a8:	080006d5 	.word	0x080006d5
 80003ac:	08000731 	.word	0x08000731
 80003b0:	0800078d 	.word	0x0800078d
 80003b4:	080007e9 	.word	0x080007e9
 80003b8:	08000839 	.word	0x08000839
 80003bc:	0800088b 	.word	0x0800088b
	case 0:
		if (IO_cinc()) {
 80003c0:	f000 fbf2 	bl	8000ba8 <IO_cinc>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	f000 8268 	beq.w	800089c <tactic_yellow_2+0x538>
			tactic_state++;
 80003cc:	4ba7      	ldr	r3, [pc, #668]	; (800066c <tactic_yellow_2+0x308>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	3301      	adds	r3, #1
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	4ba5      	ldr	r3, [pc, #660]	; (800066c <tactic_yellow_2+0x308>)
 80003d8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80003da:	e25f      	b.n	800089c <tactic_yellow_2+0x538>

	case 1:
		TajmerDelay(200);
 80003dc:	20c8      	movs	r0, #200	; 0xc8
 80003de:	f000 fc6f 	bl	8000cc0 <TajmerDelay>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80003e2:	79bb      	ldrb	r3, [r7, #6]
 80003e4:	22c8      	movs	r2, #200	; 0xc8
 80003e6:	f240 213a 	movw	r1, #570	; 0x23a
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff feee 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	22c8      	movs	r2, #200	; 0xc8
 80003f4:	f240 213a 	movw	r1, #570	; 0x23a
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff fee7 	bl	80001cc <ax_angle_move>
		TajmerDelay(300);
 80003fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000402:	f000 fc5d 	bl	8000cc0 <TajmerDelay>
		ax_angle_move(AX_Zakretni, LEVOPP1, 200);
 8000406:	79bb      	ldrb	r3, [r7, #6]
 8000408:	22c8      	movs	r2, #200	; 0xc8
 800040a:	f240 215d 	movw	r1, #605	; 0x25d
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff fedc 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, LEVOPP1, 300);
 8000414:	79bb      	ldrb	r3, [r7, #6]
 8000416:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800041a:	f240 215d 	movw	r1, #605	; 0x25d
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff fed4 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, LEVOPP1, 200);
 8000424:	79bb      	ldrb	r3, [r7, #6]
 8000426:	22c8      	movs	r2, #200	; 0xc8
 8000428:	f240 215d 	movw	r1, #605	; 0x25d
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff fecd 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, LEVOPP1, 200);
 8000432:	79bb      	ldrb	r3, [r7, #6]
 8000434:	22c8      	movs	r2, #200	; 0xc8
 8000436:	f240 215d 	movw	r1, #605	; 0x25d
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fec6 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 8000440:	20c8      	movs	r0, #200	; 0xc8
 8000442:	f000 fc3d 	bl	8000cc0 <TajmerDelay>
		ax_wheel_mode(AX_Pogonski);
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff18 	bl	800027e <ax_wheel_mode>
		TajmerDelay(200);
 800044e:	20c8      	movs	r0, #200	; 0xc8
 8000450:	f000 fc36 	bl	8000cc0 <TajmerDelay>
		ax_angle_move(AX_Pogonski, 0, 1023);
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800045a:	2100      	movs	r1, #0
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff feb5 	bl	80001cc <ax_angle_move>
		TajmerDelay(250);
 8000462:	20fa      	movs	r0, #250	; 0xfa
 8000464:	f000 fc2c 	bl	8000cc0 <TajmerDelay>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 8000468:	79bb      	ldrb	r3, [r7, #6]
 800046a:	22c8      	movs	r2, #200	; 0xc8
 800046c:	f240 213a 	movw	r1, #570	; 0x23a
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff feab 	bl	80001cc <ax_angle_move>
		ax_angle_move(AX_Zakretni, PRAVO, 200);
 8000476:	79bb      	ldrb	r3, [r7, #6]
 8000478:	22c8      	movs	r2, #200	; 0xc8
 800047a:	f240 213a 	movw	r1, #570	; 0x23a
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff fea4 	bl	80001cc <ax_angle_move>

		tactic_state++;
 8000484:	4b79      	ldr	r3, [pc, #484]	; (800066c <tactic_yellow_2+0x308>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	3301      	adds	r3, #1
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b77      	ldr	r3, [pc, #476]	; (800066c <tactic_yellow_2+0x308>)
 8000490:	701a      	strb	r2, [r3, #0]
		break;
 8000492:	e204      	b.n	800089e <tactic_yellow_2+0x53a>

	case 2:
		sensors_case_timer = SENSOR_JJ;
 8000494:	4b76      	ldr	r3, [pc, #472]	; (8000670 <tactic_yellow_2+0x30c>)
 8000496:	2201      	movs	r2, #1
 8000498:	701a      	strb	r2, [r3, #0]

		if(interrupted)
 800049a:	4b76      	ldr	r3, [pc, #472]	; (8000674 <tactic_yellow_2+0x310>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d00d      	beq.n	80004c0 <tactic_yellow_2+0x15c>
		{

			interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 80004a4:	79ba      	ldrb	r2, [r7, #6]
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	4611      	mov	r1, r2
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fa18 	bl	80008e0 <interrupted_func_right_diagonal_sideway>
			tactic_state+=6;
 80004b0:	4b6e      	ldr	r3, [pc, #440]	; (800066c <tactic_yellow_2+0x308>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	3306      	adds	r3, #6
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	4b6c      	ldr	r3, [pc, #432]	; (800066c <tactic_yellow_2+0x308>)
 80004bc:	701a      	strb	r2, [r3, #0]

			TajmerDelay(150);
			tactic_state++;
		}

		break;
 80004be:	e1ee      	b.n	800089e <tactic_yellow_2+0x53a>
			ax_wheel_mode(AX_Pogonski);
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff fedb 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80004c8:	2064      	movs	r0, #100	; 0x64
 80004ca:	f000 fbf9 	bl	8000cc0 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff fe78 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 80004dc:	2096      	movs	r0, #150	; 0x96
 80004de:	f000 fbef 	bl	8000cc0 <TajmerDelay>
			tactic_state++;
 80004e2:	4b62      	ldr	r3, [pc, #392]	; (800066c <tactic_yellow_2+0x308>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	3301      	adds	r3, #1
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	4b5f      	ldr	r3, [pc, #380]	; (800066c <tactic_yellow_2+0x308>)
 80004ee:	701a      	strb	r2, [r3, #0]
		break;
 80004f0:	e1d5      	b.n	800089e <tactic_yellow_2+0x53a>
	case 3:
		sensors_case_timer = SENSOR_JJ;
 80004f2:	4b5f      	ldr	r3, [pc, #380]	; (8000670 <tactic_yellow_2+0x30c>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]


		if (interrupted) {
 80004f8:	4b5e      	ldr	r3, [pc, #376]	; (8000674 <tactic_yellow_2+0x310>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d00d      	beq.n	800051e <tactic_yellow_2+0x1ba>
			interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 8000502:	79ba      	ldrb	r2, [r7, #6]
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	4611      	mov	r1, r2
 8000508:	4618      	mov	r0, r3
 800050a:	f000 f9e9 	bl	80008e0 <interrupted_func_right_diagonal_sideway>
			tactic_state+=6;
 800050e:	4b57      	ldr	r3, [pc, #348]	; (800066c <tactic_yellow_2+0x308>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b2db      	uxtb	r3, r3
 8000514:	3306      	adds	r3, #6
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b54      	ldr	r3, [pc, #336]	; (800066c <tactic_yellow_2+0x308>)
 800051a:	701a      	strb	r2, [r3, #0]
			ax_angle_move(AX_Pogonski, 0, 1023);

			TajmerDelay(150);
			tactic_state++;
		}
		break;
 800051c:	e1bf      	b.n	800089e <tactic_yellow_2+0x53a>
			ax_wheel_mode(AX_Pogonski);
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff feac 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000526:	2064      	movs	r0, #100	; 0x64
 8000528:	f000 fbca 	bl	8000cc0 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fe49 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 800053a:	2096      	movs	r0, #150	; 0x96
 800053c:	f000 fbc0 	bl	8000cc0 <TajmerDelay>
			tactic_state++;
 8000540:	4b4a      	ldr	r3, [pc, #296]	; (800066c <tactic_yellow_2+0x308>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	3301      	adds	r3, #1
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b48      	ldr	r3, [pc, #288]	; (800066c <tactic_yellow_2+0x308>)
 800054c:	701a      	strb	r2, [r3, #0]
		break;
 800054e:	e1a6      	b.n	800089e <tactic_yellow_2+0x53a>
	case 4:
		sensors_case_timer = SENSOR_JJ;
 8000550:	4b47      	ldr	r3, [pc, #284]	; (8000670 <tactic_yellow_2+0x30c>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]


		if (interrupted) {
 8000556:	4b47      	ldr	r3, [pc, #284]	; (8000674 <tactic_yellow_2+0x310>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	b2db      	uxtb	r3, r3
 800055c:	2b00      	cmp	r3, #0
 800055e:	d00d      	beq.n	800057c <tactic_yellow_2+0x218>
			interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 8000560:	79ba      	ldrb	r2, [r7, #6]
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	4611      	mov	r1, r2
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f9ba 	bl	80008e0 <interrupted_func_right_diagonal_sideway>
			tactic_state+=6;
 800056c:	4b3f      	ldr	r3, [pc, #252]	; (800066c <tactic_yellow_2+0x308>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	3306      	adds	r3, #6
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b3d      	ldr	r3, [pc, #244]	; (800066c <tactic_yellow_2+0x308>)
 8000578:	701a      	strb	r2, [r3, #0]
			ax_angle_move(AX_Pogonski, 0, 1023);

			TajmerDelay(150);
			tactic_state++;
		}
		break;
 800057a:	e190      	b.n	800089e <tactic_yellow_2+0x53a>
			ax_wheel_mode(AX_Pogonski);
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fe7d 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000584:	2064      	movs	r0, #100	; 0x64
 8000586:	f000 fb9b 	bl	8000cc0 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fe1a 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 8000598:	2096      	movs	r0, #150	; 0x96
 800059a:	f000 fb91 	bl	8000cc0 <TajmerDelay>
			tactic_state++;
 800059e:	4b33      	ldr	r3, [pc, #204]	; (800066c <tactic_yellow_2+0x308>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	3301      	adds	r3, #1
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b30      	ldr	r3, [pc, #192]	; (800066c <tactic_yellow_2+0x308>)
 80005aa:	701a      	strb	r2, [r3, #0]
		break;
 80005ac:	e177      	b.n	800089e <tactic_yellow_2+0x53a>
	case 5:
		sensors_case_timer = SENSOR_JJ;
 80005ae:	4b30      	ldr	r3, [pc, #192]	; (8000670 <tactic_yellow_2+0x30c>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]


		if (interrupted) {
 80005b4:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <tactic_yellow_2+0x310>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d00d      	beq.n	80005da <tactic_yellow_2+0x276>
			interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 80005be:	79ba      	ldrb	r2, [r7, #6]
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	4611      	mov	r1, r2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f98b 	bl	80008e0 <interrupted_func_right_diagonal_sideway>
			tactic_state+=5;
 80005ca:	4b28      	ldr	r3, [pc, #160]	; (800066c <tactic_yellow_2+0x308>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	3305      	adds	r3, #5
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <tactic_yellow_2+0x308>)
 80005d6:	701a      	strb	r2, [r3, #0]
			ax_angle_move(AX_Pogonski, 0, 1023);

			TajmerDelay(150);
			tactic_state++;
		}
		break;
 80005d8:	e161      	b.n	800089e <tactic_yellow_2+0x53a>
			ax_wheel_mode(AX_Pogonski);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fe4e 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80005e2:	2064      	movs	r0, #100	; 0x64
 80005e4:	f000 fb6c 	bl	8000cc0 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fdeb 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 80005f6:	2096      	movs	r0, #150	; 0x96
 80005f8:	f000 fb62 	bl	8000cc0 <TajmerDelay>
			tactic_state++;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <tactic_yellow_2+0x308>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	3301      	adds	r3, #1
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <tactic_yellow_2+0x308>)
 8000608:	701a      	strb	r2, [r3, #0]
		break;
 800060a:	e148      	b.n	800089e <tactic_yellow_2+0x53a>
	case 6:
		sensors_case_timer = SENSOR_JJ;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <tactic_yellow_2+0x30c>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <tactic_yellow_2+0x310>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00d      	beq.n	8000638 <tactic_yellow_2+0x2d4>
			interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 800061c:	79ba      	ldrb	r2, [r7, #6]
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f95c 	bl	80008e0 <interrupted_func_right_diagonal_sideway>
			tactic_state+=4;
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <tactic_yellow_2+0x308>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	3304      	adds	r3, #4
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <tactic_yellow_2+0x308>)
 8000634:	701a      	strb	r2, [r3, #0]
			ax_angle_move(AX_Pogonski, 0, 1023);

			TajmerDelay(150);
			tactic_state++;
		}
		break;
 8000636:	e132      	b.n	800089e <tactic_yellow_2+0x53a>
			ax_wheel_mode(AX_Pogonski);
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fe1f 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 8000640:	2064      	movs	r0, #100	; 0x64
 8000642:	f000 fb3d 	bl	8000cc0 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff fdbc 	bl	80001cc <ax_angle_move>
			TajmerDelay(150);
 8000654:	2096      	movs	r0, #150	; 0x96
 8000656:	f000 fb33 	bl	8000cc0 <TajmerDelay>
			tactic_state++;
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <tactic_yellow_2+0x308>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	3301      	adds	r3, #1
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b01      	ldr	r3, [pc, #4]	; (800066c <tactic_yellow_2+0x308>)
 8000666:	701a      	strb	r2, [r3, #0]
		break;
 8000668:	e119      	b.n	800089e <tactic_yellow_2+0x53a>
 800066a:	bf00      	nop
 800066c:	2000002c 	.word	0x2000002c
 8000670:	20000034 	.word	0x20000034
 8000674:	20000035 	.word	0x20000035
	case 7:
		sensors_case_timer = SENSOR_JJ;
 8000678:	4b8b      	ldr	r3, [pc, #556]	; (80008a8 <tactic_yellow_2+0x544>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]

		if (interrupted) {
 800067e:	4b8b      	ldr	r3, [pc, #556]	; (80008ac <tactic_yellow_2+0x548>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00d      	beq.n	80006a4 <tactic_yellow_2+0x340>
			interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 8000688:	79ba      	ldrb	r2, [r7, #6]
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f926 	bl	80008e0 <interrupted_func_right_diagonal_sideway>
			tactic_state+=3;
 8000694:	4b86      	ldr	r3, [pc, #536]	; (80008b0 <tactic_yellow_2+0x54c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	3303      	adds	r3, #3
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4b84      	ldr	r3, [pc, #528]	; (80008b0 <tactic_yellow_2+0x54c>)
 80006a0:	701a      	strb	r2, [r3, #0]
 80006a2:	e017      	b.n	80006d4 <tactic_yellow_2+0x370>

		} else {
			ax_wheel_mode(AX_Pogonski);
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff fde9 	bl	800027e <ax_wheel_mode>
			TajmerDelay(100);
 80006ac:	2064      	movs	r0, #100	; 0x64
 80006ae:	f000 fb07 	bl	8000cc0 <TajmerDelay>
			ax_angle_move(AX_Pogonski, 0, 1023);
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd86 	bl	80001cc <ax_angle_move>

			TajmerDelay(150);
 80006c0:	2096      	movs	r0, #150	; 0x96
 80006c2:	f000 fafd 	bl	8000cc0 <TajmerDelay>
			tactic_state++;
 80006c6:	4b7a      	ldr	r3, [pc, #488]	; (80008b0 <tactic_yellow_2+0x54c>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	3301      	adds	r3, #1
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b77      	ldr	r3, [pc, #476]	; (80008b0 <tactic_yellow_2+0x54c>)
 80006d2:	701a      	strb	r2, [r3, #0]
		}
	case 8:
			sensors_case_timer = SENSOR_JJ;
 80006d4:	4b74      	ldr	r3, [pc, #464]	; (80008a8 <tactic_yellow_2+0x544>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 80006da:	4b74      	ldr	r3, [pc, #464]	; (80008ac <tactic_yellow_2+0x548>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00d      	beq.n	8000700 <tactic_yellow_2+0x39c>
				interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 80006e4:	79ba      	ldrb	r2, [r7, #6]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f8f8 	bl	80008e0 <interrupted_func_right_diagonal_sideway>
				tactic_state+=2;
 80006f0:	4b6f      	ldr	r3, [pc, #444]	; (80008b0 <tactic_yellow_2+0x54c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	3302      	adds	r3, #2
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b6d      	ldr	r3, [pc, #436]	; (80008b0 <tactic_yellow_2+0x54c>)
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	e017      	b.n	8000730 <tactic_yellow_2+0x3cc>

			} else {
				ax_wheel_mode(AX_Pogonski);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fdbb 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000708:	2064      	movs	r0, #100	; 0x64
 800070a:	f000 fad9 	bl	8000cc0 <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 1023);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff fd58 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 800071c:	2096      	movs	r0, #150	; 0x96
 800071e:	f000 facf 	bl	8000cc0 <TajmerDelay>
				tactic_state++;
 8000722:	4b63      	ldr	r3, [pc, #396]	; (80008b0 <tactic_yellow_2+0x54c>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	3301      	adds	r3, #1
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b60      	ldr	r3, [pc, #384]	; (80008b0 <tactic_yellow_2+0x54c>)
 800072e:	701a      	strb	r2, [r3, #0]
			}
	case 9:
			sensors_case_timer = SENSOR_JJ;
 8000730:	4b5d      	ldr	r3, [pc, #372]	; (80008a8 <tactic_yellow_2+0x544>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 8000736:	4b5d      	ldr	r3, [pc, #372]	; (80008ac <tactic_yellow_2+0x548>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00d      	beq.n	800075c <tactic_yellow_2+0x3f8>
				interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 8000740:	79ba      	ldrb	r2, [r7, #6]
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f8ca 	bl	80008e0 <interrupted_func_right_diagonal_sideway>
				tactic_state+=2;
 800074c:	4b58      	ldr	r3, [pc, #352]	; (80008b0 <tactic_yellow_2+0x54c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	3302      	adds	r3, #2
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b56      	ldr	r3, [pc, #344]	; (80008b0 <tactic_yellow_2+0x54c>)
 8000758:	701a      	strb	r2, [r3, #0]
 800075a:	e017      	b.n	800078c <tactic_yellow_2+0x428>
			} else {
				ax_wheel_mode(AX_Pogonski);
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fd8d 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000764:	2064      	movs	r0, #100	; 0x64
 8000766:	f000 faab 	bl	8000cc0 <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 1023);
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fd2a 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 8000778:	2096      	movs	r0, #150	; 0x96
 800077a:	f000 faa1 	bl	8000cc0 <TajmerDelay>
				tactic_state++;
 800077e:	4b4c      	ldr	r3, [pc, #304]	; (80008b0 <tactic_yellow_2+0x54c>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	3301      	adds	r3, #1
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4b49      	ldr	r3, [pc, #292]	; (80008b0 <tactic_yellow_2+0x54c>)
 800078a:	701a      	strb	r2, [r3, #0]
			}
	case 10:
			sensors_case_timer = SENSOR_JJ;
 800078c:	4b46      	ldr	r3, [pc, #280]	; (80008a8 <tactic_yellow_2+0x544>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 8000792:	4b46      	ldr	r3, [pc, #280]	; (80008ac <tactic_yellow_2+0x548>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00d      	beq.n	80007b8 <tactic_yellow_2+0x454>
				interrupted_func_right_diagonal_sideway(AX_Pogonski, AX_Zakretni);
 800079c:	79ba      	ldrb	r2, [r7, #6]
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f89c 	bl	80008e0 <interrupted_func_right_diagonal_sideway>
				tactic_state+=2;
 80007a8:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <tactic_yellow_2+0x54c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	3302      	adds	r3, #2
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b3f      	ldr	r3, [pc, #252]	; (80008b0 <tactic_yellow_2+0x54c>)
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	e017      	b.n	80007e8 <tactic_yellow_2+0x484>
			} else {
				ax_wheel_mode(AX_Pogonski);
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fd5f 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 80007c0:	2064      	movs	r0, #100	; 0x64
 80007c2:	f000 fa7d 	bl	8000cc0 <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 1023);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fcfc 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 80007d4:	2096      	movs	r0, #150	; 0x96
 80007d6:	f000 fa73 	bl	8000cc0 <TajmerDelay>
				tactic_state++;
 80007da:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <tactic_yellow_2+0x54c>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	3301      	adds	r3, #1
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <tactic_yellow_2+0x54c>)
 80007e6:	701a      	strb	r2, [r3, #0]
			}
	case 11:
			sensors_case_timer = SENSOR_JJ;
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <tactic_yellow_2+0x544>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 80007ee:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <tactic_yellow_2+0x548>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d007      	beq.n	8000808 <tactic_yellow_2+0x4a4>
				tactic_state = 11;
 80007f8:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <tactic_yellow_2+0x54c>)
 80007fa:	220b      	movs	r2, #11
 80007fc:	701a      	strb	r2, [r3, #0]
				interrupted_func_stop(AX_Pogonski);
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f857 	bl	80008b4 <interrupted_func_stop>
 8000806:	e017      	b.n	8000838 <tactic_yellow_2+0x4d4>


			} else {
				ax_wheel_mode(AX_Pogonski);
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fd37 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000810:	2064      	movs	r0, #100	; 0x64
 8000812:	f000 fa55 	bl	8000cc0 <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 767);
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f240 22ff 	movw	r2, #767	; 0x2ff
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fcd4 	bl	80001cc <ax_angle_move>

				TajmerDelay(150);
 8000824:	2096      	movs	r0, #150	; 0x96
 8000826:	f000 fa4b 	bl	8000cc0 <TajmerDelay>
				tactic_state++;
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <tactic_yellow_2+0x54c>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	3301      	adds	r3, #1
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <tactic_yellow_2+0x54c>)
 8000836:	701a      	strb	r2, [r3, #0]
			}
	case 12:
			sensors_case_timer = SENSOR_JJ;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <tactic_yellow_2+0x544>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]

			if (interrupted) {
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <tactic_yellow_2+0x548>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d007      	beq.n	8000858 <tactic_yellow_2+0x4f4>
				tactic_state = 12;
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <tactic_yellow_2+0x54c>)
 800084a:	220c      	movs	r2, #12
 800084c:	701a      	strb	r2, [r3, #0]
				interrupted_func_stop(AX_Pogonski);
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f82f 	bl	80008b4 <interrupted_func_stop>
				ax_angle_move(AX_Pogonski, 0, 767);

				TajmerDelay(150);
				tactic_state++;
			}
		break;
 8000856:	e022      	b.n	800089e <tactic_yellow_2+0x53a>
				ax_wheel_mode(AX_Pogonski);
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fd0f 	bl	800027e <ax_wheel_mode>
				TajmerDelay(100);
 8000860:	2064      	movs	r0, #100	; 0x64
 8000862:	f000 fa2d 	bl	8000cc0 <TajmerDelay>
				ax_angle_move(AX_Pogonski, 0, 767);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f240 22ff 	movw	r2, #767	; 0x2ff
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fcac 	bl	80001cc <ax_angle_move>
				TajmerDelay(150);
 8000874:	2096      	movs	r0, #150	; 0x96
 8000876:	f000 fa23 	bl	8000cc0 <TajmerDelay>
				tactic_state++;
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <tactic_yellow_2+0x54c>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	3301      	adds	r3, #1
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <tactic_yellow_2+0x54c>)
 8000886:	701a      	strb	r2, [r3, #0]
		break;
 8000888:	e009      	b.n	800089e <tactic_yellow_2+0x53a>
	case 13:
		ax_angle_move(AX_Pogonski, 0, 0);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fc9b 	bl	80001cc <ax_angle_move>
		break;
 8000896:	e002      	b.n	800089e <tactic_yellow_2+0x53a>
	default:
		break;
 8000898:	bf00      	nop
 800089a:	e000      	b.n	800089e <tactic_yellow_2+0x53a>
		break;
 800089c:	bf00      	nop
	}
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000034 	.word	0x20000034
 80008ac:	20000035 	.word	0x20000035
 80008b0:	2000002c 	.word	0x2000002c

080008b4 <interrupted_func_stop>:
		}
}

static void
interrupted_func_stop (uint8_t AX_Pogonski)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
	TajmerDelay(200);
 80008be:	20c8      	movs	r0, #200	; 0xc8
 80008c0:	f000 f9fe 	bl	8000cc0 <TajmerDelay>
    ax_angle_move(AX_Pogonski, 0, 0);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fc7e 	bl	80001cc <ax_angle_move>
    TajmerDelay(500);
 80008d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d4:	f000 f9f4 	bl	8000cc0 <TajmerDelay>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <interrupted_func_right_diagonal_sideway>:
	TajmerDelay(200);
}

static void
interrupted_func_right_diagonal_sideway(uint8_t AX_Pogonski, uint8_t AX_Zakretni)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	460a      	mov	r2, r1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	71bb      	strb	r3, [r7, #6]
	ax_angle_move(ID_SIMA2_POGONSKI, 0, 767);
 80008f0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80008f4:	2100      	movs	r1, #0
 80008f6:	2005      	movs	r0, #5
 80008f8:	f7ff fc68 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 80008fc:	20c8      	movs	r0, #200	; 0xc8
 80008fe:	f000 f9df 	bl	8000cc0 <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 8000902:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000906:	f240 11b7 	movw	r1, #439	; 0x1b7
 800090a:	2006      	movs	r0, #6
 800090c:	f7ff fc5e 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 8000910:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000914:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000918:	2006      	movs	r0, #6
 800091a:	f7ff fc57 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 800091e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000922:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000926:	2006      	movs	r0, #6
 8000928:	f7ff fc50 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, DESNO, 1000);
 800092c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000930:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000934:	2006      	movs	r0, #6
 8000936:	f7ff fc49 	bl	80001cc <ax_angle_move>
		TajmerDelay(300);
 800093a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800093e:	f000 f9bf 	bl	8000cc0 <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000946:	f240 213a 	movw	r1, #570	; 0x23a
 800094a:	2006      	movs	r0, #6
 800094c:	f7ff fc3e 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000954:	f240 213a 	movw	r1, #570	; 0x23a
 8000958:	2006      	movs	r0, #6
 800095a:	f7ff fc37 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 800095e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000962:	f240 213a 	movw	r1, #570	; 0x23a
 8000966:	2006      	movs	r0, #6
 8000968:	f7ff fc30 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 800096c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000970:	f240 213a 	movw	r1, #570	; 0x23a
 8000974:	2006      	movs	r0, #6
 8000976:	f7ff fc29 	bl	80001cc <ax_angle_move>
		TajmerDelay(200);
 800097a:	20c8      	movs	r0, #200	; 0xc8
 800097c:	f000 f9a0 	bl	8000cc0 <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000980:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000984:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000988:	2006      	movs	r0, #6
 800098a:	f7ff fc1f 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 800098e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000992:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000996:	2006      	movs	r0, #6
 8000998:	f7ff fc18 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 800099c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a0:	f240 21c7 	movw	r1, #711	; 0x2c7
 80009a4:	2006      	movs	r0, #6
 80009a6:	f7ff fc11 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 80009aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ae:	f240 21c7 	movw	r1, #711	; 0x2c7
 80009b2:	2006      	movs	r0, #6
 80009b4:	f7ff fc0a 	bl	80001cc <ax_angle_move>
		TajmerDelay(300);
 80009b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009bc:	f000 f980 	bl	8000cc0 <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80009c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009c4:	f240 213a 	movw	r1, #570	; 0x23a
 80009c8:	2006      	movs	r0, #6
 80009ca:	f7ff fbff 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80009ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009d2:	f240 213a 	movw	r1, #570	; 0x23a
 80009d6:	2006      	movs	r0, #6
 80009d8:	f7ff fbf8 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80009dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009e0:	f240 213a 	movw	r1, #570	; 0x23a
 80009e4:	2006      	movs	r0, #6
 80009e6:	f7ff fbf1 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 80009ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ee:	f240 213a 	movw	r1, #570	; 0x23a
 80009f2:	2006      	movs	r0, #6
 80009f4:	f7ff fbea 	bl	80001cc <ax_angle_move>
		TajmerDelay(1250);
 80009f8:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80009fc:	f000 f960 	bl	8000cc0 <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a04:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000a08:	2006      	movs	r0, #6
 8000a0a:	f7ff fbdf 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a12:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000a16:	2006      	movs	r0, #6
 8000a18:	f7ff fbd8 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a20:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000a24:	2006      	movs	r0, #6
 8000a26:	f7ff fbd1 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, LEVO, 1000);
 8000a2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a2e:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000a32:	2006      	movs	r0, #6
 8000a34:	f7ff fbca 	bl	80001cc <ax_angle_move>
		TajmerDelay(300);
 8000a38:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a3c:	f000 f940 	bl	8000cc0 <TajmerDelay>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000a40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a44:	f240 213a 	movw	r1, #570	; 0x23a
 8000a48:	2006      	movs	r0, #6
 8000a4a:	f7ff fbbf 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000a4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a52:	f240 213a 	movw	r1, #570	; 0x23a
 8000a56:	2006      	movs	r0, #6
 8000a58:	f7ff fbb8 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000a5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a60:	f240 213a 	movw	r1, #570	; 0x23a
 8000a64:	2006      	movs	r0, #6
 8000a66:	f7ff fbb1 	bl	80001cc <ax_angle_move>
		ax_angle_move(ID_SIMA2_ZAKRETNI, PRAVO, 1000);
 8000a6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a6e:	f240 213a 	movw	r1, #570	; 0x23a
 8000a72:	2006      	movs	r0, #6
 8000a74:	f7ff fbaa 	bl	80001cc <ax_angle_move>
		TajmerDelay(500);
 8000a78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a7c:	f000 f920 	bl	8000cc0 <TajmerDelay>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <io>:
static void
portA_init();

void
io ()
 {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	portC_init();
 8000a8c:	f000 f806 	bl	8000a9c <portC_init>
	portB_init();
 8000a90:	f000 f814 	bl	8000abc <portB_init>
	portA_init();
 8000a94:	f000 f842 	bl	8000b1c <portA_init>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <portC_init>:

static void
portC_init()
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (0b1 << 2);
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <portC_init+0x1c>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <portC_init+0x1c>)
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <portB_init>:

static void
portB_init()
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (0b1 << 1);
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <portB_init+0x58>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac4:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <portB_init+0x58>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB->MODER &= ~(0b11 << 2 * 3);
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <portB_init+0x5c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <portB_init+0x5c>)
 8000ad2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000ad6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << 2 * 3);
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <portB_init+0x5c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <portB_init+0x5c>)
 8000ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae2:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(0b1 << 3);
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <portB_init+0x5c>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <portB_init+0x5c>)
 8000aea:	f023 0308 	bic.w	r3, r3, #8
 8000aee:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (0b11 << 2 * 3);
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <portB_init+0x5c>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <portB_init+0x5c>)
 8000af6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000afa:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~(0b11 << 2 * 3);
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <portB_init+0x5c>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <portB_init+0x5c>)
 8000b02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000400 	.word	0x48000400

08000b1c <portA_init>:

static void
portA_init()
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (0b1 << 0);
 8000b20:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <portA_init+0x88>)
 8000b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b24:	4a1f      	ldr	r2, [pc, #124]	; (8000ba4 <portA_init+0x88>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOA->MODER &= ~(0b11 << 2 * CINC);
 8000b2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2207      	movs	r2, #7
 8000b34:	0052      	lsls	r2, r2, #1
 8000b36:	2103      	movs	r1, #3
 8000b38:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3c:	43d2      	mvns	r2, r2
 8000b3e:	4611      	mov	r1, r2
 8000b40:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b44:	400b      	ands	r3, r1
 8000b46:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * CINC); //low speed
 8000b48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	2207      	movs	r2, #7
 8000b50:	0052      	lsls	r2, r2, #1
 8000b52:	2103      	movs	r1, #3
 8000b54:	fa01 f202 	lsl.w	r2, r1, r2
 8000b58:	43d2      	mvns	r2, r2
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b60:	400b      	ands	r3, r1
 8000b62:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(0b11 << 2 *CINC);
 8000b64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	2207      	movs	r2, #7
 8000b6c:	0052      	lsls	r2, r2, #1
 8000b6e:	2103      	movs	r1, #3
 8000b70:	fa01 f202 	lsl.w	r2, r1, r2
 8000b74:	43d2      	mvns	r2, r2
 8000b76:	4611      	mov	r1, r2
 8000b78:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b7c:	400b      	ands	r3, r1
 8000b7e:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0b10 << 2*CINC);
 8000b80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	2207      	movs	r2, #7
 8000b88:	0052      	lsls	r2, r2, #1
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b90:	4611      	mov	r1, r2
 8000b92:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b96:	430b      	orrs	r3, r1
 8000b98:	60d3      	str	r3, [r2, #12]
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <IO_cinc>:

}

bool
IO_cinc()
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
	if(!(GPIOA->IDR & (0b1 << CINC)))
 8000bac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	2207      	movs	r2, #7
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	408a      	lsls	r2, r1
 8000bba:	4013      	ands	r3, r2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d107      	bne.n	8000bd0 <IO_cinc+0x28>
		counter++;
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <IO_cinc+0x48>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <IO_cinc+0x48>)
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	e002      	b.n	8000bd6 <IO_cinc+0x2e>
	else
		counter=0;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <IO_cinc+0x48>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
	if(counter)
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <IO_cinc+0x48>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <IO_cinc+0x3c>
		return true;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e000      	b.n	8000be6 <IO_cinc+0x3e>
	return false;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	2000002d 	.word	0x2000002d

08000bf4 <tajmer_init>:
volatile bool interrupted = false;


void
tajmer_init()
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
 tim2_init();
 8000bf8:	f000 f802 	bl	8000c00 <tim2_init>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <tim2_init>:

static void
tim2_init()
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= (0b1 << 0);
 8000c06:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <tim2_init+0xb8>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	4a2b      	ldr	r2, [pc, #172]	; (8000cb8 <tim2_init+0xb8>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6593      	str	r3, [r2, #88]	; 0x58

	TIM2-> PSC = 80-1; //80MHz -> 1MHz
 8000c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c16:	224f      	movs	r2, #79	; 0x4f
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28

	TIM2-> ARR = 1000-1; //1MHz -> 1kHz
 8000c1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 &= ~((0b1 << 1) || (0b1 << 2));
 8000c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2e:	f023 0301 	bic.w	r3, r3, #1
 8000c32:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= (0b1 << 0);
 8000c34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6153      	str	r3, [r2, #20]

	TIM2->DIER |= (0b1 << 0);
 8000c44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	60d3      	str	r3, [r2, #12]

	while (!(TIM2->SR & (0b1 << 0)));
 8000c54:	bf00      	nop
 8000c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d0f8      	beq.n	8000c56 <tim2_init+0x56>

	TIM2->SR &= ~(0b1 << 0);
 8000c64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6e:	f023 0301 	bic.w	r3, r3, #1
 8000c72:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= (0b1 << 2);
 8000c74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	6013      	str	r3, [r2, #0]

	uint8_t const TIM2_PREKID = 28;
 8000c84:	231c      	movs	r3, #28
 8000c86:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[0] |= (0b1 << TIM2_PREKID);
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <tim2_init+0xbc>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	79fa      	ldrb	r2, [r7, #7]
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fa01 f202 	lsl.w	r2, r1, r2
 8000c94:	4611      	mov	r1, r2
 8000c96:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <tim2_init+0xbc>)
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	6013      	str	r3, [r2, #0]

	TIM2->CR1 |= (0b1 << 0);
 8000c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <TajmerDelay>:
    return false;
  flag_delay = true;
  return true;
}

void TajmerDelay(uint32_t ms) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	uint32_t PocVreme = sys_time_ms;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <TajmerDelay+0x30>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	60fb      	str	r3, [r7, #12]
	while (sys_time_ms <= PocVreme + ms) {
 8000cce:	e000      	b.n	8000cd2 <TajmerDelay+0x12>
		__NOP();
 8000cd0:	bf00      	nop
	while (sys_time_ms <= PocVreme + ms) {
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	441a      	add	r2, r3
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <TajmerDelay+0x30>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d2f7      	bcs.n	8000cd0 <TajmerDelay+0x10>
	}

}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000030 	.word	0x20000030

08000cf4 <TIM2_IRQHandler>:

void
TIM2_IRQHandler ()
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  // poziva se svake milisekunde
  // proveri da li je stvarno TIM2 pozvao rutinu
  if ((TIM2->SR & (0b1 << 0)) == (0b1 << 0))
 8000cf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d10c      	bne.n	8000d20 <TIM2_IRQHandler+0x2c>
    {
      TIM2->SR &= ~(0b1 << 0);	// da bi sledeci put mogli da detektujemo prekid
 8000d06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d0a:	691b      	ldr	r3, [r3, #16]
 8000d0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d10:	f023 0301 	bic.w	r3, r3, #1
 8000d14:	6113      	str	r3, [r2, #16]

      sys_time_ms++;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <TIM2_IRQHandler+0x5c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <TIM2_IRQHandler+0x5c>)
 8000d1e:	6013      	str	r3, [r2, #0]
    }

  switch (sensors_case_timer) {
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <TIM2_IRQHandler+0x60>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d008      	beq.n	8000d3c <TIM2_IRQHandler+0x48>
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d10a      	bne.n	8000d44 <TIM2_IRQHandler+0x50>
	case SENSOR_JJ:
		interrupted = sensor_JedanJedini();
 8000d2e:	f7ff fb01 	bl	8000334 <sensor_JedanJedini>
 8000d32:	4603      	mov	r3, r0
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <TIM2_IRQHandler+0x64>)
 8000d38:	701a      	strb	r2, [r3, #0]
		break;
 8000d3a:	e007      	b.n	8000d4c <TIM2_IRQHandler+0x58>
	case SENSORS_OFF:
		  interrupted = false;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <TIM2_IRQHandler+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
		  break;
 8000d42:	e003      	b.n	8000d4c <TIM2_IRQHandler+0x58>
	default:
		  interrupted = false;
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <TIM2_IRQHandler+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
		break;
 8000d4a:	bf00      	nop
    }
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000030 	.word	0x20000030
 8000d54:	20000034 	.word	0x20000034
 8000d58:	20000035 	.word	0x20000035

08000d5c <UART_init>:
static void
UART1_init();

void
UART_init()
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	UART1_init();
 8000d60:	f000 f802 	bl	8000d68 <UART1_init>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <UART1_init>:

static void
UART1_init()
{
 8000d68:	b490      	push	{r4, r7}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
	//PB6 i PB7 AF7
	RCC->APB2ENR |= (0b1 << 14); //takt na USART1
 8000d6e:	4b99      	ldr	r3, [pc, #612]	; (8000fd4 <UART1_init+0x26c>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d72:	4a98      	ldr	r2, [pc, #608]	; (8000fd4 <UART1_init+0x26c>)
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d78:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->AHB2ENR |= (0b1 << 1); //takt za gpioB
 8000d7a:	4b96      	ldr	r3, [pc, #600]	; (8000fd4 <UART1_init+0x26c>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	4a95      	ldr	r2, [pc, #596]	; (8000fd4 <UART1_init+0x26c>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	64d3      	str	r3, [r2, #76]	; 0x4c

	uint8_t const TX_PIN = 6;
 8000d86:	2306      	movs	r3, #6
 8000d88:	71fb      	strb	r3, [r7, #7]
	uint8_t const RX_PIN = 7;
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	71bb      	strb	r3, [r7, #6]

	GPIOB->MODER &= ~(0b11 << TX_PIN * 2);
 8000d8e:	4b92      	ldr	r3, [pc, #584]	; (8000fd8 <UART1_init+0x270>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	79fa      	ldrb	r2, [r7, #7]
 8000d94:	0052      	lsls	r2, r2, #1
 8000d96:	2103      	movs	r1, #3
 8000d98:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9c:	43d2      	mvns	r2, r2
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4a8d      	ldr	r2, [pc, #564]	; (8000fd8 <UART1_init+0x270>)
 8000da2:	400b      	ands	r3, r1
 8000da4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0b11 << RX_PIN * 2);
 8000da6:	4b8c      	ldr	r3, [pc, #560]	; (8000fd8 <UART1_init+0x270>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	79ba      	ldrb	r2, [r7, #6]
 8000dac:	0052      	lsls	r2, r2, #1
 8000dae:	2103      	movs	r1, #3
 8000db0:	fa01 f202 	lsl.w	r2, r1, r2
 8000db4:	43d2      	mvns	r2, r2
 8000db6:	4611      	mov	r1, r2
 8000db8:	4a87      	ldr	r2, [pc, #540]	; (8000fd8 <UART1_init+0x270>)
 8000dba:	400b      	ands	r3, r1
 8000dbc:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << TX_PIN * 2);
 8000dbe:	4b86      	ldr	r3, [pc, #536]	; (8000fd8 <UART1_init+0x270>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	79fa      	ldrb	r2, [r7, #7]
 8000dc4:	0052      	lsls	r2, r2, #1
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4a82      	ldr	r2, [pc, #520]	; (8000fd8 <UART1_init+0x270>)
 8000dd0:	430b      	orrs	r3, r1
 8000dd2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << RX_PIN * 2);
 8000dd4:	4b80      	ldr	r3, [pc, #512]	; (8000fd8 <UART1_init+0x270>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	79ba      	ldrb	r2, [r7, #6]
 8000dda:	0052      	lsls	r2, r2, #1
 8000ddc:	2102      	movs	r1, #2
 8000dde:	fa01 f202 	lsl.w	r2, r1, r2
 8000de2:	4611      	mov	r1, r2
 8000de4:	4a7c      	ldr	r2, [pc, #496]	; (8000fd8 <UART1_init+0x270>)
 8000de6:	430b      	orrs	r3, r1
 8000de8:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER |= (0b1 << TX_PIN);
 8000dea:	4b7b      	ldr	r3, [pc, #492]	; (8000fd8 <UART1_init+0x270>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	79fa      	ldrb	r2, [r7, #7]
 8000df0:	2101      	movs	r1, #1
 8000df2:	fa01 f202 	lsl.w	r2, r1, r2
 8000df6:	4611      	mov	r1, r2
 8000df8:	4a77      	ldr	r2, [pc, #476]	; (8000fd8 <UART1_init+0x270>)
 8000dfa:	430b      	orrs	r3, r1
 8000dfc:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(0b11 << TX_PIN*2);
 8000dfe:	4b76      	ldr	r3, [pc, #472]	; (8000fd8 <UART1_init+0x270>)
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	79fa      	ldrb	r2, [r7, #7]
 8000e04:	0052      	lsls	r2, r2, #1
 8000e06:	2103      	movs	r1, #3
 8000e08:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0c:	43d2      	mvns	r2, r2
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4a71      	ldr	r2, [pc, #452]	; (8000fd8 <UART1_init+0x270>)
 8000e12:	400b      	ands	r3, r1
 8000e14:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0b01 << TX_PIN*2);
 8000e16:	4b70      	ldr	r3, [pc, #448]	; (8000fd8 <UART1_init+0x270>)
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	79fa      	ldrb	r2, [r7, #7]
 8000e1c:	0052      	lsls	r2, r2, #1
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	4611      	mov	r1, r2
 8000e26:	4a6c      	ldr	r2, [pc, #432]	; (8000fd8 <UART1_init+0x270>)
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	60d3      	str	r3, [r2, #12]

	uint8_t const Alt_function = 7;
 8000e2c:	2307      	movs	r3, #7
 8000e2e:	717b      	strb	r3, [r7, #5]

	GPIOB->AFR[TX_PIN / 8] &= ~(0b1111 << (TX_PIN % 8) * 4);
 8000e30:	4a69      	ldr	r2, [pc, #420]	; (8000fd8 <UART1_init+0x270>)
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	08db      	lsrs	r3, r3, #3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	3308      	adds	r3, #8
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	79fa      	ldrb	r2, [r7, #7]
 8000e40:	f002 0207 	and.w	r2, r2, #7
 8000e44:	0092      	lsls	r2, r2, #2
 8000e46:	210f      	movs	r1, #15
 8000e48:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4c:	43d2      	mvns	r2, r2
 8000e4e:	4614      	mov	r4, r2
 8000e50:	4961      	ldr	r1, [pc, #388]	; (8000fd8 <UART1_init+0x270>)
 8000e52:	79fa      	ldrb	r2, [r7, #7]
 8000e54:	08d2      	lsrs	r2, r2, #3
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	4610      	mov	r0, r2
 8000e5a:	ea03 0204 	and.w	r2, r3, r4
 8000e5e:	f100 0308 	add.w	r3, r0, #8
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[TX_PIN / 8] |= (Alt_function << (TX_PIN % 8) * 4);
 8000e66:	4a5c      	ldr	r2, [pc, #368]	; (8000fd8 <UART1_init+0x270>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	08db      	lsrs	r3, r3, #3
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	3308      	adds	r3, #8
 8000e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e74:	7979      	ldrb	r1, [r7, #5]
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	f002 0207 	and.w	r2, r2, #7
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e82:	4614      	mov	r4, r2
 8000e84:	4954      	ldr	r1, [pc, #336]	; (8000fd8 <UART1_init+0x270>)
 8000e86:	79fa      	ldrb	r2, [r7, #7]
 8000e88:	08d2      	lsrs	r2, r2, #3
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	ea43 0204 	orr.w	r2, r3, r4
 8000e92:	f100 0308 	add.w	r3, r0, #8
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] &= ~(0b1111 << (RX_PIN % 8) * 4);
 8000e9a:	4a4f      	ldr	r2, [pc, #316]	; (8000fd8 <UART1_init+0x270>)
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	08db      	lsrs	r3, r3, #3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	3308      	adds	r3, #8
 8000ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea8:	79ba      	ldrb	r2, [r7, #6]
 8000eaa:	f002 0207 	and.w	r2, r2, #7
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	210f      	movs	r1, #15
 8000eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb6:	43d2      	mvns	r2, r2
 8000eb8:	4614      	mov	r4, r2
 8000eba:	4947      	ldr	r1, [pc, #284]	; (8000fd8 <UART1_init+0x270>)
 8000ebc:	79ba      	ldrb	r2, [r7, #6]
 8000ebe:	08d2      	lsrs	r2, r2, #3
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	ea03 0204 	and.w	r2, r3, r4
 8000ec8:	f100 0308 	add.w	r3, r0, #8
 8000ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[RX_PIN / 8] |= (Alt_function << (RX_PIN % 8) * 4);
 8000ed0:	4a41      	ldr	r2, [pc, #260]	; (8000fd8 <UART1_init+0x270>)
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	08db      	lsrs	r3, r3, #3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	3308      	adds	r3, #8
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	7979      	ldrb	r1, [r7, #5]
 8000ee0:	79ba      	ldrb	r2, [r7, #6]
 8000ee2:	f002 0207 	and.w	r2, r2, #7
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eec:	4614      	mov	r4, r2
 8000eee:	493a      	ldr	r1, [pc, #232]	; (8000fd8 <UART1_init+0x270>)
 8000ef0:	79ba      	ldrb	r2, [r7, #6]
 8000ef2:	08d2      	lsrs	r2, r2, #3
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	ea43 0204 	orr.w	r2, r3, r4
 8000efc:	f100 0308 	add.w	r3, r0, #8
 8000f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

     USART1->CR1 &= ~(0b1 << 12);
 8000f04:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <UART1_init+0x274>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a34      	ldr	r2, [pc, #208]	; (8000fdc <UART1_init+0x274>)
 8000f0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f0e:	6013      	str	r3, [r2, #0]
     USART1->CR1 &= ~(0b1 << 28); //8 bita
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <UART1_init+0x274>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a31      	ldr	r2, [pc, #196]	; (8000fdc <UART1_init+0x274>)
 8000f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	6013      	str	r3, [r2, #0]
     USART1->CR2 &= ~(0b11 << 12); //1 stop bit
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <UART1_init+0x274>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	4a2e      	ldr	r2, [pc, #184]	; (8000fdc <UART1_init+0x274>)
 8000f22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f26:	6053      	str	r3, [r2, #4]

     USART1->BRR = 0; //baud 9600
 8000f28:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <UART1_init+0x274>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
     USART1->BRR |= ((546 << 4) | (14 << 0));
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <UART1_init+0x274>)
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	4a2a      	ldr	r2, [pc, #168]	; (8000fdc <UART1_init+0x274>)
 8000f34:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8000f38:	f043 032e 	orr.w	r3, r3, #46	; 0x2e
 8000f3c:	60d3      	str	r3, [r2, #12]

     USART1->CR1 |= (0b11 << 2); //tx & rx pin enable
 8000f3e:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <UART1_init+0x274>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a26      	ldr	r2, [pc, #152]	; (8000fdc <UART1_init+0x274>)
 8000f44:	f043 030c 	orr.w	r3, r3, #12
 8000f48:	6013      	str	r3, [r2, #0]

     USART1->CR1 |= (0b1 << 5); //interrupt enable
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <UART1_init+0x274>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <UART1_init+0x274>)
 8000f50:	f043 0320 	orr.w	r3, r3, #32
 8000f54:	6013      	str	r3, [r2, #0]

     USART1->CR2 &= ~(0b1 << 11);
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <UART1_init+0x274>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <UART1_init+0x274>)
 8000f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f60:	6053      	str	r3, [r2, #4]
     USART1->CR2 &= ~(0b1 << 14);
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <UART1_init+0x274>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <UART1_init+0x274>)
 8000f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f6c:	6053      	str	r3, [r2, #4]
     USART1->CR3 &= ~(0b1 << 1);
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <UART1_init+0x274>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	4a1a      	ldr	r2, [pc, #104]	; (8000fdc <UART1_init+0x274>)
 8000f74:	f023 0302 	bic.w	r3, r3, #2
 8000f78:	6093      	str	r3, [r2, #8]
     USART1->CR3 &= ~(0b1 << 5);
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <UART1_init+0x274>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <UART1_init+0x274>)
 8000f80:	f023 0320 	bic.w	r3, r3, #32
 8000f84:	6093      	str	r3, [r2, #8]
     USART1->CR3 |= (0b1 << 3);
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <UART1_init+0x274>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <UART1_init+0x274>)
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	6093      	str	r3, [r2, #8]

    uint8_t  USART1_INTERRUPT = 37;
 8000f92:	2325      	movs	r3, #37	; 0x25
 8000f94:	713b      	strb	r3, [r7, #4]
    NVIC->ISER[USART1_INTERRUPT / 32] |= (0b1 <<  USART1_INTERRUPT % 32);
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <UART1_init+0x278>)
 8000f98:	793b      	ldrb	r3, [r7, #4]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	b2d8      	uxtb	r0, r3
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa4:	793a      	ldrb	r2, [r7, #4]
 8000fa6:	f002 021f 	and.w	r2, r2, #31
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb0:	4614      	mov	r4, r2
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <UART1_init+0x278>)
 8000fb4:	4601      	mov	r1, r0
 8000fb6:	4323      	orrs	r3, r4
 8000fb8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

     USART1-> CR1 |= (0b1 << 0); //usart enable
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <UART1_init+0x274>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <UART1_init+0x274>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc90      	pop	{r4, r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48000400 	.word	0x48000400
 8000fdc:	40013800 	.word	0x40013800
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <UART_send_byte>:

void
UART_send_byte (uint8_t data)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
   USART1->TDR = data; //ovako se salje, kada je  USART1->dr sa desne strane, onda se ponasa kao recieve registar
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <UART_send_byte+0x38>)
 8000ff0:	79fa      	ldrb	r2, [r7, #7]
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	851a      	strh	r2, [r3, #40]	; 0x28

  while (!( USART1->ISR & (0b1 << 6)))
 8000ff6:	bf00      	nop
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <UART_send_byte+0x38>)
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f9      	beq.n	8000ff8 <UART_send_byte+0x14>
	  ;

   USART1->ISR &= ~(0b1 << 6);
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <UART_send_byte+0x38>)
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <UART_send_byte+0x38>)
 800100a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800100e:	61d3      	str	r3, [r2, #28]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	40013800 	.word	0x40013800

08001020 <UART_write>:

void
UART_write (uint8_t data)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if (buffer_size != MAX_BUFFER_SIZE)
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <UART_write+0xa0>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b20      	cmp	r3, #32
 8001032:	d01c      	beq.n	800106e <UART_write+0x4e>
    {
      buffer[index_write] = data;
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <UART_write+0xa4>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4619      	mov	r1, r3
 800103c:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <UART_write+0xa8>)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <UART_write+0xa4>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	3301      	adds	r3, #1
 800104a:	425a      	negs	r2, r3
 800104c:	f003 031f 	and.w	r3, r3, #31
 8001050:	f002 021f 	and.w	r2, r2, #31
 8001054:	bf58      	it	pl
 8001056:	4253      	negpl	r3, r2
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <UART_write+0xa4>)
 800105c:	701a      	strb	r2, [r3, #0]
      buffer_size++;
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <UART_write+0xa0>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	3301      	adds	r3, #1
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <UART_write+0xa0>)
 800106a:	701a      	strb	r2, [r3, #0]
    {
      buffer[index_write] = data;
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
    }
}
 800106c:	e022      	b.n	80010b4 <UART_write+0x94>
      buffer[index_write] = data;
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <UART_write+0xa4>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <UART_write+0xa8>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	5453      	strb	r3, [r2, r1]
      index_write = (index_write + 1) % MAX_BUFFER_SIZE;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <UART_write+0xa4>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	3301      	adds	r3, #1
 8001084:	425a      	negs	r2, r3
 8001086:	f003 031f 	and.w	r3, r3, #31
 800108a:	f002 021f 	and.w	r2, r2, #31
 800108e:	bf58      	it	pl
 8001090:	4253      	negpl	r3, r2
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <UART_write+0xa4>)
 8001096:	701a      	strb	r2, [r3, #0]
      index_read = (index_read + 1) % MAX_BUFFER_SIZE;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <UART_write+0xac>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	3301      	adds	r3, #1
 80010a0:	425a      	negs	r2, r3
 80010a2:	f003 031f 	and.w	r3, r3, #31
 80010a6:	f002 021f 	and.w	r2, r2, #31
 80010aa:	bf58      	it	pl
 80010ac:	4253      	negpl	r3, r2
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <UART_write+0xac>)
 80010b2:	701a      	strb	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	20000058 	.word	0x20000058
 80010c4:	20000059 	.word	0x20000059
 80010c8:	20000038 	.word	0x20000038
 80010cc:	2000005a 	.word	0x2000005a

080010d0 <USART1_IRQHandler>:
    return false;
}

void
USART1_IRQHandler ()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  if ( USART1->ISR & (0b1 << 5))
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <USART1_IRQHandler+0x24>)
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	f003 0320 	and.w	r3, r3, #32
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d006      	beq.n	80010ee <USART1_IRQHandler+0x1e>
    {
      UART_write(USART1->RDR);
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <USART1_IRQHandler+0x24>)
 80010e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff99 	bl	8001020 <UART_write>
    }
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40013800 	.word	0x40013800

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fc:	f000 f8f1 	bl	80012e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001100:	f000 f80f 	bl	8001122 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  io();
 8001104:	f7ff fcc0 	bl	8000a88 <io>
  tajmer_init();
 8001108:	f7ff fd74 	bl	8000bf4 <tajmer_init>
  UART_init();
 800110c:	f7ff fe26 	bl	8000d5c <UART_init>
  sensor_Init();
 8001110:	f7ff f8ea 	bl	80002e8 <sensor_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001114:	b662      	cpsie	i
}
 8001116:	bf00      	nop

  while (1)
  {
    /* USER CODE END WHILE */

	  tactic_yellow_2(ID_SIMA2_POGONSKI, ID_SIMA2_ZAKRETNI);
 8001118:	2106      	movs	r1, #6
 800111a:	2005      	movs	r0, #5
 800111c:	f7ff f922 	bl	8000364 <tactic_yellow_2>
 8001120:	e7fa      	b.n	8001118 <main+0x20>

08001122 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b096      	sub	sp, #88	; 0x58
 8001126:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2244      	movs	r2, #68	; 0x44
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f001 f895 	bl	8002260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001136:	463b      	mov	r3, r7
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001144:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001148:	f000 fa34 	bl	80015b4 <HAL_PWREx_ControlVoltageScaling>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001152:	f000 f838 	bl	80011c6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001156:	2310      	movs	r3, #16
 8001158:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800115a:	2301      	movs	r3, #1
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001162:	2360      	movs	r3, #96	; 0x60
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001166:	2302      	movs	r3, #2
 8001168:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800116a:	2301      	movs	r3, #1
 800116c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800116e:	2301      	movs	r3, #1
 8001170:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001172:	2328      	movs	r3, #40	; 0x28
 8001174:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001176:	2307      	movs	r3, #7
 8001178:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800117a:	2302      	movs	r3, #2
 800117c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800117e:	2302      	movs	r3, #2
 8001180:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4618      	mov	r0, r3
 8001188:	f000 fa6a 	bl	8001660 <HAL_RCC_OscConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001192:	f000 f818 	bl	80011c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001196:	230f      	movs	r3, #15
 8001198:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119a:	2303      	movs	r3, #3
 800119c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	2104      	movs	r1, #4
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fe6a 	bl	8001e88 <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011ba:	f000 f804 	bl	80011c6 <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3758      	adds	r7, #88	; 0x58
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ca:	b672      	cpsid	i
}
 80011cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ce:	e7fe      	b.n	80011ce <Error_Handler+0x8>

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_MspInit+0x44>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_MspInit+0x44>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6613      	str	r3, [r2, #96]	; 0x60
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_MspInit+0x44>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_MspInit+0x44>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_MspInit+0x44>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6593      	str	r3, [r2, #88]	; 0x58
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_MspInit+0x44>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800121c:	e7fe      	b.n	800121c <NMI_Handler+0x4>

0800121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler+0x4>

0800122a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <UsageFault_Handler+0x4>

08001236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001264:	f000 f892 	bl	800138c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <SystemInit+0x20>)
 8001272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <SystemInit+0x20>)
 8001278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800127c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001294:	f7ff ffea 	bl	800126c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <LoopForever+0x6>)
  ldr r1, =_edata
 800129a:	490d      	ldr	r1, [pc, #52]	; (80012d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <LoopForever+0xe>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b0:	4c0a      	ldr	r4, [pc, #40]	; (80012dc <LoopForever+0x16>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012be:	f000 ffd7 	bl	8002270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012c2:	f7ff ff19 	bl	80010f8 <main>

080012c6 <LoopForever>:

LoopForever:
    b LoopForever
 80012c6:	e7fe      	b.n	80012c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80012d4:	08002318 	.word	0x08002318
  ldr r2, =_sbss
 80012d8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80012dc:	20000060 	.word	0x20000060

080012e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC1_IRQHandler>

080012e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 f91f 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f2:	200f      	movs	r0, #15
 80012f4:	f000 f80e 	bl	8001314 <HAL_InitTick>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	e001      	b.n	8001308 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001304:	f7ff ff64 	bl	80011d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001308:	79fb      	ldrb	r3, [r7, #7]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <HAL_InitTick+0x6c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d023      	beq.n	8001370 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <HAL_InitTick+0x70>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <HAL_InitTick+0x6c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f91d 	bl	800157e <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10f      	bne.n	800136a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d809      	bhi.n	8001364 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001350:	2200      	movs	r2, #0
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f000 f8f5 	bl	8001546 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800135c:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <HAL_InitTick+0x74>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e007      	b.n	8001374 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e004      	b.n	8001374 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	e001      	b.n	8001374 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000000c 	.word	0x2000000c
 8001384:	20000004 	.word	0x20000004
 8001388:	20000008 	.word	0x20000008

0800138c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	2000000c 	.word	0x2000000c
 80013b0:	2000005c 	.word	0x2000005c

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	2000005c 	.word	0x2000005c

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff8e 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff47 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff5c 	bl	8001414 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff8e 	bl	8001484 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5d 	bl	8001430 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffb0 	bl	80014ec <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40007000 	.word	0x40007000

080015b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015c2:	d130      	bne.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d0:	d038      	beq.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015da:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2232      	movs	r2, #50	; 0x32
 80015e8:	fb02 f303 	mul.w	r3, r2, r3
 80015ec:	4a1b      	ldr	r2, [pc, #108]	; (800165c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	0c9b      	lsrs	r3, r3, #18
 80015f4:	3301      	adds	r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f8:	e002      	b.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800160c:	d102      	bne.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x60>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f2      	bne.n	80015fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001620:	d110      	bne.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e00f      	b.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800162e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001632:	d007      	beq.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800163c:	4a05      	ldr	r2, [pc, #20]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001642:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40007000 	.word	0x40007000
 8001658:	20000004 	.word	0x20000004
 800165c:	431bde83 	.word	0x431bde83

08001660 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	f000 bc02 	b.w	8001e78 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001674:	4b96      	ldr	r3, [pc, #600]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800167e:	4b94      	ldr	r3, [pc, #592]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80e4 	beq.w	800185e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <HAL_RCC_OscConfig+0x4c>
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	f040 808b 	bne.w	80017ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	f040 8087 	bne.w	80017ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ac:	4b88      	ldr	r3, [pc, #544]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_OscConfig+0x64>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e3d9      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	4b81      	ldr	r3, [pc, #516]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d004      	beq.n	80016de <HAL_RCC_OscConfig+0x7e>
 80016d4:	4b7e      	ldr	r3, [pc, #504]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016dc:	e005      	b.n	80016ea <HAL_RCC_OscConfig+0x8a>
 80016de:	4b7c      	ldr	r3, [pc, #496]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80016e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d223      	bcs.n	8001736 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fd54 	bl	80021a0 <RCC_SetFlashLatencyFromMSIRange>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e3ba      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001702:	4b73      	ldr	r3, [pc, #460]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a72      	ldr	r2, [pc, #456]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001708:	f043 0308 	orr.w	r3, r3, #8
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b70      	ldr	r3, [pc, #448]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	496d      	ldr	r1, [pc, #436]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001720:	4b6b      	ldr	r3, [pc, #428]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	4968      	ldr	r1, [pc, #416]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
 8001734:	e025      	b.n	8001782 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001736:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a65      	ldr	r2, [pc, #404]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b63      	ldr	r3, [pc, #396]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4960      	ldr	r1, [pc, #384]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001754:	4b5e      	ldr	r3, [pc, #376]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	495b      	ldr	r1, [pc, #364]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 fd14 	bl	80021a0 <RCC_SetFlashLatencyFromMSIRange>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e37a      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001782:	f000 fc81 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 8001786:	4602      	mov	r2, r0
 8001788:	4b51      	ldr	r3, [pc, #324]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	4950      	ldr	r1, [pc, #320]	; (80018d4 <HAL_RCC_OscConfig+0x274>)
 8001794:	5ccb      	ldrb	r3, [r1, r3]
 8001796:	f003 031f 	and.w	r3, r3, #31
 800179a:	fa22 f303 	lsr.w	r3, r2, r3
 800179e:	4a4e      	ldr	r2, [pc, #312]	; (80018d8 <HAL_RCC_OscConfig+0x278>)
 80017a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017a2:	4b4e      	ldr	r3, [pc, #312]	; (80018dc <HAL_RCC_OscConfig+0x27c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fdb4 	bl	8001314 <HAL_InitTick>
 80017ac:	4603      	mov	r3, r0
 80017ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d052      	beq.n	800185c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	e35e      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d032      	beq.n	8001828 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017c2:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a42      	ldr	r2, [pc, #264]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ce:	f7ff fdf1 	bl	80013b4 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017d6:	f7ff fded 	bl	80013b4 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e347      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017e8:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f4:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a35      	ldr	r2, [pc, #212]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4930      	ldr	r1, [pc, #192]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001812:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	492b      	ldr	r1, [pc, #172]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
 8001826:	e01a      	b.n	800185e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001828:	4b29      	ldr	r3, [pc, #164]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a28      	ldr	r2, [pc, #160]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001834:	f7ff fdbe 	bl	80013b4 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800183c:	f7ff fdba 	bl	80013b4 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e314      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x1dc>
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800185c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d073      	beq.n	8001952 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b08      	cmp	r3, #8
 800186e:	d005      	beq.n	800187c <HAL_RCC_OscConfig+0x21c>
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2b0c      	cmp	r3, #12
 8001874:	d10e      	bne.n	8001894 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2b03      	cmp	r3, #3
 800187a:	d10b      	bne.n	8001894 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d063      	beq.n	8001950 <HAL_RCC_OscConfig+0x2f0>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d15f      	bne.n	8001950 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e2f1      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189c:	d106      	bne.n	80018ac <HAL_RCC_OscConfig+0x24c>
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e025      	b.n	80018f8 <HAL_RCC_OscConfig+0x298>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b4:	d114      	bne.n	80018e0 <HAL_RCC_OscConfig+0x280>
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a02      	ldr	r2, [pc, #8]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	e013      	b.n	80018f8 <HAL_RCC_OscConfig+0x298>
 80018d0:	40021000 	.word	0x40021000
 80018d4:	080022d0 	.word	0x080022d0
 80018d8:	20000004 	.word	0x20000004
 80018dc:	20000008 	.word	0x20000008
 80018e0:	4ba0      	ldr	r3, [pc, #640]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a9f      	ldr	r2, [pc, #636]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b9d      	ldr	r3, [pc, #628]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a9c      	ldr	r2, [pc, #624]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fd58 	bl	80013b4 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fd54 	bl	80013b4 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e2ae      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800191a:	4b92      	ldr	r3, [pc, #584]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x2a8>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fd44 	bl	80013b4 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff fd40 	bl	80013b4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e29a      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001942:	4b88      	ldr	r3, [pc, #544]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x2d0>
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d060      	beq.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b04      	cmp	r3, #4
 8001962:	d005      	beq.n	8001970 <HAL_RCC_OscConfig+0x310>
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d119      	bne.n	800199e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d116      	bne.n	800199e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001970:	4b7c      	ldr	r3, [pc, #496]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_OscConfig+0x328>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e277      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b76      	ldr	r3, [pc, #472]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	061b      	lsls	r3, r3, #24
 8001996:	4973      	ldr	r1, [pc, #460]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199c:	e040      	b.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d023      	beq.n	80019ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a6:	4b6f      	ldr	r3, [pc, #444]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a6e      	ldr	r2, [pc, #440]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b2:	f7ff fcff 	bl	80013b4 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ba:	f7ff fcfb 	bl	80013b4 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e255      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019cc:	4b65      	ldr	r3, [pc, #404]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b62      	ldr	r3, [pc, #392]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	061b      	lsls	r3, r3, #24
 80019e6:	495f      	ldr	r1, [pc, #380]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
 80019ec:	e018      	b.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ee:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a5c      	ldr	r2, [pc, #368]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff fcdb 	bl	80013b4 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff fcd7 	bl	80013b4 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e231      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a14:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d03c      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a34:	4b4b      	ldr	r3, [pc, #300]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3a:	4a4a      	ldr	r2, [pc, #296]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff fcb6 	bl	80013b4 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fcb2 	bl	80013b4 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e20c      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a5e:	4b41      	ldr	r3, [pc, #260]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0ef      	beq.n	8001a4c <HAL_RCC_OscConfig+0x3ec>
 8001a6c:	e01b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a74:	4a3b      	ldr	r2, [pc, #236]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fc99 	bl	80013b4 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a86:	f7ff fc95 	bl	80013b4 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1ef      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a98:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ef      	bne.n	8001a86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80a6 	beq.w	8001c00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10d      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac4:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac8:	4a26      	ldr	r2, [pc, #152]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ace:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001adc:	2301      	movs	r3, #1
 8001ade:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_RCC_OscConfig+0x508>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d118      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <HAL_RCC_OscConfig+0x508>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_RCC_OscConfig+0x508>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af8:	f7ff fc5c 	bl	80013b4 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b00:	f7ff fc58 	bl	80013b4 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e1b2      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_RCC_OscConfig+0x508>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d108      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4d8>
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b36:	e029      	b.n	8001b8c <HAL_RCC_OscConfig+0x52c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d115      	bne.n	8001b6c <HAL_RCC_OscConfig+0x50c>
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b46:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	4a03      	ldr	r2, [pc, #12]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b60:	e014      	b.n	8001b8c <HAL_RCC_OscConfig+0x52c>
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	4b9a      	ldr	r3, [pc, #616]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b72:	4a99      	ldr	r2, [pc, #612]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b7c:	4b96      	ldr	r3, [pc, #600]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b82:	4a95      	ldr	r2, [pc, #596]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d016      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7ff fc0e 	bl	80013b4 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fc0a 	bl	80013b4 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e162      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb2:	4b89      	ldr	r3, [pc, #548]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0ed      	beq.n	8001b9c <HAL_RCC_OscConfig+0x53c>
 8001bc0:	e015      	b.n	8001bee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fbf7 	bl	80013b4 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7ff fbf3 	bl	80013b4 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e14b      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be0:	4b7d      	ldr	r3, [pc, #500]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1ed      	bne.n	8001bca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bee:	7ffb      	ldrb	r3, [r7, #31]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d105      	bne.n	8001c00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf4:	4b78      	ldr	r3, [pc, #480]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	4a77      	ldr	r2, [pc, #476]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d03c      	beq.n	8001c86 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c14:	4b70      	ldr	r3, [pc, #448]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001c16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c1a:	4a6f      	ldr	r2, [pc, #444]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7ff fbc6 	bl	80013b4 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c2c:	f7ff fbc2 	bl	80013b4 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e11c      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c3e:	4b66      	ldr	r3, [pc, #408]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001c40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0ef      	beq.n	8001c2c <HAL_RCC_OscConfig+0x5cc>
 8001c4c:	e01b      	b.n	8001c86 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c4e:	4b62      	ldr	r3, [pc, #392]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001c50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c54:	4a60      	ldr	r2, [pc, #384]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5e:	f7ff fba9 	bl	80013b4 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c66:	f7ff fba5 	bl	80013b4 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e0ff      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c78:	4b57      	ldr	r3, [pc, #348]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001c7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1ef      	bne.n	8001c66 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 80f3 	beq.w	8001e76 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	f040 80c9 	bne.w	8001e2c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c9a:	4b4f      	ldr	r3, [pc, #316]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f003 0203 	and.w	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d12c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d123      	bne.n	8001d08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d11b      	bne.n	8001d08 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cda:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d113      	bne.n	8001d08 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cea:	085b      	lsrs	r3, r3, #1
 8001cec:	3b01      	subs	r3, #1
 8001cee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d109      	bne.n	8001d08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	085b      	lsrs	r3, r3, #1
 8001d00:	3b01      	subs	r3, #1
 8001d02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d06b      	beq.n	8001de0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	d062      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d0e:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e0ac      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d1e:	4b2e      	ldr	r3, [pc, #184]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a2d      	ldr	r2, [pc, #180]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001d24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d2a:	f7ff fb43 	bl	80013b4 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d32:	f7ff fb3f 	bl	80013b4 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e099      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <HAL_RCC_OscConfig+0x77c>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d60:	3a01      	subs	r2, #1
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	4311      	orrs	r1, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d6a:	0212      	lsls	r2, r2, #8
 8001d6c:	4311      	orrs	r1, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d72:	0852      	lsrs	r2, r2, #1
 8001d74:	3a01      	subs	r2, #1
 8001d76:	0552      	lsls	r2, r2, #21
 8001d78:	4311      	orrs	r1, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d7e:	0852      	lsrs	r2, r2, #1
 8001d80:	3a01      	subs	r2, #1
 8001d82:	0652      	lsls	r2, r2, #25
 8001d84:	4311      	orrs	r1, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d8a:	06d2      	lsls	r2, r2, #27
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	4912      	ldr	r1, [pc, #72]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001daa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dac:	f7ff fb02 	bl	80013b4 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db4:	f7ff fafe 	bl	80013b4 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e058      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <HAL_RCC_OscConfig+0x778>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd2:	e050      	b.n	8001e76 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e04f      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de0:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <HAL_RCC_OscConfig+0x820>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d144      	bne.n	8001e76 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_RCC_OscConfig+0x820>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a23      	ldr	r2, [pc, #140]	; (8001e80 <HAL_RCC_OscConfig+0x820>)
 8001df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_RCC_OscConfig+0x820>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4a20      	ldr	r2, [pc, #128]	; (8001e80 <HAL_RCC_OscConfig+0x820>)
 8001dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e04:	f7ff fad6 	bl	80013b4 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7ff fad2 	bl	80013b4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e02c      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_RCC_OscConfig+0x820>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x7ac>
 8001e2a:	e024      	b.n	8001e76 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d01f      	beq.n	8001e72 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_RCC_OscConfig+0x820>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <HAL_RCC_OscConfig+0x820>)
 8001e38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7ff fab9 	bl	80013b4 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e46:	f7ff fab5 	bl	80013b4 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e00f      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_RCC_OscConfig+0x820>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_OscConfig+0x820>)
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	4905      	ldr	r1, [pc, #20]	; (8001e80 <HAL_RCC_OscConfig+0x820>)
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_RCC_OscConfig+0x824>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60cb      	str	r3, [r1, #12]
 8001e70:	e001      	b.n	8001e76 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	feeefffc 	.word	0xfeeefffc

08001e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0e7      	b.n	800206c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b75      	ldr	r3, [pc, #468]	; (8002074 <HAL_RCC_ClockConfig+0x1ec>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d910      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b72      	ldr	r3, [pc, #456]	; (8002074 <HAL_RCC_ClockConfig+0x1ec>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 0207 	bic.w	r2, r3, #7
 8001eb2:	4970      	ldr	r1, [pc, #448]	; (8002074 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b6e      	ldr	r3, [pc, #440]	; (8002074 <HAL_RCC_ClockConfig+0x1ec>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0cf      	b.n	800206c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d010      	beq.n	8001efa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	4b66      	ldr	r3, [pc, #408]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d908      	bls.n	8001efa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee8:	4b63      	ldr	r3, [pc, #396]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4960      	ldr	r1, [pc, #384]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d04c      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0e:	4b5a      	ldr	r3, [pc, #360]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d121      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0a6      	b.n	800206c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f26:	4b54      	ldr	r3, [pc, #336]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d115      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e09a      	b.n	800206c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f3e:	4b4e      	ldr	r3, [pc, #312]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e08e      	b.n	800206c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f4e:	4b4a      	ldr	r3, [pc, #296]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e086      	b.n	800206c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f5e:	4b46      	ldr	r3, [pc, #280]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f023 0203 	bic.w	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4943      	ldr	r1, [pc, #268]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f70:	f7ff fa20 	bl	80013b4 <HAL_GetTick>
 8001f74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f78:	f7ff fa1c 	bl	80013b4 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e06e      	b.n	800206c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 020c 	and.w	r2, r3, #12
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d1eb      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d010      	beq.n	8001fce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	4b31      	ldr	r3, [pc, #196]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d208      	bcs.n	8001fce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	492b      	ldr	r1, [pc, #172]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fce:	4b29      	ldr	r3, [pc, #164]	; (8002074 <HAL_RCC_ClockConfig+0x1ec>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d210      	bcs.n	8001ffe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fdc:	4b25      	ldr	r3, [pc, #148]	; (8002074 <HAL_RCC_ClockConfig+0x1ec>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 0207 	bic.w	r2, r3, #7
 8001fe4:	4923      	ldr	r1, [pc, #140]	; (8002074 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <HAL_RCC_ClockConfig+0x1ec>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e036      	b.n	800206c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d008      	beq.n	800201c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800200a:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	4918      	ldr	r1, [pc, #96]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d009      	beq.n	800203c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4910      	ldr	r1, [pc, #64]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800203c:	f000 f824 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 8002040:	4602      	mov	r2, r0
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	490b      	ldr	r1, [pc, #44]	; (800207c <HAL_RCC_ClockConfig+0x1f4>)
 800204e:	5ccb      	ldrb	r3, [r1, r3]
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
 8002058:	4a09      	ldr	r2, [pc, #36]	; (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 800205a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_RCC_ClockConfig+0x1fc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff f957 	bl	8001314 <HAL_InitTick>
 8002066:	4603      	mov	r3, r0
 8002068:	72fb      	strb	r3, [r7, #11]

  return status;
 800206a:	7afb      	ldrb	r3, [r7, #11]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40022000 	.word	0x40022000
 8002078:	40021000 	.word	0x40021000
 800207c:	080022d0 	.word	0x080022d0
 8002080:	20000004 	.word	0x20000004
 8002084:	20000008 	.word	0x20000008

08002088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002096:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020a0:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x34>
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	2b0c      	cmp	r3, #12
 80020b4:	d121      	bne.n	80020fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d11e      	bne.n	80020fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020bc:	4b34      	ldr	r3, [pc, #208]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020c8:	4b31      	ldr	r3, [pc, #196]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	e005      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020d8:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020e4:	4a2b      	ldr	r2, [pc, #172]	; (8002194 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10d      	bne.n	8002110 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d102      	bne.n	8002106 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <HAL_RCC_GetSysClockFreq+0x110>)
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	e004      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b08      	cmp	r3, #8
 800210a:	d101      	bne.n	8002110 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_RCC_GetSysClockFreq+0x114>)
 800210e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d134      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d003      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0xa6>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d003      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0xac>
 800212c:	e005      	b.n	800213a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_RCC_GetSysClockFreq+0x110>)
 8002130:	617b      	str	r3, [r7, #20]
      break;
 8002132:	e005      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_RCC_GetSysClockFreq+0x114>)
 8002136:	617b      	str	r3, [r7, #20]
      break;
 8002138:	e002      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	617b      	str	r3, [r7, #20]
      break;
 800213e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	3301      	adds	r3, #1
 800214c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	fb03 f202 	mul.w	r2, r3, r2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	fbb2 f3f3 	udiv	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	0e5b      	lsrs	r3, r3, #25
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	3301      	adds	r3, #1
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002180:	69bb      	ldr	r3, [r7, #24]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	; 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	080022e0 	.word	0x080022e0
 8002198:	00f42400 	.word	0x00f42400
 800219c:	007a1200 	.word	0x007a1200

080021a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021ac:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021b8:	f7ff f9ee 	bl	8001598 <HAL_PWREx_GetVoltageRange>
 80021bc:	6178      	str	r0, [r7, #20]
 80021be:	e014      	b.n	80021ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	4a24      	ldr	r2, [pc, #144]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ca:	6593      	str	r3, [r2, #88]	; 0x58
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021d8:	f7ff f9de 	bl	8001598 <HAL_PWREx_GetVoltageRange>
 80021dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021f0:	d10b      	bne.n	800220a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b80      	cmp	r3, #128	; 0x80
 80021f6:	d919      	bls.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2ba0      	cmp	r3, #160	; 0xa0
 80021fc:	d902      	bls.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021fe:	2302      	movs	r3, #2
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	e013      	b.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002204:	2301      	movs	r3, #1
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	e010      	b.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b80      	cmp	r3, #128	; 0x80
 800220e:	d902      	bls.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002210:	2303      	movs	r3, #3
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	e00a      	b.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b80      	cmp	r3, #128	; 0x80
 800221a:	d102      	bne.n	8002222 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800221c:	2302      	movs	r3, #2
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	e004      	b.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b70      	cmp	r3, #112	; 0x70
 8002226:	d101      	bne.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002228:	2301      	movs	r3, #1
 800222a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 0207 	bic.w	r2, r3, #7
 8002234:	4909      	ldr	r1, [pc, #36]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	429a      	cmp	r2, r3
 8002248:	d001      	beq.n	800224e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	40022000 	.word	0x40022000

08002260 <memset>:
 8002260:	4402      	add	r2, r0
 8002262:	4603      	mov	r3, r0
 8002264:	4293      	cmp	r3, r2
 8002266:	d100      	bne.n	800226a <memset+0xa>
 8002268:	4770      	bx	lr
 800226a:	f803 1b01 	strb.w	r1, [r3], #1
 800226e:	e7f9      	b.n	8002264 <memset+0x4>

08002270 <__libc_init_array>:
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	4d0d      	ldr	r5, [pc, #52]	; (80022a8 <__libc_init_array+0x38>)
 8002274:	4c0d      	ldr	r4, [pc, #52]	; (80022ac <__libc_init_array+0x3c>)
 8002276:	1b64      	subs	r4, r4, r5
 8002278:	10a4      	asrs	r4, r4, #2
 800227a:	2600      	movs	r6, #0
 800227c:	42a6      	cmp	r6, r4
 800227e:	d109      	bne.n	8002294 <__libc_init_array+0x24>
 8002280:	4d0b      	ldr	r5, [pc, #44]	; (80022b0 <__libc_init_array+0x40>)
 8002282:	4c0c      	ldr	r4, [pc, #48]	; (80022b4 <__libc_init_array+0x44>)
 8002284:	f000 f818 	bl	80022b8 <_init>
 8002288:	1b64      	subs	r4, r4, r5
 800228a:	10a4      	asrs	r4, r4, #2
 800228c:	2600      	movs	r6, #0
 800228e:	42a6      	cmp	r6, r4
 8002290:	d105      	bne.n	800229e <__libc_init_array+0x2e>
 8002292:	bd70      	pop	{r4, r5, r6, pc}
 8002294:	f855 3b04 	ldr.w	r3, [r5], #4
 8002298:	4798      	blx	r3
 800229a:	3601      	adds	r6, #1
 800229c:	e7ee      	b.n	800227c <__libc_init_array+0xc>
 800229e:	f855 3b04 	ldr.w	r3, [r5], #4
 80022a2:	4798      	blx	r3
 80022a4:	3601      	adds	r6, #1
 80022a6:	e7f2      	b.n	800228e <__libc_init_array+0x1e>
 80022a8:	08002310 	.word	0x08002310
 80022ac:	08002310 	.word	0x08002310
 80022b0:	08002310 	.word	0x08002310
 80022b4:	08002314 	.word	0x08002314

080022b8 <_init>:
 80022b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ba:	bf00      	nop
 80022bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022be:	bc08      	pop	{r3}
 80022c0:	469e      	mov	lr, r3
 80022c2:	4770      	bx	lr

080022c4 <_fini>:
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c6:	bf00      	nop
 80022c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ca:	bc08      	pop	{r3}
 80022cc:	469e      	mov	lr, r3
 80022ce:	4770      	bx	lr
